{"remainingRequest":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hq_failmy/Desktop/前端代码0405/src/components/tables/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hq_failmy/Desktop/前端代码0405/src/components/tables/table.vue","mtime":1554690330971},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\r\nimport \"bootstrap-table/dist/bootstrap-table.css\";\r\nimport \"bootstrap-table/dist/bootstrap-table.js\";\r\nimport \"bootstrap-table/dist/locale/bootstrap-table-zh-CN.js\";\r\nexport default {\r\n  data() {\r\n    var _ = this;\r\n    //debugger;\r\n    return {\r\n      id: _.option.tableId,\r\n      tableOption: {\r\n        url: \"\", //请求后台的URL（*）\r\n        method: \"get\", //请求方式（*）\r\n        striped: true, //是否显示行间隔色\r\n        cache: true, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）\r\n        pagination: true, //是否显示分页（*）\r\n        sortable: true, //是否启用排序\r\n        sortOrder: \"asc\", //排序方式\r\n        params: {}, //额外查询参数\r\n        queryParams: params => {\r\n          var temp = {\r\n            SkipCount: params.offset, //页面大小\r\n            MaxResultCount: params.limit, //页码\r\n            Sorting: params.sort ? params.sort + \" \" + params.order : undefined //排序列名\r\n          };\r\n          Object.assign(temp, _.tableOption.params);\r\n          return temp;\r\n        }, //传递参数（*）\r\n        sidePagination: \"server\", //分页方式：client客户端分页，server服务端分页（*）\r\n        pageNumber: 1, //初始化加载第一页，默认第一页\r\n        pageSize: 10, //每页的记录行数（*）\r\n        pageList: [10, 25, 50, 100], //可供选择的每页的行数（*）\r\n        search: false, //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大\r\n        strictSearch: false,\r\n        showColumns: false, //是否显示所有的列\r\n        showRefresh: false, //是否显示刷新按钮\r\n        minimumCountColumns: 1, //最少允许的列数\r\n        clickToSelect: true, //是否启用点击选中行\r\n        //uniqueId: \"ID\", //每一行的唯一标识，一般为主键列\r\n        showToggle: false, //是否显示详细视图和列表视图的切换按钮\r\n        cardView: false, //是否显示详细视图\r\n        detailView: false, //是否显示父子表\r\n        responseHandler: function(res) {\r\n          var result = {\r\n            rows: [],\r\n            total: 0\r\n          };\r\n          if (res.success) {\r\n            console.log(\"表格数据:\");\r\n            console.log(res.result.items[0]);\r\n            result.rows = res.result.items;\r\n            result.total = res.result.totalCount;\r\n          }\r\n          return result;\r\n        },\r\n        columns: []\r\n      }\r\n    };\r\n  },\r\n  props: [\"option\"],\r\n  mounted: function() {\r\n    console.log(\"option:\");\r\n    console.log(this.option);\r\n    var table = $(\"#\" + this.id);\r\n    this.handleData();\r\n    table.bootstrapTable($.extend(this.tableOption, this.option));\r\n    table.tableObj = table;\r\n    this.tableObj = table;\r\n  },\r\n  methods: {\r\n    // 创建操作栏按钮\r\n    handleData: function() {\r\n      let _ = this;\r\n      if (\"actions\" in this.option) {\r\n        this.option.columns.push({\r\n          field: \"action\",\r\n          title: \"操作\",\r\n          align: \"center\",\r\n          formatter: function(val, row, idx) {\r\n            let html = \"\";\r\n            _.option.actions.map(item => {\r\n              let rowId = row[_.option.uniqueId];\r\n              let btnType = item.buttonType\r\n                ? \"btn \" + item.buttonType\r\n                : \"btn btn-primary\";\r\n              html +=\r\n                \"<button id=\" +\r\n                item.key +\r\n                \" type=button class=\" +\r\n                '\"' +\r\n                btnType +\r\n                '\"' +\r\n                \" +  rowId=\" +\r\n                rowId +\r\n                \">\" +\r\n                item.title +\r\n                \"</button>&nbsp;\";\r\n            });\r\n\r\n            return html;\r\n          }\r\n        });\r\n      }\r\n\r\n      $(\"#\" + _.id).on(\"click\", \"button\", function(e) {\r\n        \r\n        let rowId = $(this).attr(\"rowId\");\r\n        if (rowId) {\r\n          let obj = _.tableObj.bootstrapTable(\"getRowByUniqueId\", rowId);\r\n          _.$emit(this.id + \"Block\", obj,this);\r\n        }\r\n      });\r\n    },\r\n\r\n    operation: function(option) {\r\n      this.tableObj.bootstrapTable(\r\n        option,\r\n        $.extend({}, this.tableOption, this.option)\r\n      );\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["table.vue"],"names":[],"mappingsfile":"table.vue","sourceRoot":"src/components/tables","sourcesContent":["<template>\r\n  <table :id=\"id\"></table>\r\n</template>\r\n<script>\r\nimport \"bootstrap-table/dist/bootstrap-table.css\";\r\nimport \"bootstrap-table/dist/bootstrap-table.js\";\r\nimport \"bootstrap-table/dist/locale/bootstrap-table-zh-CN.js\";\r\nexport default {\r\n  data() {\r\n    var _ = this;\r\n    //debugger;\r\n    return {\r\n      id: _.option.tableId,\r\n      tableOption: {\r\n        url: \"\", //请求后台的URL（*）\r\n        method: \"get\", //请求方式（*）\r\n        striped: true, //是否显示行间隔色\r\n        cache: true, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）\r\n        pagination: true, //是否显示分页（*）\r\n        sortable: true, //是否启用排序\r\n        sortOrder: \"asc\", //排序方式\r\n        params: {}, //额外查询参数\r\n        queryParams: params => {\r\n          var temp = {\r\n            SkipCount: params.offset, //页面大小\r\n            MaxResultCount: params.limit, //页码\r\n            Sorting: params.sort ? params.sort + \" \" + params.order : undefined //排序列名\r\n          };\r\n          Object.assign(temp, _.tableOption.params);\r\n          return temp;\r\n        }, //传递参数（*）\r\n        sidePagination: \"server\", //分页方式：client客户端分页，server服务端分页（*）\r\n        pageNumber: 1, //初始化加载第一页，默认第一页\r\n        pageSize: 10, //每页的记录行数（*）\r\n        pageList: [10, 25, 50, 100], //可供选择的每页的行数（*）\r\n        search: false, //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大\r\n        strictSearch: false,\r\n        showColumns: false, //是否显示所有的列\r\n        showRefresh: false, //是否显示刷新按钮\r\n        minimumCountColumns: 1, //最少允许的列数\r\n        clickToSelect: true, //是否启用点击选中行\r\n        //uniqueId: \"ID\", //每一行的唯一标识，一般为主键列\r\n        showToggle: false, //是否显示详细视图和列表视图的切换按钮\r\n        cardView: false, //是否显示详细视图\r\n        detailView: false, //是否显示父子表\r\n        responseHandler: function(res) {\r\n          var result = {\r\n            rows: [],\r\n            total: 0\r\n          };\r\n          if (res.success) {\r\n            console.log(\"表格数据:\");\r\n            console.log(res.result.items[0]);\r\n            result.rows = res.result.items;\r\n            result.total = res.result.totalCount;\r\n          }\r\n          return result;\r\n        },\r\n        columns: []\r\n      }\r\n    };\r\n  },\r\n  props: [\"option\"],\r\n  mounted: function() {\r\n    console.log(\"option:\");\r\n    console.log(this.option);\r\n    var table = $(\"#\" + this.id);\r\n    this.handleData();\r\n    table.bootstrapTable($.extend(this.tableOption, this.option));\r\n    table.tableObj = table;\r\n    this.tableObj = table;\r\n  },\r\n  methods: {\r\n    // 创建操作栏按钮\r\n    handleData: function() {\r\n      let _ = this;\r\n      if (\"actions\" in this.option) {\r\n        this.option.columns.push({\r\n          field: \"action\",\r\n          title: \"操作\",\r\n          align: \"center\",\r\n          formatter: function(val, row, idx) {\r\n            let html = \"\";\r\n            _.option.actions.map(item => {\r\n              let rowId = row[_.option.uniqueId];\r\n              let btnType = item.buttonType\r\n                ? \"btn \" + item.buttonType\r\n                : \"btn btn-primary\";\r\n              html +=\r\n                \"<button id=\" +\r\n                item.key +\r\n                \" type=button class=\" +\r\n                '\"' +\r\n                btnType +\r\n                '\"' +\r\n                \" +  rowId=\" +\r\n                rowId +\r\n                \">\" +\r\n                item.title +\r\n                \"</button>&nbsp;\";\r\n            });\r\n\r\n            return html;\r\n          }\r\n        });\r\n      }\r\n\r\n      $(\"#\" + _.id).on(\"click\", \"button\", function(e) {\r\n        \r\n        let rowId = $(this).attr(\"rowId\");\r\n        if (rowId) {\r\n          let obj = _.tableObj.bootstrapTable(\"getRowByUniqueId\", rowId);\r\n          _.$emit(this.id + \"Block\", obj,this);\r\n        }\r\n      });\r\n    },\r\n\r\n    operation: function(option) {\r\n      this.tableObj.bootstrapTable(\r\n        option,\r\n        $.extend({}, this.tableOption, this.option)\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.table tbody tr td {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n</style>\r\n"]}]}