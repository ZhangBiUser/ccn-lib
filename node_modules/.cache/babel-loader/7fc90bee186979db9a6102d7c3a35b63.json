{"remainingRequest":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/babel-loader/lib/index.js!/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hq_failmy/Desktop/前端代码0405/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hq_failmy/Desktop/前端代码0405/src/components/tables/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hq_failmy/Desktop/前端代码0405/src/components/tables/table.vue","mtime":1554690330971},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\nimport \"bootstrap-table/dist/bootstrap-table.css\";\nimport \"bootstrap-table/dist/bootstrap-table.js\";\nimport \"bootstrap-table/dist/locale/bootstrap-table-zh-CN.js\";\nexport default {\n  data: function data() {\n    var _ = this; //debugger;\n\n\n    return {\n      id: _.option.tableId,\n      tableOption: {\n        url: \"\",\n        //请求后台的URL（*）\n        method: \"get\",\n        //请求方式（*）\n        striped: true,\n        //是否显示行间隔色\n        cache: true,\n        //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）\n        pagination: true,\n        //是否显示分页（*）\n        sortable: true,\n        //是否启用排序\n        sortOrder: \"asc\",\n        //排序方式\n        params: {},\n        //额外查询参数\n        queryParams: function queryParams(params) {\n          var temp = {\n            SkipCount: params.offset,\n            //页面大小\n            MaxResultCount: params.limit,\n            //页码\n            Sorting: params.sort ? params.sort + \" \" + params.order : undefined //排序列名\n\n          };\n          Object.assign(temp, _.tableOption.params);\n          return temp;\n        },\n        //传递参数（*）\n        sidePagination: \"server\",\n        //分页方式：client客户端分页，server服务端分页（*）\n        pageNumber: 1,\n        //初始化加载第一页，默认第一页\n        pageSize: 10,\n        //每页的记录行数（*）\n        pageList: [10, 25, 50, 100],\n        //可供选择的每页的行数（*）\n        search: false,\n        //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大\n        strictSearch: false,\n        showColumns: false,\n        //是否显示所有的列\n        showRefresh: false,\n        //是否显示刷新按钮\n        minimumCountColumns: 1,\n        //最少允许的列数\n        clickToSelect: true,\n        //是否启用点击选中行\n        //uniqueId: \"ID\", //每一行的唯一标识，一般为主键列\n        showToggle: false,\n        //是否显示详细视图和列表视图的切换按钮\n        cardView: false,\n        //是否显示详细视图\n        detailView: false,\n        //是否显示父子表\n        responseHandler: function responseHandler(res) {\n          var result = {\n            rows: [],\n            total: 0\n          };\n\n          if (res.success) {\n            console.log(\"表格数据:\");\n            console.log(res.result.items[0]);\n            result.rows = res.result.items;\n            result.total = res.result.totalCount;\n          }\n\n          return result;\n        },\n        columns: []\n      }\n    };\n  },\n  props: [\"option\"],\n  mounted: function mounted() {\n    console.log(\"option:\");\n    console.log(this.option);\n    var table = $(\"#\" + this.id);\n    this.handleData();\n    table.bootstrapTable($.extend(this.tableOption, this.option));\n    table.tableObj = table;\n    this.tableObj = table;\n  },\n  methods: {\n    // 创建操作栏按钮\n    handleData: function handleData() {\n      var _ = this;\n\n      if (\"actions\" in this.option) {\n        this.option.columns.push({\n          field: \"action\",\n          title: \"操作\",\n          align: \"center\",\n          formatter: function formatter(val, row, idx) {\n            var html = \"\";\n\n            _.option.actions.map(function (item) {\n              var rowId = row[_.option.uniqueId];\n              var btnType = item.buttonType ? \"btn \" + item.buttonType : \"btn btn-primary\";\n              html += \"<button id=\" + item.key + \" type=button class=\" + '\"' + btnType + '\"' + \" +  rowId=\" + rowId + \">\" + item.title + \"</button>&nbsp;\";\n            });\n\n            return html;\n          }\n        });\n      }\n\n      $(\"#\" + _.id).on(\"click\", \"button\", function (e) {\n        var rowId = $(this).attr(\"rowId\");\n\n        if (rowId) {\n          var obj = _.tableObj.bootstrapTable(\"getRowByUniqueId\", rowId);\n\n          _.$emit(this.id + \"Block\", obj, this);\n        }\n      });\n    },\n    operation: function operation(option) {\n      this.tableObj.bootstrapTable(option, $.extend({}, this.tableOption, this.option));\n    }\n  }\n};",{"version":3,"sources":["table.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <table :id=\"id\"></table>\r\n</template>\r\n<script>\r\nimport \"bootstrap-table/dist/bootstrap-table.css\";\r\nimport \"bootstrap-table/dist/bootstrap-table.js\";\r\nimport \"bootstrap-table/dist/locale/bootstrap-table-zh-CN.js\";\r\nexport default {\r\n  data() {\r\n    var _ = this;\r\n    //debugger;\r\n    return {\r\n      id: _.option.tableId,\r\n      tableOption: {\r\n        url: \"\", //请求后台的URL（*）\r\n        method: \"get\", //请求方式（*）\r\n        striped: true, //是否显示行间隔色\r\n        cache: true, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）\r\n        pagination: true, //是否显示分页（*）\r\n        sortable: true, //是否启用排序\r\n        sortOrder: \"asc\", //排序方式\r\n        params: {}, //额外查询参数\r\n        queryParams: params => {\r\n          var temp = {\r\n            SkipCount: params.offset, //页面大小\r\n            MaxResultCount: params.limit, //页码\r\n            Sorting: params.sort ? params.sort + \" \" + params.order : undefined //排序列名\r\n          };\r\n          Object.assign(temp, _.tableOption.params);\r\n          return temp;\r\n        }, //传递参数（*）\r\n        sidePagination: \"server\", //分页方式：client客户端分页，server服务端分页（*）\r\n        pageNumber: 1, //初始化加载第一页，默认第一页\r\n        pageSize: 10, //每页的记录行数（*）\r\n        pageList: [10, 25, 50, 100], //可供选择的每页的行数（*）\r\n        search: false, //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大\r\n        strictSearch: false,\r\n        showColumns: false, //是否显示所有的列\r\n        showRefresh: false, //是否显示刷新按钮\r\n        minimumCountColumns: 1, //最少允许的列数\r\n        clickToSelect: true, //是否启用点击选中行\r\n        //uniqueId: \"ID\", //每一行的唯一标识，一般为主键列\r\n        showToggle: false, //是否显示详细视图和列表视图的切换按钮\r\n        cardView: false, //是否显示详细视图\r\n        detailView: false, //是否显示父子表\r\n        responseHandler: function(res) {\r\n          var result = {\r\n            rows: [],\r\n            total: 0\r\n          };\r\n          if (res.success) {\r\n            console.log(\"表格数据:\");\r\n            console.log(res.result.items[0]);\r\n            result.rows = res.result.items;\r\n            result.total = res.result.totalCount;\r\n          }\r\n          return result;\r\n        },\r\n        columns: []\r\n      }\r\n    };\r\n  },\r\n  props: [\"option\"],\r\n  mounted: function() {\r\n    console.log(\"option:\");\r\n    console.log(this.option);\r\n    var table = $(\"#\" + this.id);\r\n    this.handleData();\r\n    table.bootstrapTable($.extend(this.tableOption, this.option));\r\n    table.tableObj = table;\r\n    this.tableObj = table;\r\n  },\r\n  methods: {\r\n    // 创建操作栏按钮\r\n    handleData: function() {\r\n      let _ = this;\r\n      if (\"actions\" in this.option) {\r\n        this.option.columns.push({\r\n          field: \"action\",\r\n          title: \"操作\",\r\n          align: \"center\",\r\n          formatter: function(val, row, idx) {\r\n            let html = \"\";\r\n            _.option.actions.map(item => {\r\n              let rowId = row[_.option.uniqueId];\r\n              let btnType = item.buttonType\r\n                ? \"btn \" + item.buttonType\r\n                : \"btn btn-primary\";\r\n              html +=\r\n                \"<button id=\" +\r\n                item.key +\r\n                \" type=button class=\" +\r\n                '\"' +\r\n                btnType +\r\n                '\"' +\r\n                \" +  rowId=\" +\r\n                rowId +\r\n                \">\" +\r\n                item.title +\r\n                \"</button>&nbsp;\";\r\n            });\r\n\r\n            return html;\r\n          }\r\n        });\r\n      }\r\n\r\n      $(\"#\" + _.id).on(\"click\", \"button\", function(e) {\r\n        \r\n        let rowId = $(this).attr(\"rowId\");\r\n        if (rowId) {\r\n          let obj = _.tableObj.bootstrapTable(\"getRowByUniqueId\", rowId);\r\n          _.$emit(this.id + \"Block\", obj,this);\r\n        }\r\n      });\r\n    },\r\n\r\n    operation: function(option) {\r\n      this.tableObj.bootstrapTable(\r\n        option,\r\n        $.extend({}, this.tableOption, this.option)\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.table tbody tr td {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tables"}]}