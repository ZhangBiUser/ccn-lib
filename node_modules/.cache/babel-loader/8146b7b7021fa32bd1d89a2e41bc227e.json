{"remainingRequest":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/babel-loader/lib/index.js!/Users/hq_failmy/Desktop/前端代码0405/src/plugins/bootstrap-validator/bootstrapValidator.js","dependencies":[{"path":"/Users/hq_failmy/Desktop/前端代码0405/src/plugins/bootstrap-validator/bootstrapValidator.js","mtime":1553140248000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hq_failmy/Desktop/前端代码0405/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _typeof from \"/Users/hq_failmy/Desktop/\\u524D\\u7AEF\\u4EE3\\u78010405/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.array.find\";\n\n/*!\r\n * BootstrapValidator (http://bootstrapvalidator.com)\r\n * The best jQuery plugin to validate form fields. Designed to use with Bootstrap 3\r\n *\r\n * @version     v0.5.1-dev, built on 2014-07-23 6:05:15 AM\r\n * @author      https://twitter.com/nghuuphuoc\r\n * @copyright   (c) 2013 - 2014 Nguyen Huu Phuoc\r\n * @license     MIT\r\n */\n(function ($) {\n  var BootstrapValidator = function BootstrapValidator(form, options) {\n    this.$form = $(form);\n    this.options = $.extend({}, $.fn.bootstrapValidator.DEFAULT_OPTIONS, options);\n    this.$invalidFields = $([]); // Array of invalid fields\n\n    this.$submitButton = null; // The submit button which is clicked to submit form\n    // Validating status\n\n    this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\n    this.STATUS_VALIDATING = 'VALIDATING';\n    this.STATUS_INVALID = 'INVALID';\n    this.STATUS_VALID = 'VALID'; // Determine the event that is fired when user change the field value\n    // Most modern browsers supports input event except IE 7, 8.\n    // IE 9 supports input event but the event is still not fired if I press the backspace key.\n    // Get IE version\n    // https://gist.github.com/padolsey/527683/#comment-7595\n\n    var ieVersion = function () {\n      var v = 3,\n          div = document.createElement('div'),\n          a = div.all || [];\n\n      while (div.innerHTML = '<!--[if gt IE ' + ++v + ']><br><![endif]-->', a[0]) {}\n\n      return v > 4 ? v : !v;\n    }();\n\n    var el = document.createElement('div');\n    this._changeEvent = ieVersion === 9 || !('oninput' in el) ? 'keyup' : 'input'; //如果是焦点失去再验证放开下面两行注释，然后把上面两行注释掉（注意：这是网站全局设置，请慎用！！！）\n    // var el = document.createElement('div');\n    //this._changeEvent = (ieVersion === 9 || !('onblur' in el)) ? 'keyup' : 'blur';\n    // The flag to indicate that the form is ready to submit when a remote/callback validator returns\n\n    this._submitIfValid = null; // Field elements\n\n    this._cacheFields = {};\n\n    this._init();\n  };\n\n  BootstrapValidator.prototype = {\n    constructor: BootstrapValidator,\n\n    /**\r\n     * Init form\r\n     */\n    _init: function _init() {\n      var that = this,\n          options = {\n        excluded: this.$form.attr('data-bv-excluded'),\n        trigger: this.$form.attr('data-bv-trigger'),\n        message: this.$form.attr('data-bv-message'),\n        container: this.$form.attr('data-bv-container'),\n        group: this.$form.attr('data-bv-group'),\n        submitButtons: this.$form.attr('data-bv-submitbuttons'),\n        threshold: this.$form.attr('data-bv-threshold'),\n        live: this.$form.attr('data-bv-live'),\n        onSuccess: this.$form.attr('data-bv-onsuccess'),\n        onError: this.$form.attr('data-bv-onerror'),\n        fields: {},\n        feedbackIcons: {\n          valid: this.$form.attr('data-bv-feedbackicons-valid'),\n          invalid: this.$form.attr('data-bv-feedbackicons-invalid'),\n          validating: this.$form.attr('data-bv-feedbackicons-validating')\n        }\n      };\n      this.$form // Disable client side validation in HTML 5\n      .attr('novalidate', 'novalidate').addClass(this.options.elementClass) // Disable the default submission first\n      .on('submit.bv', function (e) {\n        e.preventDefault();\n        that.validate();\n      }).on('click.bv', this.options.submitButtons, function () {\n        that.$submitButton = $(this); // The user just click the submit button\n\n        that._submitIfValid = true;\n      }) // Find all fields which have either \"name\" or \"data-bv-field\" attribute\n      .find('[name], [data-bv-field]').each(function () {\n        var $field = $(this),\n            field = $field.attr('name') || $field.attr('data-bv-field'),\n            opts = that._parseOptions($field);\n\n        if (opts) {\n          $field.attr('data-bv-field', field);\n          options.fields[field] = $.extend({}, opts, options.fields[field]);\n        }\n      });\n      this.options = $.extend(true, this.options, options);\n\n      for (var field in this.options.fields) {\n        this._initField(field);\n      }\n\n      this.$form.trigger($.Event('init.form.bv'), {\n        bv: this,\n        options: this.options\n      }); // Prepare the events\n\n      if (this.options.onSuccess) {\n        this.$form.on('success.form.bv', function (e) {\n          $.fn.bootstrapValidator.helpers.call(that.options.onSuccess, [e]);\n        });\n      }\n\n      if (this.options.onError) {\n        this.$form.on('error.form.bv', function (e) {\n          $.fn.bootstrapValidator.helpers.call(that.options.onError, [e]);\n        });\n      }\n    },\n\n    /**\r\n     * Parse the validator options from HTML attributes\r\n     *\r\n     * @param {jQuery} $field The field element\r\n     * @returns {Object}\r\n     */\n    _parseOptions: function _parseOptions($field) {\n      var field = $field.attr('name') || $field.attr('data-bv-field'),\n          validators = {},\n          validator,\n          v,\n          // Validator name\n      enabled,\n          optionName,\n          optionValue,\n          html5AttrName,\n          html5AttrMap;\n\n      for (v in $.fn.bootstrapValidator.validators) {\n        validator = $.fn.bootstrapValidator.validators[v];\n        enabled = $field.attr('data-bv-' + v.toLowerCase()) + '';\n        html5AttrMap = 'function' === typeof validator.enableByHtml5 ? validator.enableByHtml5($field) : null;\n\n        if (html5AttrMap && enabled !== 'false' || html5AttrMap !== true && ('' === enabled || 'true' === enabled)) {\n          // Try to parse the options via attributes\n          validator.html5Attributes = $.extend({}, {\n            message: 'message',\n            onerror: 'onError',\n            onsuccess: 'onSuccess'\n          }, validator.html5Attributes);\n          validators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);\n\n          for (html5AttrName in validator.html5Attributes) {\n            optionName = validator.html5Attributes[html5AttrName];\n            optionValue = $field.attr('data-bv-' + v.toLowerCase() + '-' + html5AttrName);\n\n            if (optionValue) {\n              if ('true' === optionValue) {\n                optionValue = true;\n              } else if ('false' === optionValue) {\n                optionValue = false;\n              }\n\n              validators[v][optionName] = optionValue;\n            }\n          }\n        }\n      }\n\n      var opts = {\n        excluded: $field.attr('data-bv-excluded'),\n        feedbackIcons: $field.attr('data-bv-feedbackicons'),\n        trigger: $field.attr('data-bv-trigger'),\n        message: $field.attr('data-bv-message'),\n        container: $field.attr('data-bv-container'),\n        group: $field.attr('data-bv-group'),\n        selector: $field.attr('data-bv-selector'),\n        threshold: $field.attr('data-bv-threshold'),\n        onStatus: $field.attr('data-bv-onstatus'),\n        onSuccess: $field.attr('data-bv-onsuccess'),\n        onError: $field.attr('data-bv-onerror'),\n        validators: validators\n      },\n          emptyOptions = $.isEmptyObject(opts),\n          // Check if the field options are set using HTML attributes\n      emptyValidators = $.isEmptyObject(validators); // Check if the field validators are set using HTML attributes\n\n      if (!emptyValidators || !emptyOptions && this.options.fields && this.options.fields[field]) {\n        opts.validators = validators;\n        return opts;\n      } else {\n        return null;\n      }\n    },\n\n    /**\r\n     * Init field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     */\n    _initField: function _initField(field) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          fields = this.getFieldElements(field);\n          fields.attr('data-bv-field', field);\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.options.fields[field] === null || this.options.fields[field].validators === null) {\n        return;\n      } // We don't need to validate non-existing fields\n\n\n      if (fields.length === 0) {\n        delete this.options.fields[field];\n        return;\n      }\n\n      var validatorName;\n\n      for (validatorName in this.options.fields[field].validators) {\n        if (!$.fn.bootstrapValidator.validators[validatorName]) {\n          delete this.options.fields[field].validators[validatorName];\n        }\n      }\n\n      if (this.options.fields[field].enabled === null) {\n        this.options.fields[field].enabled = true;\n      }\n\n      var that = this,\n          total = fields.length,\n          type = fields.attr('type'),\n          updateAll = total === 1 || 'radio' === type || 'checkbox' === type,\n          event = 'radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === fields.eq(0).get(0).tagName ? 'change' : this._changeEvent,\n          trigger = (this.options.fields[field].trigger || this.options.trigger || event).split(' '),\n          events = $.map(trigger, function (item) {\n        return item + '.update.bv';\n      }).join(' ');\n\n      for (var i = 0; i < total; i++) {\n        var $field = fields.eq(i),\n            group = this.options.fields[field].group || this.options.group,\n            $parent = $field.parents(group),\n            // Allow user to indicate where the error messages are shown\n        container = this.options.fields[field].container || this.options.container,\n            $message = container && container !== 'tooltip' && container !== 'popover' ? $(container) : this._getMessageContainer($field, group);\n\n        if (container && container !== 'tooltip' && container !== 'popover') {\n          $message.addClass('has-error');\n        } // Remove all error messages and feedback icons\n\n\n        $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove();\n        $parent.find('i[data-bv-icon-for=\"' + field + '\"]').remove(); // Whenever the user change the field value, mark it as not validated yet\n\n        $field.off(events).on(events, function () {\n          that.updateStatus($(this), that.STATUS_NOT_VALIDATED);\n        }); // Create help block elements for showing the error messages\n\n        $field.data('bv.messages', $message);\n\n        for (validatorName in this.options.fields[field].validators) {\n          $field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);\n\n          if (!updateAll || i === total - 1) {\n            $('<small/>').css('display', 'none').addClass('help-block').attr('data-bv-validator', validatorName).attr('data-bv-for', field).attr('data-bv-result', this.STATUS_NOT_VALIDATED).html(this._getMessage(field, validatorName)).appendTo($message);\n          } // Prepare the validator events\n\n\n          if (this.options.fields[field].validators[validatorName].onSuccess) {\n            $field.on('success.validator.bv', function (e, data) {\n              $.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onSuccess, [e, data]);\n            });\n          }\n\n          if (this.options.fields[field].validators[validatorName].onError) {\n            $field.on('error.validator.bv', function (e, data) {\n              $.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onError, [e, data]);\n            });\n          }\n        } // Prepare the feedback icons\n        // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)\n\n\n        if (this.options.fields[field].feedbackIcons !== false && this.options.fields[field].feedbackIcons !== 'false' && this.options.feedbackIcons && this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid && (!updateAll || i === total - 1)) {\n          $parent.removeClass('has-success').removeClass('has-error').addClass('has-feedback');\n          var $icon = $('<i/>').css('display', 'none').addClass('form-control-feedback').attr('data-bv-icon-for', field) // Place it after the label containing the checkbox/radio\n          // so when clicking the icon, it doesn't effect to the checkbox/radio element\n          .insertAfter('checkbox' === type || 'radio' === type ? $field.parent() : $field); // The feedback icon does not render correctly if there is no label\n          // https://github.com/twbs/bootstrap/issues/12873\n\n          if ($parent.find('label').length === 0) {\n            $icon.css('top', 0);\n          } // Fix feedback icons in input-group\n\n\n          if ($parent.find('.input-group').length !== 0) {\n            $icon.css({\n              'top': 0,\n              'z-index': 100\n            }).insertAfter($parent.find('.input-group').eq(0));\n          }\n        }\n      } // Prepare the events\n\n\n      if (this.options.fields[field].onSuccess) {\n        fields.on('success.field.bv', function (e, data) {\n          $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onSuccess, [e, data]);\n        });\n      }\n\n      if (this.options.fields[field].onError) {\n        fields.on('error.field.bv', function (e, data) {\n          $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onError, [e, data]);\n        });\n      }\n\n      if (this.options.fields[field].onStatus) {\n        fields.on('status.field.bv', function (e, data) {\n          $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onStatus, [e, data]);\n        });\n      } // Set live mode\n\n\n      events = $.map(trigger, function (item) {\n        return item + '.live.bv';\n      }).join(' ');\n\n      switch (this.options.live) {\n        case 'submitted':\n          break;\n\n        case 'disabled':\n          fields.off(events);\n          break;\n\n        case 'enabled':\n        /* falls through */\n\n        default:\n          fields.off(events).on(events, function () {\n            if (that._exceedThreshold($(this))) {\n              that.validateField($(this));\n            }\n          });\n          break;\n      }\n\n      fields.trigger($.Event('init.field.bv'), {\n        bv: this,\n        field: field,\n        element: fields\n      });\n    },\n\n    /**\r\n     * Get the error message for given field and validator\r\n     *\r\n     * @param {String} field The field name\r\n     * @param {String} validatorName The validator name\r\n     * @returns {String}\r\n     */\n    _getMessage: function _getMessage(field, validatorName) {\n      if (!this.options.fields[field] || !$.fn.bootstrapValidator.validators[validatorName] || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName]) {\n        return '';\n      }\n\n      var options = this.options.fields[field].validators[validatorName];\n\n      switch (true) {\n        case !!options.message:\n          return options.message;\n\n        case !!this.options.fields[field].message:\n          return this.options.fields[field].message;\n\n        case !!$.fn.bootstrapValidator.i18n[validatorName]:\n          return $.fn.bootstrapValidator.i18n[validatorName]['default'];\n\n        default:\n          return this.options.message;\n      }\n    },\n\n    /**\r\n     * Get the element to place the error messages\r\n     *\r\n     * @param {jQuery} $field The field element\r\n     * @param {String} group\r\n     * @returns {jQuery}\r\n     */\n    _getMessageContainer: function _getMessageContainer($field, group) {\n      var $parent = $field.parent();\n\n      if ($parent.is(group)) {\n        return $parent;\n      }\n\n      var cssClasses = $parent.attr('class');\n\n      if (!cssClasses) {\n        return this._getMessageContainer($parent, group);\n      }\n\n      cssClasses = cssClasses.split(' ');\n      var n = cssClasses.length;\n\n      for (var i = 0; i < n; i++) {\n        if (/^col-(xs|sm|md|lg)-\\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\\d+$/.test(cssClasses[i])) {\n          return $parent;\n        }\n      }\n\n      return this._getMessageContainer($parent, group);\n    },\n\n    /**\r\n     * Called when all validations are completed\r\n     */\n    _submit: function _submit() {\n      var isValid = this.isValid(),\n          eventType = isValid ? 'success.form.bv' : 'error.form.bv',\n          e = $.Event(eventType);\n      this.$form.trigger(e); // Call default handler\n      // Check if whether the submit button is clicked\n\n      if (this.$submitButton) {\n        isValid ? this._onSuccess(e) : this._onError(e);\n      }\n    },\n\n    /**\r\n     * Check if the field is excluded.\r\n     * Returning true means that the field will not be validated\r\n     *\r\n     * @param {jQuery} $field The field element\r\n     * @returns {Boolean}\r\n     */\n    _isExcluded: function _isExcluded($field) {\n      var excludedAttr = $field.attr('data-bv-excluded'),\n          // I still need to check the 'name' attribute while initializing the field\n      field = $field.attr('data-bv-field') || $field.attr('name');\n\n      switch (true) {\n        case !!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true):\n        case excludedAttr === 'true':\n        case excludedAttr === '':\n          return true;\n\n        case !!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false):\n        case excludedAttr === 'false':\n          return false;\n\n        default:\n          if (this.options.excluded) {\n            // Convert to array first\n            if ('string' === typeof this.options.excluded) {\n              this.options.excluded = $.map(this.options.excluded.split(','), function (item) {\n                // Trim the spaces\n                return $.trim(item);\n              });\n            }\n\n            var length = this.options.excluded.length;\n\n            for (var i = 0; i < length; i++) {\n              if ('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]) || 'function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true) {\n                return true;\n              }\n            }\n          }\n\n          return false;\n      }\n    },\n\n    /**\r\n     * Check if the number of characters of field value exceed the threshold or not\r\n     *\r\n     * @param {jQuery} $field The field element\r\n     * @returns {Boolean}\r\n     */\n    _exceedThreshold: function _exceedThreshold($field) {\n      var field = $field.attr('data-bv-field'),\n          threshold = this.options.fields[field].threshold || this.options.threshold;\n\n      if (!threshold) {\n        return true;\n      }\n\n      var cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\n      return cannotType || $field.val().length >= threshold;\n    },\n    // ---\n    // Events\n    // ---\n\n    /**\r\n     * The default handler of error.form.bv event.\r\n     * It will be called when there is a invalid field\r\n     *\r\n     * @param {jQuery.Event} e The jQuery event object\r\n     */\n    _onError: function _onError(e) {\n      if (e.isDefaultPrevented()) {\n        return;\n      }\n\n      if ('submitted' === this.options.live) {\n        // Enable live mode\n        this.options.live = 'enabled';\n        var that = this;\n\n        for (var field in this.options.fields) {\n          (function (f) {\n            var fields = that.getFieldElements(f);\n\n            if (fields.length) {\n              var type = $(fields[0]).attr('type'),\n                  event = 'radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $(fields[0]).get(0).tagName ? 'change' : that._changeEvent,\n                  trigger = that.options.fields[field].trigger || that.options.trigger || event,\n                  events = $.map(trigger.split(' '), function (item) {\n                return item + '.live.bv';\n              }).join(' ');\n              fields.off(events).on(events, function () {\n                if (that._exceedThreshold($(this))) {\n                  that.validateField($(this));\n                }\n              });\n            }\n          })(field);\n        }\n      }\n\n      var $invalidField = this.$invalidFields.eq(0);\n\n      if ($invalidField) {\n        // Activate the tab containing the invalid field if exists\n        var $tabPane = $invalidField.parents('.tab-pane'),\n            tabId;\n\n        if ($tabPane && (tabId = $tabPane.attr('id'))) {\n          $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').tab('show');\n        } // Focus to the first invalid field\n\n\n        $invalidField.focus();\n      }\n    },\n\n    /**\r\n     * The default handler of success.form.bv event.\r\n     * It will be called when all the fields are valid\r\n     *\r\n     * @param {jQuery.Event} e The jQuery event object\r\n     */\n    _onSuccess: function _onSuccess(e) {\n      if (e.isDefaultPrevented()) {\n        return;\n      } // Submit the form\n\n\n      this.disableSubmitButtons(true).defaultSubmit();\n    },\n\n    /**\r\n     * Called after validating a field element\r\n     *\r\n     * @param {jQuery} $field The field element\r\n     * @param {String} [validatorName] The validator name\r\n     */\n    _onFieldValidated: function _onFieldValidated($field, validatorName) {\n      var field = $field.attr('data-bv-field'),\n          validators = this.options.fields[field].validators,\n          counter = {},\n          numValidators = 0,\n          data = {\n        bv: this,\n        field: field,\n        element: $field,\n        validator: validatorName\n      }; // Trigger an event after given validator completes\n\n      if (validatorName) {\n        switch ($field.data('bv.result.' + validatorName)) {\n          case this.STATUS_INVALID:\n            $field.trigger($.Event('error.validator.bv'), data);\n            break;\n\n          case this.STATUS_VALID:\n            $field.trigger($.Event('success.validator.bv'), data);\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      counter[this.STATUS_NOT_VALIDATED] = 0;\n      counter[this.STATUS_VALIDATING] = 0;\n      counter[this.STATUS_INVALID] = 0;\n      counter[this.STATUS_VALID] = 0;\n\n      for (var v in validators) {\n        if (validators[v].enabled === false) {\n          continue;\n        }\n\n        numValidators++;\n        var result = $field.data('bv.result.' + v);\n\n        if (result) {\n          counter[result]++;\n        }\n      }\n\n      if (counter[this.STATUS_VALID] === numValidators) {\n        // Remove from the list of invalid fields\n        this.$invalidFields = this.$invalidFields.not($field);\n        $field.trigger($.Event('success.field.bv'), data);\n      } // If all validators are completed and there is at least one validator which doesn't pass\n      else if (counter[this.STATUS_NOT_VALIDATED] === 0 && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\n          // Add to the list of invalid fields\n          this.$invalidFields = this.$invalidFields.add($field);\n          $field.trigger($.Event('error.field.bv'), data);\n        }\n    },\n    // ---\n    // Public methods\n    // ---\n\n    /**\r\n     * Retrieve the field elements by given name\r\n     *\r\n     * @param {String} field The field name\r\n     * @returns {null|jQuery[]}\r\n     */\n    getFieldElements: function getFieldElements(field) {\n      if (!this._cacheFields[field]) {\n        this._cacheFields[field] = this.options.fields[field] && this.options.fields[field].selector ? $(this.options.fields[field].selector) : this.$form.find('[name=\"' + field + '\"]');\n      }\n\n      return this._cacheFields[field];\n    },\n\n    /**\r\n     * Disable/enable submit buttons\r\n     *\r\n     * @param {Boolean} disabled Can be true or false\r\n     * @returns {BootstrapValidator}\r\n     */\n    disableSubmitButtons: function disableSubmitButtons(disabled) {\n      if (!disabled) {\n        this.$form.find(this.options.submitButtons).removeAttr('disabled');\n      } else if (this.options.live !== 'disabled') {\n        // Don't disable if the live validating mode is disabled\n        this.$form.find(this.options.submitButtons).attr('disabled', 'disabled');\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Validate the form\r\n     *\r\n     * @returns {BootstrapValidator}\r\n     */\n    validate: function validate() {\n      if (!this.options.fields) {\n        return this;\n      }\n\n      this.disableSubmitButtons(true);\n\n      for (var field in this.options.fields) {\n        this.validateField(field);\n      }\n\n      this._submit();\n\n      return this;\n    },\n\n    /**\r\n     * Validate given field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @returns {BootstrapValidator}\r\n     */\n    validateField: function validateField(field) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.options.fields[field] && this.options.fields[field].enabled === false) {\n        return this;\n      }\n\n      var that = this,\n          type = fields.attr('type'),\n          total = 'radio' === type || 'checkbox' === type ? 1 : fields.length,\n          updateAll = 'radio' === type || 'checkbox' === type,\n          validators = this.options.fields[field].validators,\n          validatorName,\n          validateResult;\n\n      for (var i = 0; i < total; i++) {\n        var $field = fields.eq(i);\n\n        if (this._isExcluded($field)) {\n          continue;\n        }\n\n        for (validatorName in validators) {\n          if ($field.data('bv.dfs.' + validatorName)) {\n            $field.data('bv.dfs.' + validatorName).reject();\n          } // Don't validate field if it is already done\n\n\n          var result = $field.data('bv.result.' + validatorName);\n\n          if (result === this.STATUS_VALID || result === this.STATUS_INVALID || validators[validatorName].enabled === false) {\n            this._onFieldValidated($field, validatorName);\n\n            continue;\n          }\n\n          $field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);\n          validateResult = $.fn.bootstrapValidator.validators[validatorName].validate(this, $field, validators[validatorName]); // validateResult can be a $.Deferred object ...\n\n          if ('object' === _typeof(validateResult) && validateResult.resolve) {\n            this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\n            $field.data('bv.dfs.' + validatorName, validateResult);\n            validateResult.done(function ($f, v, isValid, message) {\n              // v is validator name\n              $f.removeData('bv.dfs.' + v);\n\n              if (message) {\n                that.updateMessage($f, v, message);\n              }\n\n              that.updateStatus(updateAll ? $f.attr('data-bv-field') : $f, isValid ? that.STATUS_VALID : that.STATUS_INVALID, v);\n\n              if (isValid && that._submitIfValid === true) {\n                // If a remote validator returns true and the form is ready to submit, then do it\n                that._submit();\n              }\n            });\n          } // ... or object { valid: true/false, message: 'dynamic message' }\n          else if ('object' === _typeof(validateResult) && validateResult.valid !== undefined && validateResult.message !== undefined) {\n              this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\n              this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\n            } // ... or a boolean value\n            else if ('boolean' === typeof validateResult) {\n                this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\n              }\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Update the error message\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @param {String} validator The validator name\r\n     * @param {String} message The message\r\n     * @returns {BootstrapValidator}\r\n     */\n    updateMessage: function updateMessage(field, validator, message) {\n      var $fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          $fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          $fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      $fields.each(function () {\n        $(this).data('bv.messages').find('.help-block[data-bv-validator=\"' + validator + '\"][data-bv-for=\"' + field + '\"]').html(message);\n      });\n    },\n\n    /**\r\n     * Update all validating results of field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\r\n     * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators\r\n     * @returns {BootstrapValidator}\r\n     */\n    updateStatus: function updateStatus(field, status, validatorName) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      if (status === this.STATUS_NOT_VALIDATED) {\n        // Reset the flag\n        this._submitIfValid = false;\n      }\n\n      var that = this,\n          type = fields.attr('type'),\n          group = this.options.fields[field].group || this.options.group,\n          total = 'radio' === type || 'checkbox' === type ? 1 : fields.length;\n\n      for (var i = 0; i < total; i++) {\n        var $field = fields.eq(i);\n\n        if (this._isExcluded($field)) {\n          continue;\n        }\n\n        var $parent = $field.parents(group),\n            $message = $field.data('bv.messages'),\n            $allErrors = $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]'),\n            $errors = validatorName ? $allErrors.filter('[data-bv-validator=\"' + validatorName + '\"]') : $allErrors,\n            $icon = $parent.find('.form-control-feedback[data-bv-icon-for=\"' + field + '\"]'),\n            container = this.options.fields[field].container || this.options.container,\n            isValidField = null; // Update status\n\n        if (validatorName) {\n          $field.data('bv.result.' + validatorName, status);\n        } else {\n          for (var v in this.options.fields[field].validators) {\n            $field.data('bv.result.' + v, status);\n          }\n        } // Show/hide error elements and feedback icons\n\n\n        $errors.attr('data-bv-result', status); // Determine the tab containing the element\n\n        var $tabPane = $field.parents('.tab-pane'),\n            tabId,\n            $tab;\n\n        if ($tabPane && (tabId = $tabPane.attr('id'))) {\n          $tab = $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').parent();\n        }\n\n        switch (status) {\n          case this.STATUS_VALIDATING:\n            isValidField = null;\n            this.disableSubmitButtons(true);\n            $parent.removeClass('has-success').removeClass('has-error');\n\n            if ($icon) {\n              $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();\n            }\n\n            if ($tab) {\n              $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\n            }\n\n            break;\n\n          case this.STATUS_INVALID:\n            isValidField = false;\n            this.disableSubmitButtons(true);\n            $parent.removeClass('has-success').addClass('has-error');\n\n            if ($icon) {\n              $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();\n            }\n\n            if ($tab) {\n              $tab.removeClass('bv-tab-success').addClass('bv-tab-error');\n            }\n\n            break;\n\n          case this.STATUS_VALID:\n            // If the field is valid (passes all validators)\n            isValidField = $allErrors.filter('[data-bv-result=\"' + this.STATUS_NOT_VALIDATED + '\"]').length === 0 ? $allErrors.filter('[data-bv-result=\"' + this.STATUS_VALID + '\"]').length === $allErrors.length : // All validators are completed\n            null; // There are some validators that have not done\n\n            if (isValidField !== null) {\n              this.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\n\n              if ($icon) {\n                $icon.removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid).addClass(isValidField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid).show();\n              }\n            }\n\n            $parent.removeClass('has-error has-success').addClass(this.isValidContainer($parent) ? 'has-success' : 'has-error');\n\n            if ($tab) {\n              $tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(this.isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');\n            }\n\n            break;\n\n          case this.STATUS_NOT_VALIDATED:\n          /* falls through */\n\n          default:\n            isValidField = null;\n            this.disableSubmitButtons(false);\n            $parent.removeClass('has-success').removeClass('has-error');\n\n            if ($icon) {\n              $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();\n            }\n\n            if ($tab) {\n              $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\n            }\n\n            break;\n        }\n\n        switch (true) {\n          // Only show the first error message if it is placed inside a tooltip ...\n          case $icon && 'tooltip' === container:\n            isValidField === false ? $icon.css('cursor', 'pointer').tooltip('destroy').tooltip({\n              html: true,\n              placement: 'top',\n              title: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html()\n            }) : $icon.css('cursor', '').tooltip('destroy');\n            break;\n          // ... or popover\n\n          case $icon && 'popover' === container:\n            isValidField === false ? $icon.css('cursor', 'pointer').popover('destroy').popover({\n              content: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(),\n              html: true,\n              placement: 'top',\n              trigger: 'hover click'\n            }) : $icon.css('cursor', '').popover('destroy');\n            break;\n\n          default:\n            status === this.STATUS_INVALID ? $errors.show() : $errors.hide();\n            break;\n        } // Trigger an event\n\n\n        $field.trigger($.Event('status.field.bv'), {\n          bv: this,\n          field: field,\n          element: $field,\n          status: status\n        });\n\n        this._onFieldValidated($field, validatorName);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Check the form validity\r\n     *\r\n     * @returns {Boolean}\r\n     */\n    isValid: function isValid() {\n      for (var field in this.options.fields) {\n        if (!this.isValidField(field)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Check if the field is valid or not\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @returns {Boolean}\r\n     */\n    isValidField: function isValidField(field) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      if (fields.length === 0 || this.options.fields[field] === null || this.options.fields[field].enabled === false) {\n        return true;\n      }\n\n      var type = fields.attr('type'),\n          total = 'radio' === type || 'checkbox' === type ? 1 : fields.length,\n          $field,\n          validatorName,\n          status;\n\n      for (var i = 0; i < total; i++) {\n        $field = fields.eq(i);\n\n        if (this._isExcluded($field)) {\n          continue;\n        }\n\n        for (validatorName in this.options.fields[field].validators) {\n          if (this.options.fields[field].validators[validatorName].enabled === false) {\n            continue;\n          }\n\n          status = $field.data('bv.result.' + validatorName);\n\n          if (status !== this.STATUS_VALID) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Check if all fields inside a given container are valid.\r\n     * It's useful when working with a wizard-like such as tab, collapse\r\n     *\r\n     * @param {String|jQuery} container The container selector or element\r\n     * @returns {Boolean}\r\n     */\n    isValidContainer: function isValidContainer(container) {\n      var that = this,\n          map = {},\n          $container = 'string' === typeof container ? $(container) : container;\n\n      if ($container.length === 0) {\n        return true;\n      }\n\n      $container.find('[data-bv-field]').each(function () {\n        var $field = $(this),\n            field = $field.attr('data-bv-field');\n\n        if (!that._isExcluded($field) && !map[field]) {\n          map[field] = $field;\n        }\n      });\n\n      for (var field in map) {\n        var $f = map[field];\n\n        if ($f.data('bv.messages').find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').filter(function () {\n          var v = $(this).attr('data-bv-validator'),\n              f = $(this).attr('data-bv-for');\n          return that.options.fields[f].validators[v].enabled !== false && $f.data('bv.result.' + v) && $f.data('bv.result.' + v) !== that.STATUS_VALID;\n        }).length !== 0) {\n          // The field is not valid\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Submit the form using default submission.\r\n     * It also does not perform any validations when submitting the form\r\n     */\n    defaultSubmit: function defaultSubmit() {\n      if (this.$submitButton) {\n        // Create hidden input to send the submit buttons\n        $('<input/>').attr('type', 'hidden').attr('data-bv-submit-hidden', '').attr('name', this.$submitButton.attr('name')).val(this.$submitButton.val()).appendTo(this.$form);\n      } // Submit form\n\n\n      this.$form.off('submit.bv').submit();\n    },\n    // ---\n    // Useful APIs which aren't used internally\n    // ---\n\n    /**\r\n     * Get the list of invalid fields\r\n     *\r\n     * @returns {jQuery[]}\r\n     */\n    getInvalidFields: function getInvalidFields() {\n      return this.$invalidFields;\n    },\n\n    /**\r\n     * Returns the clicked submit button\r\n     *\r\n     * @returns {jQuery}\r\n     */\n    getSubmitButton: function getSubmitButton() {\n      return this.$submitButton;\n    },\n\n    /**\r\n     * Get the error messages\r\n     *\r\n     * @param {String|jQuery} [field] The field name or field element\r\n     * If the field is not defined, the method returns all error messages of all fields\r\n     * @param {String} [validator] The name of validator\r\n     * If the validator is not defined, the method returns error messages of all validators\r\n     * @returns {String[]}\r\n     */\n    getMessages: function getMessages(field, validator) {\n      var that = this,\n          messages = [],\n          $fields = $([]);\n\n      switch (true) {\n        case field && 'object' === _typeof(field):\n          $fields = field;\n          break;\n\n        case field && 'string' === typeof field:\n          var f = this.getFieldElements(field);\n\n          if (f.length > 0) {\n            var type = f.attr('type');\n            $fields = 'radio' === type || 'checkbox' === type ? f.eq(0) : f;\n          }\n\n          break;\n\n        default:\n          $fields = this.$invalidFields;\n          break;\n      }\n\n      var filter = validator ? '[data-bv-validator=\"' + validator + '\"]' : '';\n      $fields.each(function () {\n        messages = messages.concat($(this).data('bv.messages').find('.help-block[data-bv-for=\"' + $(this).attr('data-bv-field') + '\"][data-bv-result=\"' + that.STATUS_INVALID + '\"]' + filter).map(function () {\n          var v = $(this).attr('data-bv-validator'),\n              f = $(this).attr('data-bv-for');\n          return that.options.fields[f].validators[v].enabled === false ? '' : $(this).html();\n        }).get());\n      });\n      return messages;\n    },\n\n    /**\r\n     * Get the field options\r\n     *\r\n     * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options\r\n     * @param {String} [validator] The name of validator. It null, the method returns form options\r\n     * @param {String} [option] The option name\r\n     * @return {String|Object}\r\n     */\n    getOptions: function getOptions(field, validator, option) {\n      if (!field) {\n        return this.options;\n      }\n\n      if ('object' === _typeof(field)) {\n        field = field.attr('data-bv-field');\n      }\n\n      if (!this.options.fields[field]) {\n        return null;\n      }\n\n      var options = this.options.fields[field];\n\n      if (!validator) {\n        return options;\n      }\n\n      if (!options.validators || !options.validators[validator]) {\n        return null;\n      }\n\n      return option ? options.validators[validator][option] : options.validators[validator];\n    },\n\n    /**\r\n     * Update the option of a specific validator\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @param {String} validator The validator name\r\n     * @param {String} option The option name\r\n     * @param {String} value The value to set\r\n     * @returns {BootstrapValidator}\r\n     */\n    updateOption: function updateOption(field, validator, option, value) {\n      if ('object' === _typeof(field)) {\n        field = field.attr('data-bv-field');\n      }\n\n      if (this.options.fields[field] && this.options.fields[field].validators[validator]) {\n        this.options.fields[field].validators[validator][option] = value;\n        this.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Add a new field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @param {Object} [options] The validator rules\r\n     * @returns {BootstrapValidator}\r\n     */\n    addField: function addField(field, options) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field') || field.attr('name');\n          break;\n\n        case 'string':\n          delete this._cacheFields[field];\n          fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      fields.attr('data-bv-field', field);\n      var type = fields.attr('type'),\n          total = 'radio' === type || 'checkbox' === type ? 1 : fields.length;\n\n      for (var i = 0; i < total; i++) {\n        var $field = fields.eq(i); // Try to parse the options from HTML attributes\n\n        var opts = this._parseOptions($field);\n\n        opts = opts === null ? options : $.extend(true, options, opts);\n        this.options.fields[field] = $.extend(true, this.options.fields[field], opts); // Update the cache\n\n        this._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field; // Init the element\n\n        this._initField('checkbox' === type || 'radio' === type ? field : $field);\n      }\n\n      this.disableSubmitButtons(false); // Trigger an event\n\n      this.$form.trigger($.Event('added.field.bv'), {\n        field: field,\n        element: fields,\n        options: this.options.fields[field]\n      });\n      return this;\n    },\n\n    /**\r\n     * Remove a given field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @returns {BootstrapValidator}\r\n     */\n    removeField: function removeField(field) {\n      var fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          fields = field;\n          field = field.attr('data-bv-field') || field.attr('name');\n          fields.attr('data-bv-field', field);\n          break;\n\n        case 'string':\n          fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      if (fields.length === 0) {\n        return this;\n      }\n\n      var type = fields.attr('type'),\n          total = 'radio' === type || 'checkbox' === type ? 1 : fields.length;\n\n      for (var i = 0; i < total; i++) {\n        var $field = fields.eq(i); // Remove from the list of invalid fields\n\n        this.$invalidFields = this.$invalidFields.not($field); // Update the cache\n\n        this._cacheFields[field] = this._cacheFields[field].not($field);\n      }\n\n      if (!this._cacheFields[field] || this._cacheFields[field].length === 0) {\n        delete this.options.fields[field];\n      }\n\n      if ('checkbox' === type || 'radio' === type) {\n        this._initField(field);\n      }\n\n      this.disableSubmitButtons(false); // Trigger an event\n\n      this.$form.trigger($.Event('removed.field.bv'), {\n        field: field,\n        element: fields\n      });\n      return this;\n    },\n\n    /**\r\n     * Reset given field\r\n     *\r\n     * @param {String|jQuery} field The field name or field element\r\n     * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n     * @returns {BootstrapValidator}\r\n     */\n    resetField: function resetField(field, resetValue) {\n      var $fields = $([]);\n\n      switch (_typeof(field)) {\n        case 'object':\n          $fields = field;\n          field = field.attr('data-bv-field');\n          break;\n\n        case 'string':\n          $fields = this.getFieldElements(field);\n          break;\n\n        default:\n          break;\n      }\n\n      var total = $fields.length;\n\n      if (this.options.fields[field]) {\n        for (var i = 0; i < total; i++) {\n          for (var validator in this.options.fields[field].validators) {\n            $fields.eq(i).removeData('bv.dfs.' + validator);\n          }\n        }\n      } // Mark field as not validated yet\n\n\n      this.updateStatus(field, this.STATUS_NOT_VALIDATED);\n\n      if (resetValue) {\n        var type = $fields.attr('type');\n        'radio' === type || 'checkbox' === type ? $fields.removeAttr('checked').removeAttr('selected') : $fields.val('');\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Reset the form\r\n     *\r\n     * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n     * @returns {BootstrapValidator}\r\n     */\n    resetForm: function resetForm(resetValue) {\n      for (var field in this.options.fields) {\n        this.resetField(field, resetValue);\n      }\n\n      this.$invalidFields = $([]);\n      this.$submitButton = null; // Enable submit buttons\n\n      this.disableSubmitButtons(false);\n      return this;\n    },\n\n    /**\r\n     * Revalidate given field\r\n     * It's used when you need to revalidate the field which its value is updated by other plugin\r\n     *\r\n     * @param {String|jQuery} field The field name of field element\r\n     * @returns {BootstrapValidator}\r\n     */\n    revalidateField: function revalidateField(field) {\n      this.updateStatus(field, this.STATUS_NOT_VALIDATED).validateField(field);\n      return this;\n    },\n\n    /**\r\n     * Enable/Disable all validators to given field\r\n     *\r\n     * @param {String} field The field name\r\n     * @param {Boolean} enabled Enable/Disable field validators\r\n     * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled\r\n     * @returns {BootstrapValidator}\r\n     */\n    enableFieldValidators: function enableFieldValidators(field, enabled, validatorName) {\n      var validators = this.options.fields[field].validators; // Enable/disable particular validator\n\n      if (validatorName && validators && validators[validatorName] && validators[validatorName].enabled !== enabled) {\n        this.options.fields[field].validators[validatorName].enabled = enabled;\n        this.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);\n      } // Enable/disable all validators\n      else if (!validatorName && this.options.fields[field].enabled !== enabled) {\n          this.options.fields[field].enabled = enabled;\n\n          for (var v in validators) {\n            this.enableFieldValidators(field, enabled, v);\n          }\n        }\n\n      return this;\n    },\n\n    /**\r\n     * Some validators have option which its value is dynamic.\r\n     * For example, the zipCode validator has the country option which might be changed dynamically by a select element.\r\n     *\r\n     * @param {jQuery|String} field The field name or element\r\n     * @param {String|Function} option The option which can be determined by:\r\n     * - a string\r\n     * - name of field which defines the value\r\n     * - name of function which returns the value\r\n     * - a function returns the value\r\n     *\r\n     * The callback function has the format of\r\n     *      callback: function(value, validator, $field) {\r\n     *          // value is the value of field\r\n     *          // validator is the BootstrapValidator instance\r\n     *          // $field is the field element\r\n     *      }\r\n     *\r\n     * @returns {String}\r\n     */\n    getDynamicOption: function getDynamicOption(field, option) {\n      var $field = 'string' === typeof field ? this.getFieldElements(field) : field,\n          value = $field.val(); // Option can be determined by\n      // ... a function\n\n      if ('function' === typeof option) {\n        return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\n      } // ... value of other field\n      else if ('string' === typeof option) {\n          var $f = this.getFieldElements(option);\n\n          if ($f.length) {\n            return $f.val();\n          } // ... return value of callback\n          else {\n              return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\n            }\n        }\n\n      return null;\n    },\n\n    /**\r\n     * Destroy the plugin\r\n     * It will remove all error messages, feedback icons and turn off the events\r\n     */\n    destroy: function destroy() {\n      var field, fields, $field, validator, $icon, container, group;\n\n      for (field in this.options.fields) {\n        fields = this.getFieldElements(field);\n        container = this.options.fields[field].container || this.options.container, group = this.options.fields[field].group || this.options.group;\n\n        for (var i = 0; i < fields.length; i++) {\n          $field = fields.eq(i);\n          $field // Remove all error messages\n          .data('bv.messages').find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove().end().end().removeData('bv.messages') // Remove feedback classes\n          .parents(group).removeClass('has-feedback has-error has-success').end() // Turn off events\n          .off('.bv').removeAttr('data-bv-field'); // Remove feedback icons, tooltip/popover container\n\n          $icon = $field.parents(group).find('i[data-bv-icon-for=\"' + field + '\"]');\n\n          if ($icon) {\n            switch (container) {\n              case 'tooltip':\n                $icon.tooltip('destroy').remove();\n                break;\n\n              case 'popover':\n                $icon.popover('destroy').remove();\n                break;\n\n              default:\n                $icon.remove();\n                break;\n            }\n          }\n\n          for (validator in this.options.fields[field].validators) {\n            if ($field.data('bv.dfs.' + validator)) {\n              $field.data('bv.dfs.' + validator).reject();\n            }\n\n            $field.removeData('bv.result.' + validator).removeData('bv.dfs.' + validator);\n          }\n        }\n      } // Enable submit buttons\n\n\n      this.disableSubmitButtons(false);\n      this.$form.removeClass(this.options.elementClass).off('.bv').removeData('bootstrapValidator') // Remove generated hidden elements\n      .find('[data-bv-submit-hidden]').remove();\n    }\n  }; // Plugin definition\n\n  $.fn.bootstrapValidator = function (option) {\n    var params = arguments;\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('bootstrapValidator'),\n          options = 'object' === _typeof(option) && option;\n\n      if (!data) {\n        data = new BootstrapValidator(this, options);\n        $this.data('bootstrapValidator', data);\n      } // Allow to call plugin method\n\n\n      if ('string' === typeof option) {\n        data[option].apply(data, Array.prototype.slice.call(params, 1));\n      }\n    });\n  }; // The default options\n\n\n  $.fn.bootstrapValidator.DEFAULT_OPTIONS = {\n    // The form CSS class\n    elementClass: 'bv-form',\n    // Default invalid message\n    message: 'This value is not valid',\n    // The CSS selector for indicating the element consists the field\n    // By default, each field is placed inside the <div class=\"form-group\"></div>\n    // You should adjust this option if your form group consists of many fields which not all of them need to be validated\n    group: '.form-group',\n    //The error messages container. It can be:\n    // - 'tooltip' if you want to use Bootstrap tooltip to show error messages\n    // - 'popover' if you want to use Bootstrap popover to show error messages\n    // - a CSS selector indicating the container\n    // In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message\n    // You also can define the message container for particular field\n    container: null,\n    // The field will not be live validated if its length is less than this number of characters\n    threshold: null,\n    // Indicate fields which won't be validated\n    // By default, the plugin will not validate the following kind of fields:\n    // - disabled\n    // - hidden\n    // - invisible\n    //\n    // The setting consists of jQuery filters. Accept 3 formats:\n    // - A string. Use a comma to separate filter\n    // - An array. Each element is a filter\n    // - An array. Each element can be a callback function\n    //      function($field, validator) {\n    //          $field is jQuery object representing the field element\n    //          validator is the BootstrapValidator instance\n    //          return true or false;\n    //      }\n    //\n    // The 3 following settings are equivalent:\n    //\n    // 1) ':disabled, :hidden, :not(:visible)'\n    // 2) [':disabled', ':hidden', ':not(:visible)']\n    // 3) [':disabled', ':hidden', function($field) {\n    //        return !$field.is(':visible');\n    //    }]\n    excluded: [':disabled', ':hidden', ':not(:visible)'],\n    // Shows ok/error/loading icons based on the field validity.\n    // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).\n    // Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.\n    // In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.\n    //\n    // Examples:\n    // - Use Glyphicons icons:\n    //  feedbackIcons: {\n    //      valid: 'glyphicon glyphicon-ok',\n    //      invalid: 'glyphicon glyphicon-remove',\n    //      validating: 'glyphicon glyphicon-refresh'\n    //  }\n    // - Use FontAwesome icons:\n    //  feedbackIcons: {\n    //      valid: 'fa fa-check',\n    //      invalid: 'fa fa-times',\n    //      validating: 'fa fa-refresh'\n    //  }\n    feedbackIcons: {\n      valid: null,\n      invalid: null,\n      validating: null\n    },\n    // The submit buttons selector\n    // These buttons will be disabled to prevent the valid form from multiple submissions\n    submitButtons: '[type=\"submit\"]',\n    // Live validating option\n    // Can be one of 3 values:\n    // - enabled: The plugin validates fields as soon as they are changed\n    // - disabled: Disable the live validating. The error messages are only shown after the form is submitted\n    // - submitted: The live validating is enabled after the form is submitted\n    live: 'enabled',\n    // Map the field name with validator rules\n    fields: null\n  }; // Available validators\n\n  $.fn.bootstrapValidator.validators = {}; // i18n\n\n  $.fn.bootstrapValidator.i18n = {};\n  $.fn.bootstrapValidator.Constructor = BootstrapValidator; // Helper methods, which can be used in validator class\n\n  $.fn.bootstrapValidator.helpers = {\n    /**\r\n     * Execute a callback function\r\n     *\r\n     * @param {String|Function} functionName Can be\r\n     * - name of global function\r\n     * - name of namespace function (such as A.B.C)\r\n     * - a function\r\n     * @param {Array} args The callback arguments\r\n     */\n    call: function call(functionName, args) {\n      if ('function' === typeof functionName) {\n        return functionName.apply(this, args);\n      } else if ('string' === typeof functionName) {\n        if ('()' === functionName.substring(functionName.length - 2)) {\n          functionName = functionName.substring(0, functionName.length - 2);\n        }\n\n        var ns = functionName.split('.'),\n            func = ns.pop(),\n            context = window;\n\n        for (var i = 0; i < ns.length; i++) {\n          context = context[ns[i]];\n        }\n\n        return context[func].apply(this, args);\n      }\n    },\n\n    /**\r\n     * Format a string\r\n     * It's used to format the error message\r\n     * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\r\n     *\r\n     * @param {String} message\r\n     * @param {Array} parameters\r\n     * @returns {String}\r\n     */\n    format: function format(message, parameters) {\n      if (!$.isArray(parameters)) {\n        parameters = [parameters];\n      }\n\n      for (var i in parameters) {\n        message = message.replace('%s', parameters[i]);\n      }\n\n      return message;\n    },\n\n    /**\r\n     * Validate a date\r\n     *\r\n     * @param {Number} year The full year in 4 digits\r\n     * @param {Number} month The month number\r\n     * @param {Number} day The day number\r\n     * @param {Boolean} [notInFuture] If true, the date must not be in the future\r\n     * @returns {Boolean}\r\n     */\n    date: function date(year, month, day, notInFuture) {\n      if (isNaN(year) || isNaN(month) || isNaN(day)) {\n        return false;\n      }\n\n      day = parseInt(day, 10);\n      month = parseInt(month, 10);\n      year = parseInt(year, 10);\n\n      if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\n        return false;\n      }\n\n      var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Update the number of days in Feb of leap year\n\n      if (year % 400 === 0 || year % 100 !== 0 && year % 4 === 0) {\n        numDays[1] = 29;\n      } // Check the day\n\n\n      if (day <= 0 || day > numDays[month - 1]) {\n        return false;\n      }\n\n      if (notInFuture === true) {\n        var currentDate = new Date(),\n            currentYear = currentDate.getFullYear(),\n            currentMonth = currentDate.getMonth(),\n            currentDay = currentDate.getDate();\n        return year < currentYear || year === currentYear && month - 1 < currentMonth || year === currentYear && month - 1 === currentMonth && day < currentDay;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Implement Luhn validation algorithm\r\n     * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Luhn\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\n    luhn: function luhn(value) {\n      var length = value.length,\n          mul = 0,\n          prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n          sum = 0;\n\n      while (length--) {\n        sum += prodArr[mul][parseInt(value.charAt(length), 10)];\n        mul ^= 1;\n      }\n\n      return sum % 10 === 0 && sum > 0;\n    },\n\n    /**\r\n     * Implement modulus 11, 10 (ISO 7064) algorithm\r\n     *\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\n    mod11And10: function mod11And10(value) {\n      var check = 5,\n          length = value.length;\n\n      for (var i = 0; i < length; i++) {\n        check = ((check || 10) * 2 % 11 + parseInt(value.charAt(i), 10)) % 10;\n      }\n\n      return check === 1;\n    },\n\n    /**\r\n     * Implements Mod 37, 36 (ISO 7064) algorithm\r\n     * Usages:\r\n     * mod37And36('A12425GABC1234002M')\r\n     * mod37And36('002006673085', '0123456789')\r\n     *\r\n     * @param {String} value\r\n     * @param {String} [alphabet]\r\n     * @returns {Boolean}\r\n     */\n    mod37And36: function mod37And36(value, alphabet) {\n      alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      var modulus = alphabet.length,\n          length = value.length,\n          check = Math.floor(modulus / 2);\n\n      for (var i = 0; i < length; i++) {\n        check = ((check || modulus) * 2 % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\n      }\n\n      return check === 1;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.base64 = $.extend($.fn.bootstrapValidator.i18n.base64 || {}, {\n    'default': 'Please enter a valid base 64 encoded'\n  });\n  $.fn.bootstrapValidator.validators.base64 = {\n    /**\r\n     * Return true if the input value is a base 64 encoded string.\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.between = $.extend($.fn.bootstrapValidator.i18n.between || {}, {\n    'default': 'Please enter a value between %s and %s',\n    notInclusive: 'Please enter a value between %s and %s strictly'\n  });\n  $.fn.bootstrapValidator.validators.between = {\n    html5Attributes: {\n      message: 'message',\n      min: 'min',\n      max: 'max',\n      inclusive: 'inclusive'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      if ('range' === $field.attr('type')) {\n        return {\n          min: $field.attr('min'),\n          max: $field.attr('max')\n        };\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Return true if the input value is between (strictly or not) two given numbers\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - min\r\n     * - max\r\n     *\r\n     * The min, max keys define the number which the field value compares to. min, max can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - inclusive [optional]: Can be true or false. Default is true\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\n          max = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max);\n      value = parseFloat(value);\n      return options.inclusive === true || options.inclusive === undefined ? {\n        valid: value >= min && value <= max,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between['default'], [min, max])\n      } : {\n        valid: value > min && value < max,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between.notInclusive, [min, max])\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.callback = $.extend($.fn.bootstrapValidator.i18n.callback || {}, {\n    'default': 'Please enter a valid value'\n  });\n  $.fn.bootstrapValidator.validators.callback = {\n    html5Attributes: {\n      message: 'message',\n      callback: 'callback'\n    },\n\n    /**\r\n     * Return result from the callback method\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - callback: The callback method that passes 2 parameters:\r\n     *      callback: function(fieldValue, validator, $field) {\r\n     *          // fieldValue is the value of field\r\n     *          // validator is instance of BootstrapValidator\r\n     *          // $field is the field element\r\n     *      }\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Deferred}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (options.callback) {\n        var dfd = new $.Deferred(),\n            response = $.fn.bootstrapValidator.helpers.call(options.callback, [value, validator, $field]);\n        dfd.resolve($field, 'callback', 'boolean' === typeof response ? response : response.valid, 'object' === _typeof(response) && response.message ? response.message : null);\n        return dfd;\n      }\n\n      return true;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.choice = $.extend($.fn.bootstrapValidator.i18n.choice || {}, {\n    'default': 'Please enter a valid value',\n    less: 'Please choose %s options at minimum',\n    more: 'Please choose %s options at maximum',\n    between: 'Please choose %s - %s options'\n  });\n  $.fn.bootstrapValidator.validators.choice = {\n    html5Attributes: {\n      message: 'message',\n      min: 'min',\n      max: 'max'\n    },\n\n    /**\r\n     * Check if the number of checked boxes are less or more than a given number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of following keys:\r\n     * - min\r\n     * - max\r\n     *\r\n     * At least one of two keys is required\r\n     * The min, max keys define the number which the field value compares to. min, max can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - message: The invalid message\r\n     * @returns {Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var numChoices = $field.is('select') ? validator.getFieldElements($field.attr('data-bv-field')).find('option').filter(':selected').length : validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length,\n          min = options.min ? $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min) : null,\n          max = options.max ? $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max) : null,\n          isValid = true,\n          message = options.message || $.fn.bootstrapValidator.i18n.choice['default'];\n\n      if (min && numChoices < parseInt(min, 10) || max && numChoices > parseInt(max, 10)) {\n        isValid = false;\n      }\n\n      switch (true) {\n        case !!min && !!max:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.between, [parseInt(min, 10), parseInt(max, 10)]);\n          break;\n\n        case !!min:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.less, parseInt(min, 10));\n          break;\n\n        case !!max:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.more, parseInt(max, 10));\n          break;\n\n        default:\n          break;\n      }\n\n      return {\n        valid: isValid,\n        message: message\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.creditCard = $.extend($.fn.bootstrapValidator.i18n.creditCard || {}, {\n    'default': 'Please enter a valid credit card number'\n  });\n  $.fn.bootstrapValidator.validators.creditCard = {\n    /**\r\n     * Return true if the input value is valid credit card number\r\n     * Based on https://gist.github.com/DiegoSalazar/4075533\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} [options] Can consist of the following key:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Accept only digits, dashes or spaces\n\n\n      if (/[^0-9-\\s]+/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\D/g, '');\n\n      if (!$.fn.bootstrapValidator.helpers.luhn(value)) {\n        return false;\n      } // Validate the card number based on prefix (IIN ranges) and length\n\n\n      var cards = {\n        AMERICAN_EXPRESS: {\n          length: [15],\n          prefix: ['34', '37']\n        },\n        DINERS_CLUB: {\n          length: [14],\n          prefix: ['300', '301', '302', '303', '304', '305', '36']\n        },\n        DINERS_CLUB_US: {\n          length: [16],\n          prefix: ['54', '55']\n        },\n        DISCOVER: {\n          length: [16],\n          prefix: ['6011', '622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925', '644', '645', '646', '647', '648', '649', '65']\n        },\n        JCB: {\n          length: [16],\n          prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\n        },\n        LASER: {\n          length: [16, 17, 18, 19],\n          prefix: ['6304', '6706', '6771', '6709']\n        },\n        MAESTRO: {\n          length: [12, 13, 14, 15, 16, 17, 18, 19],\n          prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\n        },\n        MASTERCARD: {\n          length: [16],\n          prefix: ['51', '52', '53', '54', '55']\n        },\n        SOLO: {\n          length: [16, 18, 19],\n          prefix: ['6334', '6767']\n        },\n        UNIONPAY: {\n          length: [16, 17, 18, 19],\n          prefix: ['622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925']\n        },\n        VISA: {\n          length: [16],\n          prefix: ['4']\n        }\n      };\n      var type, i;\n\n      for (type in cards) {\n        for (i in cards[type].prefix) {\n          if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i] // Check the prefix\n          && $.inArray(value.length, cards[type].length) !== -1) // and length\n            {\n              return true;\n            }\n        }\n      }\n\n      return false;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.cusip = $.extend($.fn.bootstrapValidator.i18n.cusip || {}, {\n    'default': 'Please enter a valid CUSIP number'\n  });\n  $.fn.bootstrapValidator.validators.cusip = {\n    /**\r\n     * Validate a CUSIP\r\n     * Examples:\r\n     * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\r\n     * - Invalid: 31430F200, 022615AC2\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/CUSIP\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} [options] Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      value = value.toUpperCase();\n\n      if (!/^[0-9A-Z]{9}$/.test(value)) {\n        return false;\n      }\n\n      var converted = $.map(value.split(''), function (item) {\n        var code = item.charCodeAt(0);\n        return code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0) ? // Replace A, B, C, ..., Z with 10, 11, ..., 35\n        code - 'A'.charCodeAt(0) + 10 : item;\n      }),\n          length = converted.length,\n          sum = 0;\n\n      for (var i = 0; i < length - 1; i++) {\n        var num = parseInt(converted[i], 10);\n\n        if (i % 2 !== 0) {\n          num *= 2;\n        }\n\n        if (num > 9) {\n          num -= 9;\n        }\n\n        sum += num;\n      }\n\n      sum = (10 - sum % 10) % 10;\n      return sum === converted[length - 1];\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.cvv = $.extend($.fn.bootstrapValidator.i18n.cvv || {}, {\n    'default': 'Please enter a valid CVV number'\n  });\n  $.fn.bootstrapValidator.validators.cvv = {\n    html5Attributes: {\n      message: 'message',\n      ccfield: 'creditCardField'\n    },\n\n    /**\r\n     * Return true if the input value is a valid CVV number.\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - creditCardField: The credit card number field. It can be null\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      if (!/^[0-9]{3,4}$/.test(value)) {\n        return false;\n      }\n\n      if (!options.creditCardField) {\n        return true;\n      } // Get the credit card number\n\n\n      var creditCard = validator.getFieldElements(options.creditCardField).val();\n\n      if (creditCard === '') {\n        return true;\n      }\n\n      creditCard = creditCard.replace(/\\D/g, ''); // Supported credit card types\n\n      var cards = {\n        AMERICAN_EXPRESS: {\n          length: [15],\n          prefix: ['34', '37']\n        },\n        DINERS_CLUB: {\n          length: [14],\n          prefix: ['300', '301', '302', '303', '304', '305', '36']\n        },\n        DINERS_CLUB_US: {\n          length: [16],\n          prefix: ['54', '55']\n        },\n        DISCOVER: {\n          length: [16],\n          prefix: ['6011', '622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925', '644', '645', '646', '647', '648', '649', '65']\n        },\n        JCB: {\n          length: [16],\n          prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\n        },\n        LASER: {\n          length: [16, 17, 18, 19],\n          prefix: ['6304', '6706', '6771', '6709']\n        },\n        MAESTRO: {\n          length: [12, 13, 14, 15, 16, 17, 18, 19],\n          prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\n        },\n        MASTERCARD: {\n          length: [16],\n          prefix: ['51', '52', '53', '54', '55']\n        },\n        SOLO: {\n          length: [16, 18, 19],\n          prefix: ['6334', '6767']\n        },\n        UNIONPAY: {\n          length: [16, 17, 18, 19],\n          prefix: ['622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925']\n        },\n        VISA: {\n          length: [16],\n          prefix: ['4']\n        }\n      };\n      var type,\n          i,\n          creditCardType = null;\n\n      for (type in cards) {\n        for (i in cards[type].prefix) {\n          if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i] // Check the prefix\n          && $.inArray(creditCard.length, cards[type].length) !== -1) // and length\n            {\n              creditCardType = type;\n              break;\n            }\n        }\n      }\n\n      return creditCardType === null ? false : 'AMERICAN_EXPRESS' === creditCardType ? value.length === 4 : value.length === 3;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.date = $.extend($.fn.bootstrapValidator.i18n.date || {}, {\n    'default': 'Please enter a valid date'\n  });\n  $.fn.bootstrapValidator.validators.date = {\n    html5Attributes: {\n      message: 'message',\n      format: 'format',\n      separator: 'separator'\n    },\n\n    /**\r\n     * Return true if the input value is valid date\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * - separator: Use to separate the date, month, and year.\r\n     * By default, it is /\r\n     * - format: The date format. Default is MM/DD/YYYY\r\n     * The format can be:\r\n     *\r\n     * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n     * ii) date and time:\r\n     * The time can consist of h, m, s parts which are separated by :\r\n     * ii) date, time and A (indicating AM or PM)\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      options.format = options.format || 'MM/DD/YYYY';\n      var formats = options.format.split(' '),\n          dateFormat = formats[0],\n          timeFormat = formats.length > 1 ? formats[1] : null,\n          amOrPm = formats.length > 2 ? formats[2] : null,\n          sections = value.split(' '),\n          date = sections[0],\n          time = sections.length > 1 ? sections[1] : null;\n\n      if (formats.length !== sections.length) {\n        return false;\n      } // Determine the separator\n\n\n      var separator = options.separator;\n\n      if (!separator) {\n        separator = date.indexOf('/') !== -1 ? '/' : date.indexOf('-') !== -1 ? '-' : null;\n      }\n\n      if (separator === null || date.indexOf(separator) === -1) {\n        return false;\n      } // Determine the date\n\n\n      date = date.split(separator);\n      dateFormat = dateFormat.split(separator);\n\n      if (date.length !== dateFormat.length) {\n        return false;\n      }\n\n      var year = date[$.inArray('YYYY', dateFormat)],\n          month = date[$.inArray('MM', dateFormat)],\n          day = date[$.inArray('DD', dateFormat)];\n\n      if (!year || !month || !day) {\n        return false;\n      } // Determine the time\n\n\n      var minutes = null,\n          hours = null,\n          seconds = null;\n\n      if (timeFormat) {\n        timeFormat = timeFormat.split(':');\n        time = time.split(':');\n\n        if (timeFormat.length !== time.length) {\n          return false;\n        }\n\n        hours = time.length > 0 ? time[0] : null;\n        minutes = time.length > 1 ? time[1] : null;\n        seconds = time.length > 2 ? time[2] : null; // Validate seconds\n\n        if (seconds) {\n          seconds = parseInt(seconds, 10);\n\n          if (isNaN(seconds) || seconds < 0 || seconds > 60) {\n            return false;\n          }\n        } // Validate hours\n\n\n        if (hours) {\n          hours = parseInt(hours, 10);\n\n          if (isNaN(hours) || hours < 0 || hours >= 24 || amOrPm && hours > 12) {\n            return false;\n          }\n        } // Validate minutes\n\n\n        if (minutes) {\n          minutes = parseInt(minutes, 10);\n\n          if (isNaN(minutes) || minutes < 0 || minutes > 59) {\n            return false;\n          }\n        }\n      } // Validate day, month, and year\n\n\n      return $.fn.bootstrapValidator.helpers.date(year, month, day);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.different = $.extend($.fn.bootstrapValidator.i18n.different || {}, {\n    'default': 'Please enter a different value'\n  });\n  $.fn.bootstrapValidator.validators.different = {\n    html5Attributes: {\n      message: 'message',\n      field: 'field'\n    },\n\n    /**\r\n     * Return true if the input value is different with given field's value\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of the following key:\r\n     * - field: The name of field that will be used to compare with current one\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var compareWith = validator.getFieldElements(options.field);\n\n      if (compareWith === null) {\n        return true;\n      }\n\n      if (value !== compareWith.val()) {\n        validator.updateStatus(options.field, validator.STATUS_VALID, 'different');\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.digits = $.extend($.fn.bootstrapValidator.i18n.digits || {}, {\n    'default': 'Please enter only digits'\n  });\n  $.fn.bootstrapValidator.validators.digits = {\n    /**\r\n     * Return true if the input value contains digits only\r\n     *\r\n     * @param {BootstrapValidator} validator Validate plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} [options]\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /^\\d+$/.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.ean = $.extend($.fn.bootstrapValidator.i18n.ean || {}, {\n    'default': 'Please enter a valid EAN number'\n  });\n  $.fn.bootstrapValidator.validators.ean = {\n    /**\r\n     * Validate EAN (International Article Number)\r\n     * Examples:\r\n     * - Valid: 73513537, 9780471117094, 4006381333931\r\n     * - Invalid: 73513536\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/European_Article_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      if (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\n        return false;\n      }\n\n      var length = value.length,\n          sum = 0,\n          weight = length === 8 ? [3, 1] : [1, 3];\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n      }\n\n      sum = (10 - sum % 10) % 10;\n      return sum + '' === value.charAt(length - 1);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.emailAddress = $.extend($.fn.bootstrapValidator.i18n.emailAddress || {}, {\n    'default': 'Please enter a valid email address'\n  });\n  $.fn.bootstrapValidator.validators.emailAddress = {\n    enableByHtml5: function enableByHtml5($field) {\n      return 'email' === $field.attr('type');\n    },\n\n    /**\r\n     * Return true if and only if the input value is a valid email address\r\n     *\r\n     * @param {BootstrapValidator} validator Validate plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} [options]\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Email address regular expression\n      // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n\n\n      var emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return emailRegExp.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.file = $.extend($.fn.bootstrapValidator.i18n.file || {}, {\n    'default': 'Please choose a valid file'\n  });\n  $.fn.bootstrapValidator.validators.file = {\n    html5Attributes: {\n      extension: 'extension',\n      maxsize: 'maxSize',\n      message: 'message',\n      type: 'type'\n    },\n\n    /**\r\n     * Validate upload file. Use HTML 5 API if the browser supports\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - extension: The allowed extensions, separated by a comma\r\n     * - maxSize: The maximum size in bytes\r\n     * - message: The invalid message\r\n     * - type: The allowed MIME type, separated by a comma\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var ext,\n          extensions = options.extension ? options.extension.toLowerCase().split(',') : null,\n          types = options.type ? options.type.toLowerCase().split(',') : null,\n          html5 = window.File && window.FileList && window.FileReader;\n\n      if (html5) {\n        // Get FileList instance\n        var files = $field.get(0).files,\n            total = files.length;\n\n        for (var i = 0; i < total; i++) {\n          // Check file size\n          if (options.maxSize && files[i].size > parseInt(options.maxSize, 10)) {\n            return false;\n          } // Check file extension\n\n\n          ext = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\n\n          if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\n            return false;\n          } // Check file type\n\n\n          if (types && $.inArray(files[i].type.toLowerCase(), types) === -1) {\n            return false;\n          }\n        }\n      } else {\n        // Check file extension\n        ext = value.substr(value.lastIndexOf('.') + 1);\n\n        if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.greaterThan = $.extend($.fn.bootstrapValidator.i18n.greaterThan || {}, {\n    'default': 'Please enter a value greater than or equal to %s',\n    notInclusive: 'Please enter a value greater than %s'\n  });\n  $.fn.bootstrapValidator.validators.greaterThan = {\n    html5Attributes: {\n      message: 'message',\n      value: 'value',\n      inclusive: 'inclusive'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      var min = $field.attr('min');\n\n      if (min) {\n        return {\n          value: min\n        };\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Return true if the input value is greater than or equals to given number\r\n     *\r\n     * @param {BootstrapValidator} validator Validate plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - value: Define the number to compare with. It can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - inclusive [optional]: Can be true or false. Default is true\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\n      value = parseFloat(value);\n      return options.inclusive === true || options.inclusive === undefined ? {\n        valid: value >= compareTo,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan['default'], compareTo)\n      } : {\n        valid: value > compareTo,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan.notInclusive, compareTo)\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.grid = $.extend($.fn.bootstrapValidator.i18n.grid || {}, {\n    'default': 'Please enter a valid GRId number'\n  });\n  $.fn.bootstrapValidator.validators.grid = {\n    /**\r\n     * Validate GRId (Global Release Identifier)\r\n     * Examples:\r\n     * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\r\n     * - Invalid: A1-2425G-ABC1234002-Q\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      value = value.toUpperCase();\n\n      if (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\s/g, '').replace(/-/g, '');\n\n      if ('GRID:' === value.substr(0, 5)) {\n        value = value.substr(5);\n      }\n\n      return $.fn.bootstrapValidator.helpers.mod37And36(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.hex = $.extend($.fn.bootstrapValidator.i18n.hex || {}, {\n    'default': 'Please enter a valid hexadecimal number'\n  });\n  $.fn.bootstrapValidator.validators.hex = {\n    /**\r\n     * Return true if and only if the input value is a valid hexadecimal number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /^[0-9a-fA-F]+$/.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.hexColor = $.extend($.fn.bootstrapValidator.i18n.hexColor || {}, {\n    'default': 'Please enter a valid hex color'\n  });\n  $.fn.bootstrapValidator.validators.hexColor = {\n    enableByHtml5: function enableByHtml5($field) {\n      return 'color' === $field.attr('type');\n    },\n\n    /**\r\n     * Return true if the input value is a valid hex color\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.iban = $.extend($.fn.bootstrapValidator.i18n.iban || {}, {\n    'default': 'Please enter a valid IBAN number',\n    countryNotSupported: 'The country code %s is not supported',\n    country: 'Please enter a valid IBAN number in %s',\n    countries: {\n      AD: 'Andorra',\n      AE: 'United Arab Emirates',\n      AL: 'Albania',\n      AO: 'Angola',\n      AT: 'Austria',\n      AZ: 'Azerbaijan',\n      BA: 'Bosnia and Herzegovina',\n      BE: 'Belgium',\n      BF: 'Burkina Faso',\n      BG: 'Bulgaria',\n      BH: 'Bahrain',\n      BI: 'Burundi',\n      BJ: 'Benin',\n      BR: 'Brazil',\n      CH: 'Switzerland',\n      CI: 'Ivory Coast',\n      CM: 'Cameroon',\n      CR: 'Costa Rica',\n      CV: 'Cape Verde',\n      CY: 'Cyprus',\n      CZ: 'Czech Republic',\n      DE: 'Germany',\n      DK: 'Denmark',\n      DO: 'Dominican Republic',\n      DZ: 'Algeria',\n      EE: 'Estonia',\n      ES: 'Spain',\n      FI: 'Finland',\n      FO: 'Faroe Islands',\n      FR: 'France',\n      GB: 'United Kingdom',\n      GE: 'Georgia',\n      GI: 'Gibraltar',\n      GL: 'Greenland',\n      GR: 'Greece',\n      GT: 'Guatemala',\n      HR: 'Croatia',\n      HU: 'Hungary',\n      IE: 'Ireland',\n      IL: 'Israel',\n      IR: 'Iran',\n      IS: 'Iceland',\n      IT: 'Italy',\n      JO: 'Jordan',\n      KW: 'Kuwait',\n      KZ: 'Kazakhstan',\n      LB: 'Lebanon',\n      LI: 'Liechtenstein',\n      LT: 'Lithuania',\n      LU: 'Luxembourg',\n      LV: 'Latvia',\n      MC: 'Monaco',\n      MD: 'Moldova',\n      ME: 'Montenegro',\n      MG: 'Madagascar',\n      MK: 'Macedonia',\n      ML: 'Mali',\n      MR: 'Mauritania',\n      MT: 'Malta',\n      MU: 'Mauritius',\n      MZ: 'Mozambique',\n      NL: 'Netherlands',\n      NO: 'Norway',\n      PK: 'Pakistan',\n      PL: 'Poland',\n      PS: 'Palestinian',\n      PT: 'Portugal',\n      QA: 'Qatar',\n      RO: 'Romania',\n      RS: 'Serbia',\n      SA: 'Saudi Arabia',\n      SE: 'Sweden',\n      SI: 'Slovenia',\n      SK: 'Slovakia',\n      SM: 'San Marino',\n      SN: 'Senegal',\n      TN: 'Tunisia',\n      TR: 'Turkey',\n      VG: 'Virgin Islands, British'\n    }\n  });\n  $.fn.bootstrapValidator.validators.iban = {\n    html5Attributes: {\n      message: 'message',\n      country: 'country'\n    },\n    // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\n    // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\n    REGEX: {\n      AD: 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',\n      // Andorra\n      AE: 'AE[0-9]{2}[0-9]{3}[0-9]{16}',\n      // United Arab Emirates\n      AL: 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',\n      // Albania\n      AO: 'AO[0-9]{2}[0-9]{21}',\n      // Angola\n      AT: 'AT[0-9]{2}[0-9]{5}[0-9]{11}',\n      // Austria\n      AZ: 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',\n      // Azerbaijan\n      BA: 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',\n      // Bosnia and Herzegovina\n      BE: 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',\n      // Belgium\n      BF: 'BF[0-9]{2}[0-9]{23}',\n      // Burkina Faso\n      BG: 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',\n      // Bulgaria\n      BH: 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',\n      // Bahrain\n      BI: 'BI[0-9]{2}[0-9]{12}',\n      // Burundi\n      BJ: 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',\n      // Benin\n      BR: 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',\n      // Brazil\n      CH: 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',\n      // Switzerland\n      CI: 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',\n      // Ivory Coast\n      CM: 'CM[0-9]{2}[0-9]{23}',\n      // Cameroon\n      CR: 'CR[0-9]{2}[0-9]{3}[0-9]{14}',\n      // Costa Rica\n      CV: 'CV[0-9]{2}[0-9]{21}',\n      // Cape Verde\n      CY: 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',\n      // Cyprus\n      CZ: 'CZ[0-9]{2}[0-9]{20}',\n      // Czech Republic\n      DE: 'DE[0-9]{2}[0-9]{8}[0-9]{10}',\n      // Germany\n      DK: 'DK[0-9]{2}[0-9]{14}',\n      // Denmark\n      DO: 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',\n      // Dominican Republic\n      DZ: 'DZ[0-9]{2}[0-9]{20}',\n      // Algeria\n      EE: 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',\n      // Estonia\n      ES: 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',\n      // Spain\n      FI: 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',\n      // Finland\n      FO: 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',\n      // Faroe Islands\n      FR: 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',\n      // France\n      GB: 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',\n      // United Kingdom\n      GE: 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',\n      // Georgia\n      GI: 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',\n      // Gibraltar\n      GL: 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',\n      // Greenland\n      GR: 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',\n      // Greece\n      GT: 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',\n      // Guatemala\n      HR: 'HR[0-9]{2}[0-9]{7}[0-9]{10}',\n      // Croatia\n      HU: 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',\n      // Hungary\n      IE: 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',\n      // Ireland\n      IL: 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',\n      // Israel\n      IR: 'IR[0-9]{2}[0-9]{22}',\n      // Iran\n      IS: 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',\n      // Iceland\n      IT: 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',\n      // Italy\n      JO: 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',\n      // Jordan\n      KW: 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',\n      // Kuwait\n      KZ: 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',\n      // Kazakhstan\n      LB: 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',\n      // Lebanon\n      LI: 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',\n      // Liechtenstein\n      LT: 'LT[0-9]{2}[0-9]{5}[0-9]{11}',\n      // Lithuania\n      LU: 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',\n      // Luxembourg\n      LV: 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',\n      // Latvia\n      MC: 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',\n      // Monaco\n      MD: 'MD[0-9]{2}[A-Z0-9]{20}',\n      // Moldova\n      ME: 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',\n      // Montenegro\n      MG: 'MG[0-9]{2}[0-9]{23}',\n      // Madagascar\n      MK: 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',\n      // Macedonia\n      ML: 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',\n      // Mali\n      MR: 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',\n      // Mauritania\n      MT: 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',\n      // Malta\n      MU: 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',\n      // Mauritius\n      MZ: 'MZ[0-9]{2}[0-9]{21}',\n      // Mozambique\n      NL: 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',\n      // Netherlands\n      NO: 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',\n      // Norway\n      PK: 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',\n      // Pakistan\n      PL: 'PL[0-9]{2}[0-9]{8}[0-9]{16}',\n      // Poland\n      PS: 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',\n      // Palestinian\n      PT: 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',\n      // Portugal\n      QA: 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',\n      // Qatar\n      RO: 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',\n      // Romania\n      RS: 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',\n      // Serbia\n      SA: 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',\n      // Saudi Arabia\n      SE: 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',\n      // Sweden\n      SI: 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',\n      // Slovenia\n      SK: 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',\n      // Slovakia\n      SM: 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',\n      // San Marino\n      SN: 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',\n      // Senegal\n      TN: 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',\n      // Tunisia\n      TR: 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',\n      // Turkey\n      VG: 'VG[0-9]{2}[A-Z]{4}[0-9]{16}' // Virgin Islands, British\n\n    },\n\n    /**\r\n     * Validate an International Bank Account Number (IBAN)\r\n     * To test it, take the sample IBAN from\r\n     * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * - country: The ISO 3166-1 country code. It can be\r\n     *      - A country code\r\n     *      - Name of field which its value defines the country code\r\n     *      - Name of callback function that returns the country code\r\n     *      - A callback function that returns the country code\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\n      var country = options.country;\n\n      if (!country) {\n        country = value.substr(0, 2);\n      } else if (typeof country !== 'string' || !this.REGEX[country]) {\n        // Determine the country code\n        country = validator.getDynamicOption($field, country);\n      }\n\n      if (!this.REGEX[country]) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.iban.countryNotSupported, country)\n        };\n      }\n\n      if (!new RegExp('^' + this.REGEX[country] + '$').test(value)) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\n        };\n      }\n\n      value = value.substr(4) + value.substr(0, 4);\n      value = $.map(value.split(''), function (n) {\n        var code = n.charCodeAt(0);\n        return code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0) ? // Replace A, B, C, ..., Z with 10, 11, ..., 35\n        code - 'A'.charCodeAt(0) + 10 : n;\n      });\n      value = value.join('');\n      var temp = parseInt(value.substr(0, 1), 10),\n          length = value.length;\n\n      for (var i = 1; i < length; ++i) {\n        temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\n      }\n\n      return {\n        valid: temp === 1,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.id = $.extend($.fn.bootstrapValidator.i18n.id || {}, {\n    'default': 'Please enter a valid identification number',\n    countryNotSupported: 'The country code %s is not supported',\n    country: 'Please enter a valid %s identification number',\n    countries: {\n      BA: 'Bosnia and Herzegovina',\n      BG: 'Bulgarian',\n      BR: 'Brazilian',\n      CH: 'Swiss',\n      CL: 'Chilean',\n      CZ: 'Czech',\n      DK: 'Danish',\n      EE: 'Estonian',\n      ES: 'Spanish',\n      FI: 'Finnish',\n      HR: 'Croatian',\n      IE: 'Irish',\n      IS: 'Iceland',\n      LT: 'Lithuanian',\n      LV: 'Latvian',\n      ME: 'Montenegro',\n      MK: 'Macedonian',\n      NL: 'Dutch',\n      RO: 'Romanian',\n      RS: 'Serbian',\n      SE: 'Swedish',\n      SI: 'Slovenian',\n      SK: 'Slovak',\n      SM: 'San Marino',\n      ZA: 'South African'\n    }\n  });\n  $.fn.bootstrapValidator.validators.id = {\n    html5Attributes: {\n      message: 'message',\n      country: 'country'\n    },\n    // Supported country codes\n    COUNTRY_CODES: ['BA', 'BG', 'BR', 'CH', 'CL', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL', 'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'ZA'],\n\n    /**\r\n     * Validate identification number in different countries\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - country: The ISO 3166-1 country code. It can be\r\n     *      - One of country code defined in COUNTRY_CODES\r\n     *      - Name of field which its value defines the country code\r\n     *      - Name of callback function that returns the country code\r\n     *      - A callback function that returns the country code\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var country = options.country;\n\n      if (!country) {\n        country = value.substr(0, 2);\n      } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n        // Determine the country code\n        country = validator.getDynamicOption($field, country);\n      }\n\n      if ($.inArray(country, this.COUNTRY_CODES) === -1) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.id.countryNotSupported, country)\n        };\n      }\n\n      var method = ['_', country.toLowerCase()].join('');\n      return this[method](value) ? true : {\n        valid: false,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.id.country, $.fn.bootstrapValidator.i18n.id.countries[country.toUpperCase()])\n      };\n    },\n\n    /**\r\n     * Validate Unique Master Citizen Number which uses in\r\n     * - Bosnia and Herzegovina (country code: BA)\r\n     * - Macedonia (MK)\r\n     * - Montenegro (ME)\r\n     * - Serbia (RS)\r\n     * - Slovenia (SI)\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\r\n     * @param {String} value The ID\r\n     * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\r\n     * @returns {Boolean}\r\n     */\n    _validateJMBG: function _validateJMBG(value, countryCode) {\n      if (!/^\\d{13}$/.test(value)) {\n        return false;\n      }\n\n      var day = parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10),\n          year = parseInt(value.substr(4, 3), 10),\n          rr = parseInt(value.substr(7, 2), 10),\n          k = parseInt(value.substr(12, 1), 10); // Validate date of birth\n      // FIXME: Validate the year of birth\n\n      if (day > 31 || month > 12) {\n        return false;\n      } // Validate checksum\n\n\n      var sum = 0;\n\n      for (var i = 0; i < 6; i++) {\n        sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum === 10 || sum === 11) {\n        sum = 0;\n      }\n\n      if (sum !== k) {\n        return false;\n      } // Validate political region\n      // rr is the political region of birth, which can be in ranges:\n      // 10-19: Bosnia and Herzegovina\n      // 20-29: Montenegro\n      // 30-39: Croatia (not used anymore)\n      // 41-49: Macedonia\n      // 50-59: Slovenia (only 50 is used)\n      // 70-79: Central Serbia\n      // 80-89: Serbian province of Vojvodina\n      // 90-99: Kosovo\n\n\n      switch (countryCode.toUpperCase()) {\n        case 'BA':\n          return 10 <= rr && rr <= 19;\n\n        case 'MK':\n          return 41 <= rr && rr <= 49;\n\n        case 'ME':\n          return 20 <= rr && rr <= 29;\n\n        case 'RS':\n          return 70 <= rr && rr <= 99;\n\n        case 'SI':\n          return 50 <= rr && rr <= 59;\n\n        default:\n          return true;\n      }\n    },\n    _ba: function _ba(value) {\n      return this._validateJMBG(value, 'BA');\n    },\n    _mk: function _mk(value) {\n      return this._validateJMBG(value, 'MK');\n    },\n    _me: function _me(value) {\n      return this._validateJMBG(value, 'ME');\n    },\n    _rs: function _rs(value) {\n      return this._validateJMBG(value, 'RS');\n    },\n\n    /**\r\n     * Examples: 0101006500006\r\n     */\n    _si: function _si(value) {\n      return this._validateJMBG(value, 'SI');\n    },\n\n    /**\r\n     * Validate Bulgarian national identification number (EGN)\r\n     * Examples:\r\n     * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\r\n     * - Invalid: 8019010008\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Uniform_civil_number\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _bg: function _bg(value) {\n      if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\s/g, ''); // Check the birth date\n\n      var year = parseInt(value.substr(0, 2), 10) + 1900,\n          month = parseInt(value.substr(2, 2), 10),\n          day = parseInt(value.substr(4, 2), 10);\n\n      if (month > 40) {\n        year += 100;\n        month -= 40;\n      } else if (month > 20) {\n        year -= 100;\n        month -= 20;\n      }\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n        return false;\n      }\n\n      var sum = 0,\n          weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n\n      for (var i = 0; i < 9; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11 % 10;\n      return sum + '' === value.substr(9, 1);\n    },\n\n    /**\r\n     * Validate Brazilian national identification number (CPF)\r\n     * Examples:\r\n     * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\r\n     * - Invalid: 231.002.999-00\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _br: function _br(value) {\n      if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\n        return false;\n      }\n\n      if (!/^\\d{11}$/.test(value) && !/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\./g, '').replace(/-/g, '');\n      var d1 = 0;\n\n      for (var i = 0; i < 9; i++) {\n        d1 += (10 - i) * parseInt(value.charAt(i), 10);\n      }\n\n      d1 = 11 - d1 % 11;\n\n      if (d1 === 10 || d1 === 11) {\n        d1 = 0;\n      }\n\n      if (d1 + '' !== value.charAt(9)) {\n        return false;\n      }\n\n      var d2 = 0;\n\n      for (i = 0; i < 10; i++) {\n        d2 += (11 - i) * parseInt(value.charAt(i), 10);\n      }\n\n      d2 = 11 - d2 % 11;\n\n      if (d2 === 10 || d2 === 11) {\n        d2 = 0;\n      }\n\n      return d2 + '' === value.charAt(10);\n    },\n\n    /**\r\n     * Validate Swiss Social Security Number (AHV-Nr/No AVS)\r\n     * Examples:\r\n     * - Valid: 756.1234.5678.95, 7561234567895\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\r\n     * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _ch: function _ch(value) {\n      if (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\D/g, '').substr(3);\n      var length = value.length,\n          sum = 0,\n          weight = length === 8 ? [3, 1] : [1, 3];\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n      }\n\n      sum = 10 - sum % 10;\n      return sum + '' === value.charAt(length - 1);\n    },\n\n    /**\r\n     * Validate Chilean national identification number (RUN/RUT)\r\n     * Examples:\r\n     * - Valid: 76086428-5, 22060449-7, 12531909-2\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\r\n     * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _cl: function _cl(value) {\n      if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\-/g, '');\n\n      while (value.length < 9) {\n        value = '0' + value;\n      }\n\n      var sum = 0,\n          weight = [3, 2, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum === 11) {\n        sum = 0;\n      } else if (sum === 10) {\n        sum = 'K';\n      }\n\n      return sum + '' === value.charAt(8).toUpperCase();\n    },\n\n    /**\r\n     * Validate Czech national identification number (RC)\r\n     * Examples:\r\n     * - Valid: 7103192745, 991231123\r\n     * - Invalid: 1103492745, 590312123\r\n     *\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _cz: function _cz(value) {\n      if (!/^\\d{9,10}$/.test(value)) {\n        return false;\n      }\n\n      var year = 1900 + parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10) % 50 % 20,\n          day = parseInt(value.substr(4, 2), 10);\n\n      if (value.length === 9) {\n        if (year >= 1980) {\n          year -= 100;\n        }\n\n        if (year > 1953) {\n          return false;\n        }\n      } else if (year < 1954) {\n        year += 100;\n      }\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n        return false;\n      } // Check that the birth date is not in the future\n\n\n      if (value.length === 10) {\n        var check = parseInt(value.substr(0, 9), 10) % 11;\n\n        if (year < 1985) {\n          check = check % 10;\n        }\n\n        return check + '' === value.substr(9, 1);\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Validate Danish Personal Identification number (CPR)\r\n     * Examples:\r\n     * - Valid: 2110625629, 211062-5629\r\n     * - Invalid: 511062-5629\r\n     *\r\n     * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _dk: function _dk(value) {\n      if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/-/g, '');\n      var day = parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10),\n          year = parseInt(value.substr(4, 2), 10);\n\n      switch (true) {\n        case '5678'.indexOf(value.charAt(6)) !== -1 && year >= 58:\n          year += 1800;\n          break;\n\n        case '0123'.indexOf(value.charAt(6)) !== -1:\n        case '49'.indexOf(value.charAt(6)) !== -1 && year >= 37:\n          year += 1900;\n          break;\n\n        default:\n          year += 2000;\n          break;\n      }\n\n      return $.fn.bootstrapValidator.helpers.date(year, month, day);\n    },\n\n    /**\r\n     * Validate Estonian Personal Identification Code (isikukood)\r\n     * Examples:\r\n     * - Valid: 37605030299\r\n     *\r\n     * @see http://et.wikipedia.org/wiki/Isikukood\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _ee: function _ee(value) {\n      // Use the same format as Lithuanian Personal Code\n      return this._lt(value);\n    },\n\n    /**\r\n     * Validate Spanish personal identity code (DNI)\r\n     * Support i) DNI (for Spanish citizens) and ii) NIE (for foreign people)\r\n     *\r\n     * Examples:\r\n     * - Valid: i) 54362315K, 54362315-K; ii) X2482300W, X-2482300W, X-2482300-W\r\n     * - Invalid: i) 54362315Z; ii) X-2482300A\r\n     *\r\n     * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _es: function _es(value) {\n      if (!/^[0-9A-Z]{8}[-]{0,1}[0-9A-Z]$/.test(value) // DNI\n      && !/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-Z]$/.test(value)) {\n        // NIE\n        return false;\n      }\n\n      value = value.replace(/-/g, '');\n      var index = 'XYZ'.indexOf(value.charAt(0));\n\n      if (index !== -1) {\n        // It is NIE number\n        value = index + value.substr(1) + '';\n      }\n\n      var check = parseInt(value.substr(0, 8), 10);\n      check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n      return check === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Finnish Personal Identity Code (HETU)\r\n     * Examples:\r\n     * - Valid: 311280-888Y, 131052-308T\r\n     * - Invalid: 131052-308U, 310252-308Y\r\n     *\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _fi: function _fi(value) {\n      if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\n        return false;\n      }\n\n      var day = parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10),\n          year = parseInt(value.substr(4, 2), 10),\n          centuries = {\n        '+': 1800,\n        '-': 1900,\n        'A': 2000\n      };\n      year = centuries[value.charAt(6)] + year;\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n        return false;\n      }\n\n      var individual = parseInt(value.substr(7, 3), 10);\n\n      if (individual < 2) {\n        return false;\n      }\n\n      var n = value.substr(0, 6) + value.substr(7, 3) + '';\n      n = parseInt(n, 10);\n      return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\n    },\n\n    /**\r\n     * Validate Croatian personal identification number (OIB)\r\n     * Examples:\r\n     * - Valid: 33392005961\r\n     * - Invalid: 33392005962\r\n     *\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _hr: function _hr(value) {\n      if (!/^[0-9]{11}$/.test(value)) {\n        return false;\n      }\n\n      return $.fn.bootstrapValidator.helpers.mod11And10(value);\n    },\n\n    /**\r\n     * Validate Irish Personal Public Service Number (PPS)\r\n     * Examples:\r\n     * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\r\n     * - Invalid: 6433435E, 6433435VH\r\n     *\r\n     * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _ie: function _ie(value) {\n      if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\n        return false;\n      }\n\n      var getCheckDigit = function getCheckDigit(value) {\n        while (value.length < 7) {\n          value = '0' + value;\n        }\n\n        var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\n            sum = 0;\n\n        for (var i = 0; i < 7; i++) {\n          sum += parseInt(value.charAt(i), 10) * (8 - i);\n        }\n\n        sum += 9 * alphabet.indexOf(value.substr(7));\n        return alphabet[sum % 23];\n      }; // 2013 format\n\n\n      if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\n        return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\n      } // The old format\n      else {\n          return value.charAt(7) === getCheckDigit(value.substr(0, 7));\n        }\n    },\n\n    /**\r\n     * Validate Iceland national identification number (Kennitala)\r\n     * Examples:\r\n     * - Valid: 120174-3399, 1201743399, 0902862349\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Kennitala\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _is: function _is(value) {\n      if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/-/g, '');\n      var day = parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10),\n          year = parseInt(value.substr(4, 2), 10),\n          century = parseInt(value.charAt(9), 10);\n      year = century === 9 ? 1900 + year : (20 + century) * 100 + year;\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n        return false;\n      } // Validate the check digit\n\n\n      var sum = 0,\n          weight = [3, 2, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n      return sum + '' === value.charAt(8);\n    },\n\n    /**\r\n     * Validate Lithuanian Personal Code (Asmens kodas)\r\n     * Examples:\r\n     * - Valid: 38703181745\r\n     * - Invalid: 38703181746, 78703181745, 38703421745\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\r\n     * @see http://www.adomas.org/midi2007/pcode.html\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _lt: function _lt(value) {\n      if (!/^[0-9]{11}$/.test(value)) {\n        return false;\n      }\n\n      var gender = parseInt(value.charAt(0), 10),\n          year = parseInt(value.substr(1, 2), 10),\n          month = parseInt(value.substr(3, 2), 10),\n          day = parseInt(value.substr(5, 2), 10),\n          century = gender % 2 === 0 ? 17 + gender / 2 : 17 + (gender + 1) / 2;\n      year = century * 100 + year;\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n        return false;\n      } // Validate the check digit\n\n\n      var sum = 0,\n          weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\n\n      for (var i = 0; i < 10; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11;\n\n      if (sum !== 10) {\n        return sum + '' === value.charAt(10);\n      } // Re-calculate the check digit\n\n\n      sum = 0;\n      weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\n\n      for (i = 0; i < 10; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11;\n\n      if (sum === 10) {\n        sum = 0;\n      }\n\n      return sum + '' === value.charAt(10);\n    },\n\n    /**\r\n     * Validate Latvian Personal Code (Personas kods)\r\n     * Examples:\r\n     * - Valid: 161175-19997, 16117519997\r\n     * - Invalid: 161375-19997\r\n     *\r\n     * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _lv: function _lv(value) {\n      if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\D/g, ''); // Check birth date\n\n      var day = parseInt(value.substr(0, 2), 10),\n          month = parseInt(value.substr(2, 2), 10),\n          year = parseInt(value.substr(4, 2), 10);\n      year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n        return false;\n      } // Check personal code\n\n\n      var sum = 0,\n          weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n\n      for (var i = 0; i < 10; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = (sum + 1) % 11 % 10;\n      return sum + '' === value.charAt(10);\n    },\n\n    /**\r\n     * Validate Dutch national identification number (BSN)\r\n     * Examples:\r\n     * - Valid: 111222333, 941331490, 9413.31.490\r\n     * - Invalid: 111252333\r\n     *\r\n     * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _nl: function _nl(value) {\n      while (value.length < 9) {\n        value = '0' + value;\n      }\n\n      if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/\\./g, '');\n\n      if (parseInt(value, 10) === 0) {\n        return false;\n      }\n\n      var sum = 0,\n          length = value.length;\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += (9 - i) * parseInt(value.charAt(i), 10);\n      }\n\n      sum = sum % 11;\n\n      if (sum === 10) {\n        sum = 0;\n      }\n\n      return sum + '' === value.charAt(length - 1);\n    },\n\n    /**\r\n     * Validate Romanian numerical personal code (CNP)\r\n     * Examples:\r\n     * - Valid: 1630615123457, 1800101221144\r\n     * - Invalid: 8800101221144, 1632215123457, 1630615123458\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _ro: function _ro(value) {\n      if (!/^[0-9]{13}$/.test(value)) {\n        return false;\n      }\n\n      var gender = parseInt(value.charAt(0), 10);\n\n      if (gender === 0 || gender === 7 || gender === 8) {\n        return false;\n      } // Determine the date of birth\n\n\n      var year = parseInt(value.substr(1, 2), 10),\n          month = parseInt(value.substr(3, 2), 10),\n          day = parseInt(value.substr(5, 2), 10),\n          // The year of date is determined base on the gender\n      centuries = {\n        '1': 1900,\n        // Male born between 1900 and 1999\n        '2': 1900,\n        // Female born between 1900 and 1999\n        '3': 1800,\n        // Male born between 1800 and 1899\n        '4': 1800,\n        // Female born between 1800 and 1899\n        '5': 2000,\n        // Male born after 2000\n        '6': 2000 // Female born after 2000\n\n      };\n\n      if (day > 31 && month > 12) {\n        return false;\n      }\n\n      if (gender !== 9) {\n        year = centuries[gender + ''] + year;\n\n        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n          return false;\n        }\n      } // Validate the check digit\n\n\n      var sum = 0,\n          weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\n          length = value.length;\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11;\n\n      if (sum === 10) {\n        sum = 1;\n      }\n\n      return sum + '' === value.charAt(length - 1);\n    },\n\n    /**\r\n     * Validate Swedish personal identity number (personnummer)\r\n     * Examples:\r\n     * - Valid: 8112289874, 811228-9874, 811228+9874\r\n     * - Invalid: 811228-9873\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _se: function _se(value) {\n      if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\n        return false;\n      }\n\n      value = value.replace(/[^0-9]/g, '');\n      var year = parseInt(value.substr(0, 2), 10) + 1900,\n          month = parseInt(value.substr(2, 2), 10),\n          day = parseInt(value.substr(4, 2), 10);\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n        return false;\n      } // Validate the last check digit\n\n\n      return $.fn.bootstrapValidator.helpers.luhn(value);\n    },\n\n    /**\r\n     * Validate Slovak national identifier number (RC)\r\n     * Examples:\r\n     * - Valid: 7103192745, 991231123\r\n     * - Invalid: 7103192746, 1103492745\r\n     *\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _sk: function _sk(value) {\n      // Slovakia uses the same format as Czech Republic\n      return this._cz(value);\n    },\n\n    /**\r\n     * Validate San Marino citizen number\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _sm: function _sm(value) {\n      return /^\\d{5}$/.test(value);\n    },\n\n    /**\r\n     * Validate South African ID\r\n     * Example:\r\n     * - Valid: 8001015009087\r\n     * - Invalid: 8001015009287, 8001015009086\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\r\n     * @param {String} value The ID\r\n     * @returns {Boolean}\r\n     */\n    _za: function _za(value) {\n      if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\n        return false;\n      }\n\n      var year = parseInt(value.substr(0, 2), 10),\n          currentYear = new Date().getFullYear() % 100,\n          month = parseInt(value.substr(2, 2), 10),\n          day = parseInt(value.substr(4, 2), 10);\n      year = year >= currentYear ? year + 1900 : year + 2000;\n\n      if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n        return false;\n      } // Validate the last check digit\n\n\n      return $.fn.bootstrapValidator.helpers.luhn(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.identical = $.extend($.fn.bootstrapValidator.i18n.identical || {}, {\n    'default': 'Please enter the same value'\n  });\n  $.fn.bootstrapValidator.validators.identical = {\n    html5Attributes: {\n      message: 'message',\n      field: 'field'\n    },\n\n    /**\r\n     * Check if input value equals to value of particular one\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of the following key:\r\n     * - field: The name of field that will be used to compare with current one\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var compareWith = validator.getFieldElements(options.field);\n\n      if (compareWith === null) {\n        return true;\n      }\n\n      if (value === compareWith.val()) {\n        validator.updateStatus(options.field, validator.STATUS_VALID, 'identical');\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.imei = $.extend($.fn.bootstrapValidator.i18n.imei || {}, {\n    'default': 'Please enter a valid IMEI number'\n  });\n  $.fn.bootstrapValidator.validators.imei = {\n    /**\r\n     * Validate IMEI (International Mobile Station Equipment Identity)\r\n     * Examples:\r\n     * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\r\n     * - Invalid: 490154203237517\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      switch (true) {\n        case /^\\d{15}$/.test(value):\n        case /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\n        case /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\n          value = value.replace(/[^0-9]/g, '');\n          return $.fn.bootstrapValidator.helpers.luhn(value);\n\n        case /^\\d{14}$/.test(value):\n        case /^\\d{16}$/.test(value):\n        case /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\n        case /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.imo = $.extend($.fn.bootstrapValidator.i18n.imo || {}, {\n    'default': 'Please enter a valid IMO number'\n  });\n  $.fn.bootstrapValidator.validators.imo = {\n    /**\r\n     * Validate IMO (International Maritime Organization)\r\n     * Examples:\r\n     * - Valid: IMO 8814275, IMO 9176187\r\n     * - Invalid: IMO 8814274\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/IMO_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      if (!/^IMO \\d{7}$/i.test(value)) {\n        return false;\n      } // Grab just the digits\n\n\n      var sum = 0,\n          digits = value.replace(/^.*(\\d{7})$/, '$1'); // Go over each char, multiplying by the inverse of it's position\n      // IMO 9176187\n      // (9 * 7) + (1 * 6) + (7 * 5) + (6 * 4) + (1 * 3) + (8 * 2) = 147\n      // Take the last digit of that, that's the check digit (7)\n\n      for (var i = 6; i >= 1; i--) {\n        sum += digits.slice(6 - i, -i) * (i + 1);\n      }\n\n      return sum % 10 === parseInt(digits.charAt(6), 10);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.integer = $.extend($.fn.bootstrapValidator.i18n.integer || {}, {\n    'default': 'Please enter a valid number'\n  });\n  $.fn.bootstrapValidator.validators.integer = {\n    enableByHtml5: function enableByHtml5($field) {\n      return 'number' === $field.attr('type') && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\n    },\n\n    /**\r\n     * Return true if the input value is an integer\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following key:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.ip = $.extend($.fn.bootstrapValidator.i18n.ip || {}, {\n    'default': 'Please enter a valid IP address',\n    ipv4: 'Please enter a valid IPv4 address',\n    ipv6: 'Please enter a valid IPv6 address'\n  });\n  $.fn.bootstrapValidator.validators.ip = {\n    html5Attributes: {\n      message: 'message',\n      ipv4: 'ipv4',\n      ipv6: 'ipv6'\n    },\n\n    /**\r\n     * Return true if the input value is a IP address.\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - ipv4: Enable IPv4 validator, default to true\r\n     * - ipv6: Enable IPv6 validator, default to true\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      options = $.extend({}, {\n        ipv4: true,\n        ipv6: true\n      }, options);\n      var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n          ipv6Regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n          valid = false,\n          message;\n\n      switch (true) {\n        case options.ipv4 && !options.ipv6:\n          valid = ipv4Regex.test(value);\n          message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv4;\n          break;\n\n        case !options.ipv4 && options.ipv6:\n          valid = ipv6Regex.test(value);\n          message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv6;\n          break;\n\n        case options.ipv4 && options.ipv6:\n        /* falls through */\n\n        default:\n          valid = ipv4Regex.test(value) && ipv6Regex.test(value);\n          message = options.message || $.fn.bootstrapValidator.i18n.ip.default;\n          break;\n      }\n\n      return {\n        valid: valid,\n        message: message\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.isbn = $.extend($.fn.bootstrapValidator.i18n.isbn || {}, {\n    'default': 'Please enter a valid ISBN number'\n  });\n  $.fn.bootstrapValidator.validators.isbn = {\n    /**\r\n     * Return true if the input value is a valid ISBN 10 or ISBN 13 number\r\n     * Examples:\r\n     * - Valid:\r\n     * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\r\n     * ISBN 13: 978-0-306-40615-7\r\n     * - Invalid:\r\n     * ISBN 10: 99921-58-10-6\r\n     * ISBN 13: 978-0-306-40615-6\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} [options] Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\n      // Groups are separated by a hyphen or a space\n\n\n      var type;\n\n      switch (true) {\n        case /^\\d{9}[\\dX]$/.test(value):\n        case value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value):\n        case value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value):\n          type = 'ISBN10';\n          break;\n\n        case /^(978|979)\\d{9}[\\dX]$/.test(value):\n        case value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value):\n        case value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value):\n          type = 'ISBN13';\n          break;\n\n        default:\n          return false;\n      } // Replace all special characters except digits and X\n\n\n      value = value.replace(/[^0-9X]/gi, '');\n      var chars = value.split(''),\n          length = chars.length,\n          sum = 0,\n          i,\n          checksum;\n\n      switch (type) {\n        case 'ISBN10':\n          sum = 0;\n\n          for (i = 0; i < length - 1; i++) {\n            sum += parseInt(chars[i], 10) * (10 - i);\n          }\n\n          checksum = 11 - sum % 11;\n\n          if (checksum === 11) {\n            checksum = 0;\n          } else if (checksum === 10) {\n            checksum = 'X';\n          }\n\n          return checksum + '' === chars[length - 1];\n\n        case 'ISBN13':\n          sum = 0;\n\n          for (i = 0; i < length - 1; i++) {\n            sum += i % 2 === 0 ? parseInt(chars[i], 10) : parseInt(chars[i], 10) * 3;\n          }\n\n          checksum = 10 - sum % 10;\n\n          if (checksum === 10) {\n            checksum = '0';\n          }\n\n          return checksum + '' === chars[length - 1];\n\n        default:\n          return false;\n      }\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.isin = $.extend($.fn.bootstrapValidator.i18n.isin || {}, {\n    'default': 'Please enter a valid ISIN number'\n  });\n  $.fn.bootstrapValidator.validators.isin = {\n    // Available country codes\n    // See http://isin.net/country-codes/\n    COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\n\n    /**\r\n     * Validate an ISIN (International Securities Identification Number)\r\n     * Examples:\r\n     * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\r\n     * - Invalid: US0378331004, AA0000XVGZA3\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      value = value.toUpperCase();\n      var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\n\n      if (!regex.test(value)) {\n        return false;\n      }\n\n      var converted = '',\n          length = value.length; // Convert letters to number\n\n      for (var i = 0; i < length - 1; i++) {\n        var c = value.charCodeAt(i);\n        converted += c > 57 ? (c - 55).toString() : value.charAt(i);\n      }\n\n      var digits = '',\n          n = converted.length,\n          group = n % 2 !== 0 ? 0 : 1;\n\n      for (i = 0; i < n; i++) {\n        digits += parseInt(converted[i], 10) * (i % 2 === group ? 2 : 1) + '';\n      }\n\n      var sum = 0;\n\n      for (i = 0; i < digits.length; i++) {\n        sum += parseInt(digits.charAt(i), 10);\n      }\n\n      sum = (10 - sum % 10) % 10;\n      return sum + '' === value.charAt(length - 1);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.ismn = $.extend($.fn.bootstrapValidator.i18n.ismn || {}, {\n    'default': 'Please enter a valid ISMN number'\n  });\n  $.fn.bootstrapValidator.validators.ismn = {\n    /**\r\n     * Validate ISMN (International Standard Music Number)\r\n     * Examples:\r\n     * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\r\n     * - Invalid: 9790060115614\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Groups are separated by a hyphen or a space\n\n\n      var type;\n\n      switch (true) {\n        case /^M\\d{9}$/.test(value):\n        case /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\n        case /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\n          type = 'ISMN10';\n          break;\n\n        case /^9790\\d{9}$/.test(value):\n        case /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\n        case /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\n          type = 'ISMN13';\n          break;\n\n        default:\n          return false;\n      }\n\n      if ('ISMN10' === type) {\n        value = '9790' + value.substr(1);\n      } // Replace all special characters except digits\n\n\n      value = value.replace(/[^0-9]/gi, '');\n      var length = value.length,\n          sum = 0,\n          weight = [1, 3];\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n      }\n\n      sum = 10 - sum % 10;\n      return sum + '' === value.charAt(length - 1);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.issn = $.extend($.fn.bootstrapValidator.i18n.issn || {}, {\n    'default': 'Please enter a valid ISSN number'\n  });\n  $.fn.bootstrapValidator.validators.issn = {\n    /**\r\n     * Validate ISSN (International Standard Serial Number)\r\n     * Examples:\r\n     * - Valid: 0378-5955, 0024-9319, 0032-1478\r\n     * - Invalid: 0032-147X\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Groups are separated by a hyphen or a space\n\n\n      if (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\n        return false;\n      } // Replace all special characters except digits and X\n\n\n      value = value.replace(/[^0-9X]/gi, '');\n      var chars = value.split(''),\n          length = chars.length,\n          sum = 0;\n\n      if (chars[7] === 'X') {\n        chars[7] = 10;\n      }\n\n      for (var i = 0; i < length; i++) {\n        sum += parseInt(chars[i], 10) * (8 - i);\n      }\n\n      return sum % 11 === 0;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.lessThan = $.extend($.fn.bootstrapValidator.i18n.lessThan || {}, {\n    'default': 'Please enter a value less than or equal to %s',\n    notInclusive: 'Please enter a value less than %s'\n  });\n  $.fn.bootstrapValidator.validators.lessThan = {\n    html5Attributes: {\n      message: 'message',\n      value: 'value',\n      inclusive: 'inclusive'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      var max = $field.attr('max');\n\n      if (max) {\n        return {\n          value: max\n        };\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Return true if the input value is less than or equal to given number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - value: The number used to compare to. It can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - inclusive [optional]: Can be true or false. Default is true\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\n      value = parseFloat(value);\n      return options.inclusive === true || options.inclusive === undefined ? {\n        valid: value <= compareTo,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan['default'], compareTo)\n      } : {\n        valid: value < compareTo,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan.notInclusive, compareTo)\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.mac = $.extend($.fn.bootstrapValidator.i18n.mac || {}, {\n    'default': 'Please enter a valid MAC address'\n  });\n  $.fn.bootstrapValidator.validators.mac = {\n    /**\r\n     * Return true if the input value is a MAC address.\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.meid = $.extend($.fn.bootstrapValidator.i18n.meid || {}, {\n    'default': 'Please enter a valid MEID number'\n  });\n  $.fn.bootstrapValidator.validators.meid = {\n    /**\r\n     * Validate MEID (Mobile Equipment Identifier)\r\n     * Examples:\r\n     * - Valid: 293608736500703710, 29360-87365-0070-3710, AF0123450ABCDE, AF-012345-0ABCDE\r\n     * - Invalid: 2936087365007037101\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Mobile_equipment_identifier\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      switch (true) {\n        // 14 digit hex representation (no check digit)\n        case /^[0-9A-F]{15}$/i.test(value): // 14 digit hex representation + dashes or spaces (no check digit)\n\n        case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(value): // 18 digit decimal representation (no check digit)\n\n        case /^\\d{19}$/.test(value): // 18 digit decimal representation + dashes or spaces (no check digit)\n\n        case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}[- ]\\d$/.test(value):\n          // Grab the check digit\n          var cd = value.charAt(value.length - 1); // Strip any non-hex chars\n\n          value = value.replace(/[- ]/g, ''); // If it's all digits, luhn base 10 is used\n\n          if (value.match(/^\\d*$/i)) {\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n          } // Strip the check digit\n\n\n          value = value.slice(0, -1); // Get every other char, and double it\n\n          var cdCalc = '';\n\n          for (var i = 1; i <= 13; i += 2) {\n            cdCalc += (parseInt(value.charAt(i), 16) * 2).toString(16);\n          } // Get the sum of each char in the string\n\n\n          var sum = 0;\n\n          for (i = 0; i < cdCalc.length; i++) {\n            sum += parseInt(cdCalc.charAt(i), 16);\n          } // If the last digit of the calc is 0, the check digit is 0\n\n\n          return sum % 10 === 0 ? cd === '0' : // Subtract it from the next highest 10s number (64 goes to 70) and subtract the sum\n          // Double it and turn it into a hex char\n          cd === ((Math.floor((sum + 10) / 10) * 10 - sum) * 2).toString(16);\n        // 14 digit hex representation (no check digit)\n\n        case /^[0-9A-F]{14}$/i.test(value): // 14 digit hex representation + dashes or spaces (no check digit)\n\n        case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(value): // 18 digit decimal representation (no check digit)\n\n        case /^\\d{18}$/.test(value): // 18 digit decimal representation + dashes or spaces (no check digit)\n\n        case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}$/.test(value):\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.notEmpty = $.extend($.fn.bootstrapValidator.i18n.notEmpty || {}, {\n    'default': 'Please enter a value'\n  });\n  $.fn.bootstrapValidator.validators.notEmpty = {\n    enableByHtml5: function enableByHtml5($field) {\n      var required = $field.attr('required') + '';\n      return 'required' === required || 'true' === required;\n    },\n\n    /**\r\n     * Check if input value is empty or not\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var type = $field.attr('type');\n\n      if ('radio' === type || 'checkbox' === type) {\n        return validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length > 0;\n      }\n\n      return $.trim($field.val()) !== '';\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.numeric = $.extend($.fn.bootstrapValidator.i18n.numeric || {}, {\n    'default': 'Please enter a valid float number'\n  });\n  $.fn.bootstrapValidator.validators.numeric = {\n    html5Attributes: {\n      message: 'message',\n      separator: 'separator'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      return 'number' === $field.attr('type') && $field.attr('step') !== undefined && $field.attr('step') % 1 !== 0;\n    },\n\n    /**\r\n     * Validate decimal number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - separator: The decimal separator. Can be \".\" (default), \",\"\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var separator = options.separator || '.';\n\n      if (separator !== '.') {\n        value = value.replace(separator, '.');\n      }\n\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.phone = $.extend($.fn.bootstrapValidator.i18n.phone || {}, {\n    'default': 'Please enter a valid phone number',\n    countryNotSupported: 'The country code %s is not supported',\n    country: 'Please enter a valid phone number in %s',\n    countries: {\n      ES: 'Spain',\n      FR: 'France',\n      GB: 'United Kingdom',\n      US: 'USA'\n    }\n  });\n  $.fn.bootstrapValidator.validators.phone = {\n    html5Attributes: {\n      message: 'message',\n      country: 'country'\n    },\n    // The supported countries\n    COUNTRY_CODES: ['ES', 'FR', 'GB', 'US'],\n\n    /**\r\n     * Return true if the input value contains a valid phone number for the country\r\n     * selected in the options\r\n     *\r\n     * @param {BootstrapValidator} validator Validate plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - country: The ISO-3166 country code. It can be\r\n     *      - A country code\r\n     *      - Name of field which its value defines the country code\r\n     *      - Name of callback function that returns the country code\r\n     *      - A callback function that returns the country code\r\n     *\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var country = options.country;\n\n      if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\n        // Try to determine the country\n        country = validator.getDynamicOption($field, country);\n      }\n\n      if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.phone.countryNotSupported, country)\n        };\n      }\n\n      var isValid = true;\n\n      switch (country.toUpperCase()) {\n        case 'ES':\n          // http://regex101.com/r/rB9mA9/1\n          value = $.trim(value);\n          isValid = /^(?:(?:(?:\\+|00)34\\D?))?(?:9|6)(?:\\d\\D?){8}$/.test(value);\n          break;\n\n        case 'FR':\n          // http://regexr.com/395dq\n          value = $.trim(value);\n          isValid = /^(?:(?:(?:\\+|00)33\\D?(?:\\D?\\(0\\)\\D?)?)|0){1}[1-9]{1}(?:\\D?\\d{2}){4}$/.test(value);\n          break;\n\n        case 'GB':\n          // http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\n          // Test: http://regexr.com/38uhv\n          value = $.trim(value);\n          isValid = /^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/.test(value);\n          break;\n\n        case 'US':\n        /* falls through */\n\n        default:\n          // Make sure US phone numbers have 10 digits\n          // May start with 1, +1, or 1-; should discard\n          // Area code may be delimited with (), & sections may be delimited with . or -\n          // Test: http://regexr.com/38mqi\n          value = value.replace(/\\D/g, '');\n          isValid = /^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/.test(value) && value.length === 10;\n          break;\n      }\n\n      return {\n        valid: isValid,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.phone.country, $.fn.bootstrapValidator.i18n.phone.countries[country])\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.regexp = $.extend($.fn.bootstrapValidator.i18n.regexp || {}, {\n    'default': 'Please enter a value matching the pattern'\n  });\n  $.fn.bootstrapValidator.validators.regexp = {\n    html5Attributes: {\n      message: 'message',\n      regexp: 'regexp'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      var pattern = $field.attr('pattern');\n\n      if (pattern) {\n        return {\n          regexp: pattern\n        };\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Check if the element value matches given regular expression\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of the following key:\r\n     * - regexp: The regular expression you need to check\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var regexp = 'string' === typeof options.regexp ? new RegExp(options.regexp) : options.regexp;\n      return regexp.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.remote = $.extend($.fn.bootstrapValidator.i18n.remote || {}, {\n    'default': 'Please enter a valid value'\n  });\n  $.fn.bootstrapValidator.validators.remote = {\n    html5Attributes: {\n      message: 'message',\n      url: 'url',\n      name: 'name'\n    },\n\n    /**\r\n     * Request a remote server to check the input value\r\n     *\r\n     * @param {BootstrapValidator} validator Plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - url {String|Function}\r\n     * - type {String} [optional] Can be GET or POST (default)\r\n     * - data {Object|Function} [optional]: By default, it will take the value\r\n     *  {\r\n     *      <fieldName>: <fieldValue>\r\n     *  }\r\n     * - name {String} [optional]: Override the field name for the request.\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Deferred}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var name = $field.attr('data-bv-field'),\n          data = options.data || {},\n          url = options.url,\n          type = options.type || 'POST'; // Support dynamic data\n\n      if ('function' === typeof data) {\n        data = data.call(this, validator);\n      } // Support dynamic url\n\n\n      if ('function' === typeof url) {\n        url = url.call(this, validator);\n      }\n\n      data[options.name || name] = value;\n      var dfd = new $.Deferred();\n      var xhr = $.ajax({\n        type: type,\n        url: url,\n        dataType: 'json',\n        data: data\n      });\n      xhr.then(function (response) {\n        dfd.resolve($field, 'remote', response.valid === true || response.valid === 'true', response.message ? response.message : null);\n      });\n      dfd.fail(function () {\n        xhr.abort();\n      });\n      return dfd;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.rtn = $.extend($.fn.bootstrapValidator.i18n.rtn || {}, {\n    'default': 'Please enter a valid RTN number'\n  });\n  $.fn.bootstrapValidator.validators.rtn = {\n    /**\r\n     * Validate a RTN (Routing transit number)\r\n     * Examples:\r\n     * - Valid: 021200025, 789456124\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Routing_transit_number\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      if (!/^\\d{9}$/.test(value)) {\n        return false;\n      }\n\n      var sum = 0;\n\n      for (var i = 0; i < value.length; i += 3) {\n        sum += parseInt(value.charAt(i), 10) * 3 + parseInt(value.charAt(i + 1), 10) * 7 + parseInt(value.charAt(i + 2), 10);\n      }\n\n      return sum !== 0 && sum % 10 === 0;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.sedol = $.extend($.fn.bootstrapValidator.i18n.sedol || {}, {\n    'default': 'Please enter a valid SEDOL number'\n  });\n  $.fn.bootstrapValidator.validators.sedol = {\n    /**\r\n     * Validate a SEDOL (Stock Exchange Daily Official List)\r\n     * Examples:\r\n     * - Valid: 0263494, B0WNLY7\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/SEDOL\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      value = value.toUpperCase();\n\n      if (!/^[0-9A-Z]{7}$/.test(value)) {\n        return false;\n      }\n\n      var sum = 0,\n          weight = [1, 3, 1, 7, 3, 9, 1],\n          length = value.length;\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += weight[i] * parseInt(value.charAt(i), 36);\n      }\n\n      sum = (10 - sum % 10) % 10;\n      return sum + '' === value.charAt(length - 1);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.siren = $.extend($.fn.bootstrapValidator.i18n.siren || {}, {\n    'default': 'Please enter a valid SIREN number'\n  });\n  $.fn.bootstrapValidator.validators.siren = {\n    /**\r\n     * Check if a string is a siren number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n           * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      if (!/^\\d{9}$/.test(value)) {\n        return false;\n      }\n\n      return $.fn.bootstrapValidator.helpers.luhn(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.siret = $.extend($.fn.bootstrapValidator.i18n.siret || {}, {\n    'default': 'Please enter a valid SIRET number'\n  });\n  $.fn.bootstrapValidator.validators.siret = {\n    /**\r\n     * Check if a string is a siret number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var sum = 0,\n          length = value.length,\n          tmp;\n\n      for (var i = 0; i < length; i++) {\n        tmp = parseInt(value.charAt(i), 10);\n\n        if (i % 2 === 0) {\n          tmp = tmp * 2;\n\n          if (tmp > 9) {\n            tmp -= 9;\n          }\n        }\n\n        sum += tmp;\n      }\n\n      return sum % 10 === 0;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.step = $.extend($.fn.bootstrapValidator.i18n.step || {}, {\n    'default': 'Please enter a valid step of %s'\n  });\n  $.fn.bootstrapValidator.validators.step = {\n    html5Attributes: {\n      message: 'message',\n      base: 'baseValue',\n      step: 'step'\n    },\n\n    /**\r\n     * Return true if the input value is valid step one\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Can consist of the following keys:\r\n     * - baseValue: The base value\r\n     * - step: The step\r\n     * - message: The invalid message\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      options = $.extend({}, {\n        baseValue: 0,\n        step: 1\n      }, options);\n      value = parseFloat(value);\n\n      if (!$.isNumeric(value)) {\n        return false;\n      }\n\n      var round = function round(x, precision) {\n        var m = Math.pow(10, precision);\n        x = x * m;\n        var sign = x > 0 | -(x < 0),\n            isHalf = x % 1 === 0.5 * sign;\n\n        if (isHalf) {\n          return (Math.floor(x) + (sign > 0)) / m;\n        } else {\n          return Math.round(x) / m;\n        }\n      },\n          floatMod = function floatMod(x, y) {\n        if (y === 0.0) {\n          return 1.0;\n        }\n\n        var dotX = (x + '').split('.'),\n            dotY = (y + '').split('.'),\n            precision = (dotX.length === 1 ? 0 : dotX[1].length) + (dotY.length === 1 ? 0 : dotY[1].length);\n        return round(x - y * Math.floor(x / y), precision);\n      };\n\n      var mod = floatMod(value - options.baseValue, options.step);\n      return {\n        valid: mod === 0.0 || mod === options.step,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.step['default'], [options.step])\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.stringCase = $.extend($.fn.bootstrapValidator.i18n.stringCase || {}, {\n    'default': 'Please enter only lowercase characters',\n    upper: 'Please enter only uppercase characters'\n  });\n  $.fn.bootstrapValidator.validators.stringCase = {\n    html5Attributes: {\n      message: 'message',\n      'case': 'case'\n    },\n\n    /**\r\n     * Check if a string is a lower or upper case one\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - case: Can be 'lower' (default) or 'upper'\r\n     * @returns {Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var stringCase = (options['case'] || 'lower').toLowerCase();\n      return {\n        valid: 'upper' === stringCase ? value === value.toUpperCase() : value === value.toLowerCase(),\n        message: options.message || ('upper' === stringCase ? $.fn.bootstrapValidator.i18n.stringCase.upper : $.fn.bootstrapValidator.i18n.stringCase['default'])\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.stringLength = $.extend($.fn.bootstrapValidator.i18n.stringLength || {}, {\n    'default': 'Please enter a value with valid length',\n    less: 'Please enter less than %s characters',\n    more: 'Please enter more than %s characters',\n    between: 'Please enter value between %s and %s characters long'\n  });\n  $.fn.bootstrapValidator.validators.stringLength = {\n    html5Attributes: {\n      message: 'message',\n      min: 'min',\n      max: 'max'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      var maxLength = $field.attr('maxlength');\n\n      if (maxLength) {\n        return {\n          max: parseInt(maxLength, 10)\n        };\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Check if the length of element value is less or more than given number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of following keys:\r\n     * - min\r\n     * - max\r\n     * At least one of two keys is required\r\n     * The min, max keys define the number which the field value compares to. min, max can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - message: The invalid message\r\n     * @returns {Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\n          max = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\n          length = value.length,\n          isValid = true,\n          message = options.message || $.fn.bootstrapValidator.i18n.stringLength['default'];\n\n      if (min && length < parseInt(min, 10) || max && length > parseInt(max, 10)) {\n        isValid = false;\n      }\n\n      switch (true) {\n        case !!min && !!max:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\n          break;\n\n        case !!min:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.more, parseInt(min, 10));\n          break;\n\n        case !!max:\n          message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.less, parseInt(max, 10));\n          break;\n\n        default:\n          break;\n      }\n\n      return {\n        valid: isValid,\n        message: message\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.uri = $.extend($.fn.bootstrapValidator.i18n.uri || {}, {\n    'default': 'Please enter a valid URI'\n  });\n  $.fn.bootstrapValidator.validators.uri = {\n    html5Attributes: {\n      message: 'message',\n      allowlocal: 'allowLocal'\n    },\n    enableByHtml5: function enableByHtml5($field) {\n      return 'url' === $field.attr('type');\n    },\n\n    /**\r\n     * Return true if the input value is a valid URL\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options\r\n     * - message: The error message\r\n     * - allowLocal: Allow the private and local network IP. Default to false\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Credit to https://gist.github.com/dperini/729294\n      //\n      // Regular Expression for URL validation\n      //\n      // Author: Diego Perini\n      // Updated: 2010/12/05\n      //\n      // the regular expression composed & commented\n      // could be easily tweaked for RFC compliance,\n      // it was expressly modified to fit & satisfy\n      // these test for an URL shortener:\n      //\n      //   http://mathiasbynens.be/demo/url-regex\n      //\n      // Notes on possible differences from a standard/generic validation:\n      //\n      // - utf-8 char class take in consideration the full Unicode range\n      // - TLDs are mandatory unless `allowLocal` is true\n      // - protocols have been restricted to ftp, http and https only as requested\n      //\n      // Changes:\n      //\n      // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\n      //   first and last IP address of each class is considered invalid\n      //   (since they are broadcast/network addresses)\n      //\n      // - Added exclusion of private, reserved and/or local networks ranges\n      //   unless `allowLocal` is true\n      //\n\n\n      var allowLocal = options.allowLocal === true || options.allowLocal === 'true',\n          urlExp = new RegExp(\"^\" + // protocol identifier\n      \"(?:(?:https?|ftp)://)\" + // user:pass authentication\n      \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" + ( // IP address exclusion\n      // private & local networks\n      allowLocal ? '' : \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" + \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" + \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\") + // IP address dotted notation octets\n      // excludes loopback network 0.0.0.0\n      // excludes reserved space >= 224.0.0.0\n      // excludes network & broadcast addresses\n      // (first & last IP address of each class)\n      \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" + // host name\n      \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" + // domain name\n      \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" + // TLD identifier\n      \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" + ( // Allow intranet sites (no TLD) if `allowLocal` is true\n      allowLocal ? '?' : '') + \")\" + // port number\n      \"(?::\\\\d{2,5})?\" + // resource path\n      \"(?:/[^\\\\s]*)?\" + \"$\", \"i\");\n      return urlExp.test(value);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.uuid = $.extend($.fn.bootstrapValidator.i18n.uuid || {}, {\n    'default': 'Please enter a valid UUID number',\n    version: 'Please enter a valid UUID version %s number'\n  });\n  $.fn.bootstrapValidator.validators.uuid = {\n    html5Attributes: {\n      message: 'message',\n      version: 'version'\n    },\n\n    /**\r\n     * Return true if and only if the input value is a valid UUID string\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - version: Can be 3, 4, 5, null\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\n\n\n      var patterns = {\n        '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n        '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n      },\n          version = options.version ? options.version + '' : 'all';\n      return {\n        valid: null === patterns[version] ? true : patterns[version].test(value),\n        message: options.version ? $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.uuid.version, options.version) : options.message || $.fn.bootstrapValidator.i18n.uuid['default']\n      };\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.vat = $.extend($.fn.bootstrapValidator.i18n.vat || {}, {\n    'default': 'Please enter a valid VAT number',\n    countryNotSupported: 'The country code %s is not supported',\n    country: 'Please enter a valid %s VAT number',\n    countries: {\n      AT: 'Austrian',\n      BE: 'Belgian',\n      BG: 'Bulgarian',\n      CH: 'Swiss',\n      CY: 'Cypriot',\n      CZ: 'Czech',\n      DE: 'German',\n      DK: 'Danish',\n      EE: 'Estonian',\n      ES: 'Spanish',\n      FI: 'Finnish',\n      FR: 'French',\n      GB: 'United Kingdom',\n      GR: 'Greek',\n      EL: 'Greek',\n      HU: 'Hungarian',\n      HR: 'Croatian',\n      IE: 'Irish',\n      IT: 'Italian',\n      LT: 'Lithuanian',\n      LU: 'Luxembourg',\n      LV: 'Latvian',\n      MT: 'Maltese',\n      NL: 'Dutch',\n      NO: 'Norwegian',\n      PL: 'Polish',\n      PT: 'Portuguese',\n      RO: 'Romanian',\n      RU: 'Russian',\n      RS: 'Serbian',\n      SE: 'Swedish',\n      SI: 'Slovenian',\n      SK: 'Slovak'\n    }\n  });\n  $.fn.bootstrapValidator.validators.vat = {\n    html5Attributes: {\n      message: 'message',\n      country: 'country'\n    },\n    // Supported country codes\n    COUNTRY_CODES: ['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'EL', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SK', 'SI', 'ES', 'SE', 'CH', 'GB'],\n\n    /**\r\n     * Validate an European VAT number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - country: The ISO 3166-1 country code. It can be\r\n     *      - One of country code defined in COUNTRY_CODES\r\n     *      - Name of field which its value defines the country code\r\n     *      - Name of callback function that returns the country code\r\n     *      - A callback function that returns the country code\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      }\n\n      var country = options.country;\n\n      if (!country) {\n        country = value.substr(0, 2);\n      } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n        // Determine the country code\n        country = validator.getDynamicOption($field, country);\n      }\n\n      if ($.inArray(country, this.COUNTRY_CODES) === -1) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.vat.countryNotSupported, country)\n        };\n      }\n\n      var method = ['_', country.toLowerCase()].join('');\n      return this[method](value) ? true : {\n        valid: false,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.vat.country, $.fn.bootstrapValidator.i18n.vat.countries[country.toUpperCase()])\n      };\n    },\n    // VAT validators\n\n    /**\r\n     * Validate Austrian VAT number\r\n     * Example:\r\n     * - Valid: ATU13585627\r\n     * - Invalid: ATU13585626\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _at: function _at(value) {\n      if (!/^ATU[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(3);\n      var sum = 0,\n          weight = [1, 2, 1, 2, 1, 2, 1],\n          temp = 0;\n\n      for (var i = 0; i < 7; i++) {\n        temp = parseInt(value.charAt(i), 10) * weight[i];\n\n        if (temp > 9) {\n          temp = Math.floor(temp / 10) + temp % 10;\n        }\n\n        sum += temp;\n      }\n\n      sum = 10 - (sum + 4) % 10;\n\n      if (sum === 10) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(7, 1);\n    },\n\n    /**\r\n     * Validate Belgian VAT number\r\n     * Example:\r\n     * - Valid: BE0428759497\r\n     * - Invalid: BE431150351\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _be: function _be(value) {\n      if (!/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      if (value.length === 9) {\n        value = '0' + value;\n      }\n\n      if (value.substr(1, 1) === '0') {\n        return false;\n      }\n\n      var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\n      return sum % 97 === 0;\n    },\n\n    /**\r\n     * Validate Bulgarian VAT number\r\n     * Example:\r\n     * - Valid: BG175074752,\r\n     * BG7523169263, BG8032056031,\r\n     * BG7542011030,\r\n     * BG7111042925\r\n     * - Invalid: BG175074753, BG7552A10004, BG7111042922\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _bg: function _bg(value) {\n      if (!/^BG[0-9]{9,10}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          i = 0; // Legal entities\n\n      if (value.length === 9) {\n        for (i = 0; i < 8; i++) {\n          sum += parseInt(value.charAt(i), 10) * (i + 1);\n        }\n\n        sum = sum % 11;\n\n        if (sum === 10) {\n          sum = 0;\n\n          for (i = 0; i < 8; i++) {\n            sum += parseInt(value.charAt(i), 10) * (i + 3);\n          }\n        }\n\n        sum = sum % 10;\n        return sum + '' === value.substr(8);\n      } // Physical persons, foreigners and others\n      else if (value.length === 10) {\n          // Validate Bulgarian national identification numbers\n          var egn = function egn(value) {\n            // Check the birth date\n            var year = parseInt(value.substr(0, 2), 10) + 1900,\n                month = parseInt(value.substr(2, 2), 10),\n                day = parseInt(value.substr(4, 2), 10);\n\n            if (month > 40) {\n              year += 100;\n              month -= 40;\n            } else if (month > 20) {\n              year -= 100;\n              month -= 20;\n            }\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n              return false;\n            }\n\n            var sum = 0,\n                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n\n            for (var i = 0; i < 9; i++) {\n              sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = sum % 11 % 10;\n            return sum + '' === value.substr(9, 1);\n          },\n              // Validate Bulgarian personal number of a foreigner\n          pnf = function pnf(value) {\n            var sum = 0,\n                weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n\n            for (var i = 0; i < 9; i++) {\n              sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = sum % 10;\n            return sum + '' === value.substr(9, 1);\n          },\n              // Finally, consider it as a VAT number\n          vat = function vat(value) {\n            var sum = 0,\n                weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n\n            for (var i = 0; i < 9; i++) {\n              sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = 11 - sum % 11;\n\n            if (sum === 10) {\n              return false;\n            }\n\n            if (sum === 11) {\n              sum = 0;\n            }\n\n            return sum + '' === value.substr(9, 1);\n          };\n\n          return egn(value) || pnf(value) || vat(value);\n        }\n\n      return false;\n    },\n\n    /**\r\n     * Validate Swiss VAT number\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _ch: function _ch(value) {\n      if (!/^CHE[0-9]{9}(MWST)?$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(3);\n      var sum = 0,\n          weight = [5, 4, 3, 2, 7, 6, 5, 4];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum === 10) {\n        return false;\n      }\n\n      if (sum === 11) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Cypriot VAT number\r\n     * Examples:\r\n     * - Valid: CY10259033P\r\n     * - Invalid: CY10259033Z\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _cy: function _cy(value) {\n      if (!/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2); // Do not allow to start with \"12\"\n\n      if (value.substr(0, 2) === '12') {\n        return false;\n      } // Extract the next digit and multiply by the counter.\n\n\n      var sum = 0,\n          translation = {\n        '0': 1,\n        '1': 0,\n        '2': 5,\n        '3': 7,\n        '4': 9,\n        '5': 13,\n        '6': 15,\n        '7': 17,\n        '8': 19,\n        '9': 21\n      };\n\n      for (var i = 0; i < 8; i++) {\n        var temp = parseInt(value.charAt(i), 10);\n\n        if (i % 2 === 0) {\n          temp = translation[temp + ''];\n        }\n\n        sum += temp;\n      }\n\n      sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\n      return sum + '' === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Czech Republic VAT number\r\n     * Can be:\r\n     * i) Legal entities (8 digit numbers)\r\n     * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\r\n     * iii) Individuals without a RC (9 digit numbers beginning with 6)\r\n     *\r\n     * Examples:\r\n     * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\r\n     * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _cz: function _cz(value) {\n      if (!/^CZ[0-9]{8,10}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          i = 0;\n\n      if (value.length === 8) {\n        // Do not allow to start with '9'\n        if (value.charAt(0) + '' === '9') {\n          return false;\n        }\n\n        sum = 0;\n\n        for (i = 0; i < 7; i++) {\n          sum += parseInt(value.charAt(i), 10) * (8 - i);\n        }\n\n        sum = 11 - sum % 11;\n\n        if (sum === 10) {\n          sum = 0;\n        }\n\n        if (sum === 11) {\n          sum = 1;\n        }\n\n        return sum + '' === value.substr(7, 1);\n      } else if (value.length === 9 && value.charAt(0) + '' === '6') {\n        sum = 0; // Skip the first (which is 6)\n\n        for (i = 0; i < 7; i++) {\n          sum += parseInt(value.charAt(i + 1), 10) * (8 - i);\n        }\n\n        sum = 11 - sum % 11;\n\n        if (sum === 10) {\n          sum = 0;\n        }\n\n        if (sum === 11) {\n          sum = 1;\n        }\n\n        sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\n        return sum + '' === value.substr(8, 1);\n      } else if (value.length === 9 || value.length === 10) {\n        // Validate Czech birth number (Rodné číslo), which is also national identifier\n        var year = 1900 + parseInt(value.substr(0, 2), 10),\n            month = parseInt(value.substr(2, 2), 10) % 50 % 20,\n            day = parseInt(value.substr(4, 2), 10);\n\n        if (value.length === 9) {\n          if (year >= 1980) {\n            year -= 100;\n          }\n\n          if (year > 1953) {\n            return false;\n          }\n        } else if (year < 1954) {\n          year += 100;\n        }\n\n        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n          return false;\n        } // Check that the birth date is not in the future\n\n\n        if (value.length === 10) {\n          var check = parseInt(value.substr(0, 9), 10) % 11;\n\n          if (year < 1985) {\n            check = check % 10;\n          }\n\n          return check + '' === value.substr(9, 1);\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Validate German VAT number\r\n     * Examples:\r\n     * - Valid: DE136695976\r\n     * - Invalid: DE136695978\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _de: function _de(value) {\n      if (!/^DE[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      return $.fn.bootstrapValidator.helpers.mod11And10(value);\n    },\n\n    /**\r\n     * Validate Danish VAT number\r\n     * Example:\r\n     * - Valid: DK13585628\r\n     * - Invalid: DK13585627\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _dk: function _dk(value) {\n      if (!/^DK[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [2, 7, 6, 5, 4, 3, 2, 1];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 11 === 0;\n    },\n\n    /**\r\n     * Validate Estonian VAT number\r\n     * Examples:\r\n     * - Valid: EE100931558, EE100594102\r\n     * - Invalid: EE100594103\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _ee: function _ee(value) {\n      if (!/^EE[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\n\n      for (var i = 0; i < 9; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 10 === 0;\n    },\n\n    /**\r\n     * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\r\n     * Can be:\r\n     * i) DNI (Documento nacional de identidad), for Spaniards\r\n     * ii) NIE (Número de Identificación de Extranjeros), for foreigners\r\n     * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\r\n     *\r\n     * Examples:\r\n     * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\r\n     * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _es: function _es(value) {\n      if (!/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      var dni = function dni(value) {\n        var check = parseInt(value.substr(0, 8), 10);\n        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n        return check + '' === value.substr(8, 1);\n      },\n          nie = function nie(value) {\n        var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\n        check = parseInt(check, 10);\n        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n        return check + '' === value.substr(8, 1);\n      },\n          cif = function cif(value) {\n        var first = value.charAt(0),\n            check;\n\n        if ('KLM'.indexOf(first) !== -1) {\n          // K: Spanish younger than 14 year old\n          // L: Spanish living outside Spain without DNI\n          // M: Granted the tax to foreigners who have no NIE\n          check = parseInt(value.substr(1, 8), 10);\n          check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n          return check + '' === value.substr(8, 1);\n        } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\n          var sum = 0,\n              weight = [2, 1, 2, 1, 2, 1, 2],\n              temp = 0;\n\n          for (var i = 0; i < 7; i++) {\n            temp = parseInt(value.charAt(i + 1), 10) * weight[i];\n\n            if (temp > 9) {\n              temp = Math.floor(temp / 10) + temp % 10;\n            }\n\n            sum += temp;\n          }\n\n          sum = 10 - sum % 10;\n          return sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1);\n        }\n\n        return false;\n      };\n\n      var first = value.charAt(0);\n\n      if (/^[0-9]$/.test(first)) {\n        return dni(value);\n      } else if (/^[XYZ]$/.test(first)) {\n        return nie(value);\n      } else {\n        return cif(value);\n      }\n    },\n\n    /**\r\n     * Validate Finnish VAT number\r\n     * Examples:\r\n     * - Valid: FI20774740\r\n     * - Invalid: FI20774741\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _fi: function _fi(value) {\n      if (!/^FI[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [7, 9, 10, 5, 8, 4, 2, 1];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 11 === 0;\n    },\n\n    /**\r\n     * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\r\n     * It's constructed by a SIREN number, prefixed by two characters.\r\n     *\r\n     * Examples:\r\n     * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\r\n     * - Invalid: FR84323140391\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _fr: function _fr(value) {\n      if (!/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      if (!$.fn.bootstrapValidator.helpers.luhn(value.substr(2))) {\n        return false;\n      }\n\n      if (/^[0-9]{2}$/.test(value.substr(0, 2))) {\n        // First two characters are digits\n        return value.substr(0, 2) === parseInt(value.substr(2) + '12', 10) % 97 + '';\n      } else {\n        // The first characters cann't be O and I\n        var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\n            check; // First one is digit\n\n        if (/^[0-9]{1}$/.test(value.charAt(0))) {\n          check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\n        } else {\n          check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\n        }\n\n        return (parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11 === check % 11;\n      }\n    },\n\n    /**\r\n     * Validate United Kingdom VAT number\r\n     * Example:\r\n     * - Valid: GB980780684\r\n     * - Invalid: GB802311781\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _gb: function _gb(value) {\n      if (!/^GB[0-9]{9}$/.test(value)\n      /* Standard */\n      && !/^GB[0-9]{12}$/.test(value)\n      /* Branches */\n      && !/^GBGD[0-9]{3}$/.test(value)\n      /* Government department */\n      && !/^GBHA[0-9]{3}$/.test(value)\n      /* Health authority */\n      && !/^GB(GD|HA)8888[0-9]{5}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var length = value.length;\n\n      if (length === 5) {\n        var firstTwo = value.substr(0, 2),\n            lastThree = parseInt(value.substr(2), 10);\n        return 'GD' === firstTwo && lastThree < 500 || 'HA' === firstTwo && lastThree >= 500;\n      } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\n        if ('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500 || 'HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500) {\n          return false;\n        }\n\n        return parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10);\n      } else if (length === 9 || length === 12) {\n        var sum = 0,\n            weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\n\n        for (var i = 0; i < 9; i++) {\n          sum += parseInt(value.charAt(i), 10) * weight[i];\n        }\n\n        sum = sum % 97;\n\n        if (parseInt(value.substr(0, 3), 10) >= 100) {\n          return sum === 0 || sum === 42 || sum === 55;\n        } else {\n          return sum === 0;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Validate Greek VAT number\r\n     * Examples:\r\n     * - Valid: GR023456780, EL094259216\r\n     * - Invalid: EL123456781\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _gr: function _gr(value) {\n      if (!/^GR[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      if (value.length === 8) {\n        value = '0' + value;\n      }\n\n      var sum = 0,\n          weight = [256, 128, 64, 32, 16, 8, 4, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11 % 10;\n      return sum + '' === value.substr(8, 1);\n    },\n    // EL is traditionally prefix of Greek VAT numbers\n    _el: function _el(value) {\n      if (!/^EL[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = 'GR' + value.substr(2);\n      return this._gr(value);\n    },\n\n    /**\r\n     * Validate Hungarian VAT number\r\n     * Examples:\r\n     * - Valid: HU12892312\r\n     * - Invalid: HU12892313\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _hu: function _hu(value) {\n      if (!/^HU[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [9, 7, 3, 1, 9, 7, 3, 1];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 10 === 0;\n    },\n\n    /**\r\n     * Validate Croatian VAT number\r\n     * Examples:\r\n     * - Valid: HR33392005961\r\n     * - Invalid: HR33392005962\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _hr: function _hr(value) {\n      if (!/^HR[0-9]{11}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      return $.fn.bootstrapValidator.helpers.mod11And10(value);\n    },\n\n    /**\r\n     * Validate Irish VAT number\r\n     * Examples:\r\n     * - Valid: IE6433435F, IE6433435OA, IE8D79739I\r\n     * - Invalid: IE8D79738J\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _ie: function _ie(value) {\n      if (!/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      var getCheckDigit = function getCheckDigit(value) {\n        while (value.length < 7) {\n          value = '0' + value;\n        }\n\n        var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\n            sum = 0;\n\n        for (var i = 0; i < 7; i++) {\n          sum += parseInt(value.charAt(i), 10) * (8 - i);\n        }\n\n        sum += 9 * alphabet.indexOf(value.substr(7));\n        return alphabet[sum % 23];\n      }; // The first 7 characters are digits\n\n\n      if (/^[0-9]+$/.test(value.substr(0, 7))) {\n        // New system\n        return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\n      } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\n        // Old system\n        return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Validate Italian VAT number, which consists of 11 digits.\r\n     * - First 7 digits are a company identifier\r\n     * - Next 3 are the province of residence\r\n     * - The last one is a check digit\r\n     *\r\n     * Examples:\r\n     * - Valid: IT00743110157\r\n     * - Invalid: IT00743110158\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _it: function _it(value) {\n      if (!/^IT[0-9]{11}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n\n      if (parseInt(value.substr(0, 7), 10) === 0) {\n        return false;\n      }\n\n      var lastThree = parseInt(value.substr(7, 3), 10);\n\n      if (lastThree < 1 || lastThree > 201 && lastThree !== 999 && lastThree !== 888) {\n        return false;\n      }\n\n      return $.fn.bootstrapValidator.helpers.luhn(value);\n    },\n\n    /**\r\n     * Validate Lithuanian VAT number\r\n     * It can be:\r\n     * - 9 digits, for legal entities\r\n     * - 12 digits, for temporarily registered taxpayers\r\n     *\r\n     * Examples:\r\n     * - Valid: LT119511515, LT100001919017, LT100004801610\r\n     * - Invalid: LT100001919018\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _lt: function _lt(value) {\n      if (!/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var length = value.length,\n          sum = 0,\n          i;\n\n      for (i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * (1 + i % 9);\n      }\n\n      var check = sum % 11;\n\n      if (check === 10) {\n        sum = 0;\n\n        for (i = 0; i < length - 1; i++) {\n          sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\n        }\n      }\n\n      check = check % 11 % 10;\n      return check + '' === value.charAt(length - 1);\n    },\n\n    /**\r\n     * Validate Luxembourg VAT number\r\n     * Examples:\r\n     * - Valid: LU15027442\r\n     * - Invalid: LU15027443\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _lu: function _lu(value) {\n      if (!/^LU[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      return parseInt(value.substr(0, 6), 10) % 89 + '' === value.substr(6, 2);\n    },\n\n    /**\r\n     * Validate Latvian VAT number\r\n     * Examples:\r\n     * - Valid: LV40003521600, LV16117519997\r\n     * - Invalid: LV40003521601, LV16137519997\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _lv: function _lv(value) {\n      if (!/^LV[0-9]{11}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var first = parseInt(value.charAt(0), 10),\n          sum = 0,\n          weight = [],\n          i,\n          length = value.length;\n\n      if (first > 3) {\n        // Legal entity\n        sum = 0;\n        weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\n\n        for (i = 0; i < length; i++) {\n          sum += parseInt(value.charAt(i), 10) * weight[i];\n        }\n\n        sum = sum % 11;\n        return sum === 3;\n      } else {\n        // Check birth date\n        var day = parseInt(value.substr(0, 2), 10),\n            month = parseInt(value.substr(2, 2), 10),\n            year = parseInt(value.substr(4, 2), 10);\n        year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\n\n        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n          return false;\n        } // Check personal code\n\n\n        sum = 0;\n        weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n\n        for (i = 0; i < length - 1; i++) {\n          sum += parseInt(value.charAt(i), 10) * weight[i];\n        }\n\n        sum = (sum + 1) % 11 % 10;\n        return sum + '' === value.charAt(length - 1);\n      }\n    },\n\n    /**\r\n     * Validate Maltese VAT number\r\n     * Examples:\r\n     * - Valid: MT11679112\r\n     * - Invalid: MT11679113\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _mt: function _mt(value) {\n      if (!/^MT[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [3, 4, 6, 7, 8, 9, 10, 1];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 37 === 0;\n    },\n\n    /**\r\n     * Validate Dutch VAT number\r\n     * Examples:\r\n     * - Valid: NL004495445B01\r\n     * - Invalid: NL123456789B90\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _nl: function _nl(value) {\n      if (!/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [9, 8, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = sum % 11;\n\n      if (sum > 9) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Norwegian VAT number\r\n     *\r\n     * @see http://www.brreg.no/english/coordination/number.html\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _no: function _no(value) {\n      if (!/^NO[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [3, 2, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum === 11) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Polish VAT number\r\n     * Examples:\r\n     * - Valid: PL8567346215\r\n     * - Invalid: PL8567346216\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _pl: function _pl(value) {\n      if (!/^PL[0-9]{10}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\n\n      for (var i = 0; i < 10; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      return sum % 11 === 0;\n    },\n\n    /**\r\n     * Validate Portuguese VAT number\r\n     * Examples:\r\n     * - Valid: PT501964843\r\n     * - Invalid: PT501964842\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _pt: function _pt(value) {\n      if (!/^PT[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [9, 8, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 8; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum > 9) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(8, 1);\n    },\n\n    /**\r\n     * Validate Romanian VAT number\r\n     * Examples:\r\n     * - Valid: RO18547290\r\n     * - Invalid: RO18547291\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _ro: function _ro(value) {\n      if (!/^RO[1-9][0-9]{1,9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var length = value.length,\n          weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\n          sum = 0;\n\n      for (var i = 0; i < length - 1; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 10 * sum % 11 % 10;\n      return sum + '' === value.substr(length - 1, 1);\n    },\n\n    /**\r\n     * Validate Russian VAT number (Taxpayer Identification Number - INN)\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _ru: function _ru(value) {\n      if (!/^RU([0-9]{9}|[0-9]{12})$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var i = 0;\n\n      if (value.length === 10) {\n        var sum = 0,\n            weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n        for (i = 0; i < 10; i++) {\n          sum += parseInt(value.charAt(i), 10) * weight[i];\n        }\n\n        sum = sum % 11;\n\n        if (sum > 9) {\n          sum = sum % 10;\n        }\n\n        return sum + '' === value.substr(9, 1);\n      } else if (value.length === 12) {\n        var sum1 = 0,\n            weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            sum2 = 0,\n            weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n        for (i = 0; i < 11; i++) {\n          sum1 += parseInt(value.charAt(i), 10) * weight1[i];\n          sum2 += parseInt(value.charAt(i), 10) * weight2[i];\n        }\n\n        sum1 = sum1 % 11;\n\n        if (sum1 > 9) {\n          sum1 = sum1 % 10;\n        }\n\n        sum2 = sum2 % 11;\n\n        if (sum2 > 9) {\n          sum2 = sum2 % 10;\n        }\n\n        return sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1);\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Validate Serbian VAT number\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _rs: function _rs(value) {\n      if (!/^RS[0-9]{9}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 10,\n          temp = 0;\n\n      for (var i = 0; i < 8; i++) {\n        temp = (parseInt(value.charAt(i), 10) + sum) % 10;\n\n        if (temp === 0) {\n          temp = 10;\n        }\n\n        sum = 2 * temp % 11;\n      }\n\n      return (sum + parseInt(value.substr(8, 1), 10)) % 10 === 1;\n    },\n\n    /**\r\n     * Validate Swedish VAT number\r\n     * Examples:\r\n     * - Valid: SE123456789701\r\n     * - Invalid: SE123456789101\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _se: function _se(value) {\n      if (!/^SE[0-9]{10}01$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2, 10);\n      return $.fn.bootstrapValidator.helpers.luhn(value);\n    },\n\n    /**\r\n     * Validate Slovenian VAT number\r\n     * Examples:\r\n     * - Valid: SI50223054\r\n     * - Invalid: SI50223055\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _si: function _si(value) {\n      if (!/^SI[0-9]{8}$/.test(value)) {\n        return false;\n      }\n\n      value = value.substr(2);\n      var sum = 0,\n          weight = [8, 7, 6, 5, 4, 3, 2];\n\n      for (var i = 0; i < 7; i++) {\n        sum += parseInt(value.charAt(i), 10) * weight[i];\n      }\n\n      sum = 11 - sum % 11;\n\n      if (sum === 10) {\n        sum = 0;\n      }\n\n      return sum + '' === value.substr(7, 1);\n    },\n\n    /**\r\n     * Validate Slovak VAT number\r\n     * Examples:\r\n     * - Valid: SK2022749619\r\n     * - Invalid: SK2022749618\r\n     *\r\n     * @param {String} value VAT number\r\n     * @returns {Boolean}\r\n     */\n    _sk: function _sk(value) {\n      if (!/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\n        return false;\n      }\n\n      return parseInt(value.substr(2), 10) % 11 === 0;\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.vin = $.extend($.fn.bootstrapValidator.i18n.vin || {}, {\n    'default': 'Please enter a valid VIN number'\n  });\n  $.fn.bootstrapValidator.validators.vin = {\n    /**\r\n     * Validate an US VIN (Vehicle Identification Number)\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * @returns {Boolean}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '') {\n        return true;\n      } // Don't accept I, O, Q characters\n\n\n      if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\n        return false;\n      }\n\n      value = value.toUpperCase();\n      var chars = {\n        A: 1,\n        B: 2,\n        C: 3,\n        D: 4,\n        E: 5,\n        F: 6,\n        G: 7,\n        H: 8,\n        J: 1,\n        K: 2,\n        L: 3,\n        M: 4,\n        N: 5,\n        P: 7,\n        R: 9,\n        S: 2,\n        T: 3,\n        U: 4,\n        V: 5,\n        W: 6,\n        X: 7,\n        Y: 8,\n        Z: 9,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        '0': 0\n      },\n          weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\n          sum = 0,\n          length = value.length;\n\n      for (var i = 0; i < length; i++) {\n        sum += chars[value.charAt(i) + ''] * weights[i];\n      }\n\n      var reminder = sum % 11;\n\n      if (reminder === 10) {\n        reminder = 'X';\n      }\n\n      return reminder + '' === value.charAt(8);\n    }\n  };\n})(window.jQuery);\n\n;\n\n(function ($) {\n  $.fn.bootstrapValidator.i18n.zipCode = $.extend($.fn.bootstrapValidator.i18n.zipCode || {}, {\n    'default': 'Please enter a valid zip code',\n    countryNotSupported: 'The country code %s is not supported',\n    country: 'Please enter a valid %s',\n    countries: {\n      CA: 'Canadian postal code',\n      DK: 'Danish postal code',\n      GB: 'United Kingdom postal code',\n      IT: 'Italian postal code',\n      NL: 'Dutch postal code',\n      SE: 'Swiss postal code',\n      SG: 'Singapore postal code',\n      US: 'US zip code'\n    }\n  });\n  $.fn.bootstrapValidator.validators.zipCode = {\n    html5Attributes: {\n      message: 'message',\n      country: 'country'\n    },\n    COUNTRY_CODES: ['CA', 'DK', 'GB', 'IT', 'NL', 'SE', 'SG', 'US'],\n\n    /**\r\n     * Return true if and only if the input value is a valid country zip code\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consist of key:\r\n     * - message: The invalid message\r\n     * - country: The country\r\n     *\r\n     * The country can be defined by:\r\n     * - An ISO 3166 country code\r\n     * Currently it supports the following countries:\r\n     *      - US (United States)\r\n     *      - CA (Canada)\r\n     *      - DK (Denmark)\r\n     *      - GB (United Kingdom)\r\n     *      - IT (Italy)\r\n     *      - NL (Netherlands)\r\n     *      - SE (Sweden)\r\n     *      - SG (Singapore)\r\n     *\r\n     * - Name of field which its value defines the country code\r\n     * - Name of callback function that returns the country code\r\n     * - A callback function that returns the country code\r\n     *\r\n     * callback: function(value, validator, $field) {\r\n     *      // value is the value of field\r\n     *      // validator is the BootstrapValidator instance\r\n     *      // $field is jQuery element representing the field\r\n     * }\r\n     *\r\n     * @returns {Boolean|Object}\r\n     */\n    validate: function validate(validator, $field, options) {\n      var value = $field.val();\n\n      if (value === '' || !options.country) {\n        return true;\n      }\n\n      var country = options.country;\n\n      if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\n        // Try to determine the country\n        country = validator.getDynamicOption($field, country);\n      }\n\n      if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n        return {\n          valid: false,\n          message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.zipCode.countryNotSupported, country)\n        };\n      }\n\n      var isValid = false;\n      country = country.toUpperCase();\n\n      switch (country) {\n        case 'CA':\n          isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\n          break;\n\n        case 'DK':\n          isValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\n          break;\n\n        case 'GB':\n          isValid = this._gb(value);\n          break;\n        // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\n\n        case 'IT':\n          isValid = /^(I-|IT-)?\\d{5}$/i.test(value);\n          break;\n        // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\n\n        case 'NL':\n          isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\n          break;\n\n        case 'SE':\n          isValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\n          break;\n\n        case 'SG':\n          isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\n          break;\n\n        case 'US':\n        /* falls through */\n\n        default:\n          isValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\n          break;\n      }\n\n      return {\n        valid: isValid,\n        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.zipCode.country, $.fn.bootstrapValidator.i18n.zipCode.countries[country])\n      };\n    },\n\n    /**\r\n     * Validate United Kingdom postcode\r\n     * Examples:\r\n     * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\r\n     * - Special cases:\r\n     * AI-2640, ASCN 1ZZ, GIR 0AA\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\r\n     * @param {String} value The postcode\r\n     * @returns {Boolean}\r\n     */\n    _gb: function _gb(value) {\n      var firstChar = '[ABCDEFGHIJKLMNOPRSTUWYZ]',\n          // Does not accept QVX\n      secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',\n          // Does not accept IJZ\n      thirdChar = '[ABCDEFGHJKPMNRSTUVWXY]',\n          fourthChar = '[ABEHMNPRVWXY]',\n          fifthChar = '[ABDEFGHJLNPQRSTUWXYZ]',\n          regexps = [// AN NAA, ANN NAA, AAN NAA, AANN NAA format\n      new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'), // ANA NAA\n      new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'), // AANA NAA\n      new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'), new RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'), // BFPO postcodes\n      /^(GIR)(\\s*)(0AA)$/i, // Special postcode GIR 0AA\n      /^(BFPO)(\\s*)([0-9]{1,4})$/i, // Standard BFPO numbers\n      /^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i, // c/o BFPO numbers\n      /^([A-Z]{4})(\\s*)(1ZZ)$/i, // Overseas Territories\n      /^(AI-2640)$/i // Anguilla\n      ];\n\n      for (var i = 0; i < regexps.length; i++) {\n        if (regexps[i].test(value)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n})(window.jQuery);",{"version":3,"sources":["/Users/hq_failmy/Desktop/前端代码0405/src/plugins/bootstrap-validator/bootstrapValidator.js"],"names":["$","BootstrapValidator","form","options","$form","extend","fn","bootstrapValidator","DEFAULT_OPTIONS","$invalidFields","$submitButton","STATUS_NOT_VALIDATED","STATUS_VALIDATING","STATUS_INVALID","STATUS_VALID","ieVersion","v","div","document","createElement","a","all","innerHTML","el","_changeEvent","_submitIfValid","_cacheFields","_init","prototype","constructor","that","excluded","attr","trigger","message","container","group","submitButtons","threshold","live","onSuccess","onError","fields","feedbackIcons","valid","invalid","validating","addClass","elementClass","on","e","preventDefault","validate","find","each","$field","field","opts","_parseOptions","_initField","Event","bv","helpers","call","validators","validator","enabled","optionName","optionValue","html5AttrName","html5AttrMap","toLowerCase","enableByHtml5","html5Attributes","onerror","onsuccess","selector","onStatus","emptyOptions","isEmptyObject","emptyValidators","getFieldElements","length","validatorName","total","type","updateAll","event","eq","get","tagName","split","events","map","item","join","i","$parent","parents","$message","_getMessageContainer","remove","off","updateStatus","data","css","html","_getMessage","appendTo","removeClass","$icon","insertAfter","parent","_exceedThreshold","validateField","element","i18n","is","cssClasses","n","test","_submit","isValid","eventType","_onSuccess","_onError","_isExcluded","excludedAttr","trim","cannotType","inArray","val","isDefaultPrevented","f","$invalidField","$tabPane","tabId","tab","focus","disableSubmitButtons","defaultSubmit","_onFieldValidated","counter","numValidators","result","not","add","disabled","removeAttr","validateResult","reject","resolve","done","$f","removeData","updateMessage","undefined","$fields","status","$allErrors","$errors","filter","isValidField","$tab","show","isValidContainer","hide","tooltip","placement","title","popover","content","$container","submit","getInvalidFields","getSubmitButton","getMessages","messages","concat","getOptions","option","updateOption","value","addField","removeField","resetField","resetValue","resetForm","revalidateField","enableFieldValidators","getDynamicOption","destroy","end","params","arguments","$this","apply","Array","slice","Constructor","functionName","args","substring","ns","func","pop","context","window","format","parameters","isArray","replace","date","year","month","day","notInFuture","isNaN","parseInt","numDays","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","luhn","mul","prodArr","sum","charAt","mod11And10","check","mod37And36","alphabet","modulus","Math","floor","indexOf","jQuery","base64","between","notInclusive","min","max","inclusive","isNumeric","parseFloat","callback","dfd","Deferred","response","choice","less","more","numChoices","creditCard","cards","AMERICAN_EXPRESS","prefix","DINERS_CLUB","DINERS_CLUB_US","DISCOVER","JCB","LASER","MAESTRO","MASTERCARD","SOLO","UNIONPAY","VISA","substr","cusip","toUpperCase","converted","code","charCodeAt","num","cvv","ccfield","creditCardField","creditCardType","separator","formats","dateFormat","timeFormat","amOrPm","sections","time","minutes","hours","seconds","different","compareWith","digits","ean","weight","emailAddress","emailRegExp","file","extension","maxsize","ext","extensions","types","html5","File","FileList","FileReader","files","maxSize","size","name","lastIndexOf","greaterThan","compareTo","grid","hex","hexColor","iban","countryNotSupported","country","countries","AD","AE","AL","AO","AT","AZ","BA","BE","BF","BG","BH","BI","BJ","BR","CH","CI","CM","CR","CV","CY","CZ","DE","DK","DO","DZ","EE","ES","FI","FO","FR","GB","GE","GI","GL","GR","GT","HR","HU","IE","IL","IR","IS","IT","JO","KW","KZ","LB","LI","LT","LU","LV","MC","MD","ME","MG","MK","ML","MR","MT","MU","MZ","NL","NO","PK","PL","PS","PT","QA","RO","RS","SA","SE","SI","SK","SM","SN","TN","TR","VG","REGEX","RegExp","temp","id","CL","ZA","COUNTRY_CODES","method","_validateJMBG","countryCode","rr","k","_ba","_mk","_me","_rs","_si","_bg","_br","d1","d2","_ch","_cl","_cz","_dk","_ee","_lt","_es","index","_fi","centuries","individual","_hr","_ie","getCheckDigit","_is","century","gender","_lv","_nl","_ro","_se","_sk","_sm","_za","identical","imei","imo","integer","ip","ipv4","ipv6","ipv4Regex","ipv6Regex","default","isbn","chars","checksum","isin","regex","c","toString","ismn","issn","lessThan","mac","meid","cd","match","cdCalc","notEmpty","required","numeric","isFinite","phone","US","regexp","pattern","remote","url","xhr","ajax","dataType","then","fail","abort","rtn","sedol","siren","siret","tmp","step","base","baseValue","round","x","precision","m","pow","sign","isHalf","floatMod","y","dotX","dotY","mod","stringCase","upper","stringLength","maxLength","uri","allowlocal","allowLocal","urlExp","uuid","version","patterns","vat","EL","RU","_at","_be","egn","pnf","_cy","translation","_de","dni","nie","cif","first","_fr","_gb","firstTwo","lastThree","_gr","_el","_hu","_it","_lu","_mt","_no","_pl","_pt","_ru","sum1","weight1","sum2","weight2","vin","A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z","weights","reminder","zipCode","CA","SG","firstChar","secondChar","thirdChar","fourthChar","fifthChar","regexps"],"mappings":"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","sourcesContent":["/*!\r\n * BootstrapValidator (http://bootstrapvalidator.com)\r\n * The best jQuery plugin to validate form fields. Designed to use with Bootstrap 3\r\n *\r\n * @version     v0.5.1-dev, built on 2014-07-23 6:05:15 AM\r\n * @author      https://twitter.com/nghuuphuoc\r\n * @copyright   (c) 2013 - 2014 Nguyen Huu Phuoc\r\n * @license     MIT\r\n */\r\n(function($) {\r\n    var BootstrapValidator = function(form, options) {\r\n        this.$form   = $(form);\r\n        this.options = $.extend({}, $.fn.bootstrapValidator.DEFAULT_OPTIONS, options);\r\n\r\n        this.$invalidFields = $([]);    // Array of invalid fields\r\n        this.$submitButton  = null;     // The submit button which is clicked to submit form\r\n\r\n        // Validating status\r\n        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\r\n        this.STATUS_VALIDATING    = 'VALIDATING';\r\n        this.STATUS_INVALID       = 'INVALID';\r\n        this.STATUS_VALID         = 'VALID';\r\n\r\n        // Determine the event that is fired when user change the field value\r\n        // Most modern browsers supports input event except IE 7, 8.\r\n        // IE 9 supports input event but the event is still not fired if I press the backspace key.\r\n        // Get IE version\r\n        // https://gist.github.com/padolsey/527683/#comment-7595\r\n        var ieVersion = (function() {\r\n            var v = 3, div = document.createElement('div'), a = div.all || [];\r\n            while (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]) {}\r\n            return v > 4 ? v : !v;\r\n        }());\r\n\r\n        var el = document.createElement('div');\r\n        this._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';\r\n        //如果是焦点失去再验证放开下面两行注释，然后把上面两行注释掉（注意：这是网站全局设置，请慎用！！！）\r\n       // var el = document.createElement('div');\r\n        //this._changeEvent = (ieVersion === 9 || !('onblur' in el)) ? 'keyup' : 'blur';\r\n\r\n\r\n        // The flag to indicate that the form is ready to submit when a remote/callback validator returns\r\n        this._submitIfValid = null;\r\n\r\n        // Field elements\r\n        this._cacheFields = {};\r\n\r\n        this._init();\r\n    };\r\n\r\n    BootstrapValidator.prototype = {\r\n        constructor: BootstrapValidator,\r\n\r\n        /**\r\n         * Init form\r\n         */\r\n        _init: function() {\r\n            var that    = this,\r\n                options = {\r\n                    excluded:       this.$form.attr('data-bv-excluded'),\r\n                    trigger:        this.$form.attr('data-bv-trigger'),\r\n                    message:        this.$form.attr('data-bv-message'),\r\n                    container:      this.$form.attr('data-bv-container'),\r\n                    group:          this.$form.attr('data-bv-group'),\r\n                    submitButtons:  this.$form.attr('data-bv-submitbuttons'),\r\n                    threshold:      this.$form.attr('data-bv-threshold'),\r\n                    live:           this.$form.attr('data-bv-live'),\r\n                    onSuccess:      this.$form.attr('data-bv-onsuccess'),\r\n                    onError:        this.$form.attr('data-bv-onerror'),\r\n                    fields:         {},\r\n                    feedbackIcons: {\r\n                        valid:      this.$form.attr('data-bv-feedbackicons-valid'),\r\n                        invalid:    this.$form.attr('data-bv-feedbackicons-invalid'),\r\n                        validating: this.$form.attr('data-bv-feedbackicons-validating')\r\n                    }\r\n                };\r\n\r\n            this.$form\r\n                // Disable client side validation in HTML 5\r\n                .attr('novalidate', 'novalidate')\r\n                .addClass(this.options.elementClass)\r\n                // Disable the default submission first\r\n                .on('submit.bv', function(e) {\r\n                    e.preventDefault();\r\n                    that.validate();\r\n                })\r\n                .on('click.bv', this.options.submitButtons, function() {\r\n                    that.$submitButton  = $(this);\r\n\t\t\t\t\t// The user just click the submit button\r\n\t\t\t\t\tthat._submitIfValid = true;\r\n                })\r\n                // Find all fields which have either \"name\" or \"data-bv-field\" attribute\r\n                .find('[name], [data-bv-field]')\r\n                    .each(function() {\r\n                        var $field = $(this),\r\n                            field  = $field.attr('name') || $field.attr('data-bv-field'),\r\n                            opts   = that._parseOptions($field);\r\n                        if (opts) {\r\n                            $field.attr('data-bv-field', field);\r\n                            options.fields[field] = $.extend({}, opts, options.fields[field]);\r\n                        }\r\n                    });\r\n\r\n            this.options = $.extend(true, this.options, options);\r\n            for (var field in this.options.fields) {\r\n                this._initField(field);\r\n            }\r\n\r\n            this.$form.trigger($.Event('init.form.bv'), {\r\n                bv: this,\r\n                options: this.options\r\n            });\r\n\r\n            // Prepare the events\r\n            if (this.options.onSuccess) {\r\n                this.$form.on('success.form.bv', function(e) {\r\n                    $.fn.bootstrapValidator.helpers.call(that.options.onSuccess, [e]);\r\n                });\r\n            }\r\n            if (this.options.onError) {\r\n                this.$form.on('error.form.bv', function(e) {\r\n                    $.fn.bootstrapValidator.helpers.call(that.options.onError, [e]);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parse the validator options from HTML attributes\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Object}\r\n         */\r\n        _parseOptions: function($field) {\r\n            var field      = $field.attr('name') || $field.attr('data-bv-field'),\r\n                validators = {},\r\n                validator,\r\n                v,          // Validator name\r\n                enabled,\r\n                optionName,\r\n                optionValue,\r\n                html5AttrName,\r\n                html5AttrMap;\r\n\r\n            for (v in $.fn.bootstrapValidator.validators) {\r\n                validator    = $.fn.bootstrapValidator.validators[v];\r\n                enabled      = $field.attr('data-bv-' + v.toLowerCase()) + '';\r\n                html5AttrMap = ('function' === typeof validator.enableByHtml5) ? validator.enableByHtml5($field) : null;\r\n\r\n                if ((html5AttrMap && enabled !== 'false')\r\n                    || (html5AttrMap !== true && ('' === enabled || 'true' === enabled)))\r\n                {\r\n                    // Try to parse the options via attributes\r\n                    validator.html5Attributes = $.extend({}, { message: 'message', onerror: 'onError', onsuccess: 'onSuccess' }, validator.html5Attributes);\r\n                    validators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);\r\n\r\n                    for (html5AttrName in validator.html5Attributes) {\r\n                        optionName  = validator.html5Attributes[html5AttrName];\r\n                        optionValue = $field.attr('data-bv-' + v.toLowerCase() + '-' + html5AttrName);\r\n                        if (optionValue) {\r\n                            if ('true' === optionValue) {\r\n                                optionValue = true;\r\n                            } else if ('false' === optionValue) {\r\n                                optionValue = false;\r\n                            }\r\n                            validators[v][optionName] = optionValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            var opts = {\r\n                    excluded:      $field.attr('data-bv-excluded'),\r\n                    feedbackIcons: $field.attr('data-bv-feedbackicons'),\r\n                    trigger:       $field.attr('data-bv-trigger'),\r\n                    message:       $field.attr('data-bv-message'),\r\n                    container:     $field.attr('data-bv-container'),\r\n                    group:         $field.attr('data-bv-group'),\r\n                    selector:      $field.attr('data-bv-selector'),\r\n                    threshold:     $field.attr('data-bv-threshold'),\r\n                    onStatus:      $field.attr('data-bv-onstatus'),\r\n                    onSuccess:     $field.attr('data-bv-onsuccess'),\r\n                    onError:       $field.attr('data-bv-onerror'),\r\n                    validators:    validators\r\n                },\r\n                emptyOptions    = $.isEmptyObject(opts),        // Check if the field options are set using HTML attributes\r\n                emptyValidators = $.isEmptyObject(validators);  // Check if the field validators are set using HTML attributes\r\n\r\n            if (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {\r\n                opts.validators = validators;\r\n                return opts;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         */\r\n        _initField: function(field) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    fields.attr('data-bv-field', field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (this.options.fields[field] === null || this.options.fields[field].validators === null) {\r\n                return;\r\n            }\r\n\r\n            // We don't need to validate non-existing fields\r\n            if (fields.length === 0) {\r\n                delete this.options.fields[field];\r\n                return;\r\n            }\r\n            var validatorName;\r\n            for (validatorName in this.options.fields[field].validators) {\r\n                if (!$.fn.bootstrapValidator.validators[validatorName]) {\r\n                    delete this.options.fields[field].validators[validatorName];\r\n                }\r\n            }\r\n            if (this.options.fields[field].enabled === null) {\r\n                this.options.fields[field].enabled = true;\r\n            }\r\n\r\n            var that      = this,\r\n                total     = fields.length,\r\n                type      = fields.attr('type'),\r\n                updateAll = (total === 1) || ('radio' === type) || ('checkbox' === type),\r\n                event     = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === fields.eq(0).get(0).tagName) ? 'change' : this._changeEvent,\r\n                trigger   = (this.options.fields[field].trigger || this.options.trigger || event).split(' '),\r\n                events    = $.map(trigger, function(item) {\r\n                    return item + '.update.bv';\r\n                }).join(' ');\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field    = fields.eq(i),\r\n                    group     = this.options.fields[field].group || this.options.group,\r\n                    $parent   = $field.parents(group),\r\n                    // Allow user to indicate where the error messages are shown\r\n                    container = this.options.fields[field].container || this.options.container,\r\n                    $message  = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this._getMessageContainer($field, group);\r\n\r\n                if (container && container !== 'tooltip' && container !== 'popover') {\r\n                    $message.addClass('has-error');\r\n                }\r\n\r\n                // Remove all error messages and feedback icons\r\n                $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove();\r\n                $parent.find('i[data-bv-icon-for=\"' + field + '\"]').remove();\r\n\r\n                // Whenever the user change the field value, mark it as not validated yet\r\n                $field.off(events).on(events, function() {\r\n                    that.updateStatus($(this), that.STATUS_NOT_VALIDATED);\r\n                });\r\n\r\n                // Create help block elements for showing the error messages\r\n                $field.data('bv.messages', $message);\r\n                for (validatorName in this.options.fields[field].validators) {\r\n                    $field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);\r\n\r\n                    if (!updateAll || i === total - 1) {\r\n                        $('<small/>')\r\n                            .css('display', 'none')\r\n                            .addClass('help-block')\r\n                            .attr('data-bv-validator', validatorName)\r\n                            .attr('data-bv-for', field)\r\n                            .attr('data-bv-result', this.STATUS_NOT_VALIDATED)\r\n                            .html(this._getMessage(field, validatorName))\r\n                            .appendTo($message);\r\n                    }\r\n\r\n                    // Prepare the validator events\r\n                    if (this.options.fields[field].validators[validatorName].onSuccess) {\r\n                        $field.on('success.validator.bv', function(e, data) {\r\n                             $.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onSuccess, [e, data]);\r\n                        });\r\n                    }\r\n                    if (this.options.fields[field].validators[validatorName].onError) {\r\n                        $field.on('error.validator.bv', function(e, data) {\r\n                             $.fn.bootstrapValidator.helpers.call(that.options.fields[field].validators[validatorName].onError, [e, data]);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Prepare the feedback icons\r\n                // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)\r\n                if (this.options.fields[field].feedbackIcons !== false && this.options.fields[field].feedbackIcons !== 'false'\r\n                    && this.options.feedbackIcons\r\n                    && this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid\r\n                    && (!updateAll || i === total - 1))\r\n                {\r\n                    $parent.removeClass('has-success').removeClass('has-error').addClass('has-feedback');\r\n                    var $icon = $('<i/>')\r\n                                    .css('display', 'none')\r\n                                    .addClass('form-control-feedback')\r\n                                    .attr('data-bv-icon-for', field)\r\n                                    // Place it after the label containing the checkbox/radio\r\n                                    // so when clicking the icon, it doesn't effect to the checkbox/radio element\r\n                                    .insertAfter(('checkbox' === type || 'radio' === type) ? $field.parent() : $field);\r\n\r\n                    // The feedback icon does not render correctly if there is no label\r\n                    // https://github.com/twbs/bootstrap/issues/12873\r\n                    if ($parent.find('label').length === 0) {\r\n                        $icon.css('top', 0);\r\n                    }\r\n                    // Fix feedback icons in input-group\r\n                    if ($parent.find('.input-group').length !== 0) {\r\n                        $icon.css({\r\n                            'top': 0,\r\n                            'z-index': 100\r\n                        }).insertAfter($parent.find('.input-group').eq(0));\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Prepare the events\r\n            if (this.options.fields[field].onSuccess) {\r\n                fields.on('success.field.bv', function(e, data) {\r\n                    $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onSuccess, [e, data]);\r\n                });\r\n            }\r\n            if (this.options.fields[field].onError) {\r\n                fields.on('error.field.bv', function(e, data) {\r\n                    $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onError, [e, data]);\r\n                });\r\n            }\r\n            if (this.options.fields[field].onStatus) {\r\n                fields.on('status.field.bv', function(e, data) {\r\n                    $.fn.bootstrapValidator.helpers.call(that.options.fields[field].onStatus, [e, data]);\r\n                });\r\n            }\r\n\r\n            // Set live mode\r\n            events = $.map(trigger, function(item) {\r\n                return item + '.live.bv';\r\n            }).join(' ');\r\n            switch (this.options.live) {\r\n                case 'submitted':\r\n                    break;\r\n                case 'disabled':\r\n                    fields.off(events);\r\n                    break;\r\n                case 'enabled':\r\n                /* falls through */\r\n                default:\r\n                    fields.off(events).on(events, function() {\r\n                        if (that._exceedThreshold($(this))) {\r\n                            that.validateField($(this));\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            fields.trigger($.Event('init.field.bv'), {\r\n                bv: this,\r\n                field: field,\r\n                element: fields\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get the error message for given field and validator\r\n         *\r\n         * @param {String} field The field name\r\n         * @param {String} validatorName The validator name\r\n         * @returns {String}\r\n         */\r\n        _getMessage: function(field, validatorName) {\r\n            if (!this.options.fields[field] || !$.fn.bootstrapValidator.validators[validatorName]\r\n                || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName])\r\n            {\r\n                return '';\r\n            }\r\n\r\n            var options = this.options.fields[field].validators[validatorName];\r\n            switch (true) {\r\n                case (!!options.message):\r\n                    return options.message;\r\n                case (!!this.options.fields[field].message):\r\n                    return this.options.fields[field].message;\r\n                case (!!$.fn.bootstrapValidator.i18n[validatorName]):\r\n                    return $.fn.bootstrapValidator.i18n[validatorName]['default'];\r\n                default:\r\n                    return this.options.message;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the element to place the error messages\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} group\r\n         * @returns {jQuery}\r\n         */\r\n        _getMessageContainer: function($field, group) {\r\n            var $parent = $field.parent();\r\n            if ($parent.is(group)) {\r\n                return $parent;\r\n            }\r\n\r\n            var cssClasses = $parent.attr('class');\r\n            if (!cssClasses) {\r\n                return this._getMessageContainer($parent, group);\r\n            }\r\n\r\n            cssClasses = cssClasses.split(' ');\r\n            var n = cssClasses.length;\r\n            for (var i = 0; i < n; i++) {\r\n                if (/^col-(xs|sm|md|lg)-\\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\\d+$/.test(cssClasses[i])) {\r\n                    return $parent;\r\n                }\r\n            }\r\n\r\n            return this._getMessageContainer($parent, group);\r\n        },\r\n\r\n        /**\r\n         * Called when all validations are completed\r\n         */\r\n        _submit: function() {\r\n            var isValid   = this.isValid(),\r\n                eventType = isValid ? 'success.form.bv' : 'error.form.bv',\r\n                e         = $.Event(eventType);\r\n\r\n            this.$form.trigger(e);\r\n\r\n            // Call default handler\r\n            // Check if whether the submit button is clicked\r\n            if (this.$submitButton) {\r\n                isValid ? this._onSuccess(e) : this._onError(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if the field is excluded.\r\n         * Returning true means that the field will not be validated\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Boolean}\r\n         */\r\n        _isExcluded: function($field) {\r\n            var excludedAttr = $field.attr('data-bv-excluded'),\r\n                // I still need to check the 'name' attribute while initializing the field\r\n                field        = $field.attr('data-bv-field') || $field.attr('name');\r\n\r\n            switch (true) {\r\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):\r\n                case (excludedAttr === 'true'):\r\n                case (excludedAttr === ''):\r\n                    return true;\r\n\r\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):\r\n                case (excludedAttr === 'false'):\r\n                    return false;\r\n\r\n                default:\r\n                    if (this.options.excluded) {\r\n                        // Convert to array first\r\n                        if ('string' === typeof this.options.excluded) {\r\n                            this.options.excluded = $.map(this.options.excluded.split(','), function(item) {\r\n                                // Trim the spaces\r\n                                return $.trim(item);\r\n                            });\r\n                        }\r\n\r\n                        var length = this.options.excluded.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            if (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))\r\n                                || ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true))\r\n                            {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if the number of characters of field value exceed the threshold or not\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @returns {Boolean}\r\n         */\r\n        _exceedThreshold: function($field) {\r\n            var field     = $field.attr('data-bv-field'),\r\n                threshold = this.options.fields[field].threshold || this.options.threshold;\r\n            if (!threshold) {\r\n                return true;\r\n            }\r\n            var cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\r\n            return (cannotType || $field.val().length >= threshold);\r\n        },\r\n        \r\n        // ---\r\n        // Events\r\n        // ---\r\n\r\n        /**\r\n         * The default handler of error.form.bv event.\r\n         * It will be called when there is a invalid field\r\n         *\r\n         * @param {jQuery.Event} e The jQuery event object\r\n         */\r\n        _onError: function(e) {\r\n            if (e.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            if ('submitted' === this.options.live) {\r\n                // Enable live mode\r\n                this.options.live = 'enabled';\r\n                var that = this;\r\n                for (var field in this.options.fields) {\r\n                    (function(f) {\r\n                        var fields  = that.getFieldElements(f);\r\n                        if (fields.length) {\r\n                            var type    = $(fields[0]).attr('type'),\r\n                                event   = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $(fields[0]).get(0).tagName) ? 'change' : that._changeEvent,\r\n                                trigger = that.options.fields[field].trigger || that.options.trigger || event,\r\n                                events  = $.map(trigger.split(' '), function(item) {\r\n                                    return item + '.live.bv';\r\n                                }).join(' ');\r\n\r\n                            fields.off(events).on(events, function() {\r\n                                if (that._exceedThreshold($(this))) {\r\n                                    that.validateField($(this));\r\n                                }\r\n                            });\r\n                        }\r\n                    })(field);\r\n                }\r\n            }\r\n\r\n            var $invalidField = this.$invalidFields.eq(0);\r\n            if ($invalidField) {\r\n                // Activate the tab containing the invalid field if exists\r\n                var $tabPane = $invalidField.parents('.tab-pane'), tabId;\r\n                if ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n                    $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').tab('show');\r\n                }\r\n\r\n                // Focus to the first invalid field\r\n                $invalidField.focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The default handler of success.form.bv event.\r\n         * It will be called when all the fields are valid\r\n         *\r\n         * @param {jQuery.Event} e The jQuery event object\r\n         */\r\n        _onSuccess: function(e) {\r\n            if (e.isDefaultPrevented()) {\r\n                return;\r\n            }\r\n\r\n            // Submit the form\r\n            this.disableSubmitButtons(true).defaultSubmit();\r\n        },\r\n\r\n        /**\r\n         * Called after validating a field element\r\n         *\r\n         * @param {jQuery} $field The field element\r\n         * @param {String} [validatorName] The validator name\r\n         */\r\n        _onFieldValidated: function($field, validatorName) {\r\n            var field         = $field.attr('data-bv-field'),\r\n                validators    = this.options.fields[field].validators,\r\n                counter       = {},\r\n                numValidators = 0,\r\n                data          = {\r\n                    bv: this,\r\n                    field: field,\r\n                    element: $field,\r\n                    validator: validatorName\r\n                };\r\n\r\n            // Trigger an event after given validator completes\r\n            if (validatorName) {\r\n                switch ($field.data('bv.result.' + validatorName)) {\r\n                    case this.STATUS_INVALID:\r\n                        $field.trigger($.Event('error.validator.bv'), data);\r\n                        break;\r\n                    case this.STATUS_VALID:\r\n                        $field.trigger($.Event('success.validator.bv'), data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            counter[this.STATUS_NOT_VALIDATED] = 0;\r\n            counter[this.STATUS_VALIDATING]    = 0;\r\n            counter[this.STATUS_INVALID]       = 0;\r\n            counter[this.STATUS_VALID]         = 0;\r\n\r\n            for (var v in validators) {\r\n                if (validators[v].enabled === false) {\r\n                    continue;\r\n                }\r\n\r\n                numValidators++;\r\n                var result = $field.data('bv.result.' + v);\r\n                if (result) {\r\n                    counter[result]++;\r\n                }\r\n            }\r\n\r\n            if (counter[this.STATUS_VALID] === numValidators) {\r\n                // Remove from the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.not($field);\r\n\r\n                $field.trigger($.Event('success.field.bv'), data);\r\n            }\r\n            // If all validators are completed and there is at least one validator which doesn't pass\r\n            else if (counter[this.STATUS_NOT_VALIDATED] === 0 && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\r\n                // Add to the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.add($field);\r\n\r\n                $field.trigger($.Event('error.field.bv'), data);\r\n            }\r\n        },\r\n\r\n        // ---\r\n        // Public methods\r\n        // ---\r\n\r\n        /**\r\n         * Retrieve the field elements by given name\r\n         *\r\n         * @param {String} field The field name\r\n         * @returns {null|jQuery[]}\r\n         */\r\n        getFieldElements: function(field) {\r\n            if (!this._cacheFields[field]) {\r\n                this._cacheFields[field] = (this.options.fields[field] && this.options.fields[field].selector)\r\n                                         ? $(this.options.fields[field].selector)\r\n                                         : this.$form.find('[name=\"' + field + '\"]');\r\n            }\r\n\r\n            return this._cacheFields[field];\r\n        },\r\n\r\n        /**\r\n         * Disable/enable submit buttons\r\n         *\r\n         * @param {Boolean} disabled Can be true or false\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        disableSubmitButtons: function(disabled) {\r\n            if (!disabled) {\r\n                this.$form.find(this.options.submitButtons).removeAttr('disabled');\r\n            } else if (this.options.live !== 'disabled') {\r\n                // Don't disable if the live validating mode is disabled\r\n                this.$form.find(this.options.submitButtons).attr('disabled', 'disabled');\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate the form\r\n         *\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        validate: function() {\r\n            if (!this.options.fields) {\r\n                return this;\r\n            }\r\n            this.disableSubmitButtons(true);\r\n\r\n            for (var field in this.options.fields) {\r\n                this.validateField(field);\r\n            }\r\n\r\n            this._submit();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        validateField: function(field) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (this.options.fields[field] && this.options.fields[field].enabled === false) {\r\n                return this;\r\n            }\r\n\r\n            var that       = this,\r\n                type       = fields.attr('type'),\r\n                total      = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n                updateAll  = ('radio' === type || 'checkbox' === type),\r\n                validators = this.options.fields[field].validators,\r\n                validatorName,\r\n                validateResult;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                for (validatorName in validators) {\r\n                    if ($field.data('bv.dfs.' + validatorName)) {\r\n                        $field.data('bv.dfs.' + validatorName).reject();\r\n                    }\r\n\r\n                    // Don't validate field if it is already done\r\n                    var result = $field.data('bv.result.' + validatorName);\r\n                    if (result === this.STATUS_VALID || result === this.STATUS_INVALID || validators[validatorName].enabled === false) {\r\n                        this._onFieldValidated($field, validatorName);\r\n                        continue;\r\n                    }\r\n\r\n                    $field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);\r\n                    validateResult = $.fn.bootstrapValidator.validators[validatorName].validate(this, $field, validators[validatorName]);\r\n\r\n                    // validateResult can be a $.Deferred object ...\r\n                    if ('object' === typeof validateResult && validateResult.resolve) {\r\n                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\r\n                        $field.data('bv.dfs.' + validatorName, validateResult);\r\n\r\n                        validateResult.done(function($f, v, isValid, message) {\r\n                            // v is validator name\r\n                            $f.removeData('bv.dfs.' + v);\r\n                            if (message) {\r\n                                that.updateMessage($f, v, message);\r\n                            }\r\n\r\n                            that.updateStatus(updateAll ? $f.attr('data-bv-field') : $f, isValid ? that.STATUS_VALID : that.STATUS_INVALID, v);\r\n\r\n                            if (isValid && that._submitIfValid === true) {\r\n                                // If a remote validator returns true and the form is ready to submit, then do it\r\n                                that._submit();\r\n                            }\r\n                        });\r\n                    }\r\n                    // ... or object { valid: true/false, message: 'dynamic message' }\r\n                    else if ('object' === typeof validateResult && validateResult.valid !== undefined && validateResult.message !== undefined) {\r\n                        this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\r\n                        this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                    }\r\n                    // ... or a boolean value\r\n                    else if ('boolean' === typeof validateResult) {\r\n                        this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update the error message\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validator The validator name\r\n         * @param {String} message The message\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        updateMessage: function(field, validator, message) {\r\n            var $fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    $fields = field;\r\n                    field   = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    $fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            $fields.each(function() {\r\n                $(this).data('bv.messages').find('.help-block[data-bv-validator=\"' + validator + '\"][data-bv-for=\"' + field + '\"]').html(message);\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Update all validating results of field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\r\n         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        updateStatus: function(field, status, validatorName) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (status === this.STATUS_NOT_VALIDATED) {\r\n                // Reset the flag\r\n                this._submitIfValid = false;\r\n            }\r\n\r\n            var that  = this,\r\n                type  = fields.attr('type'),\r\n                group = this.options.fields[field].group || this.options.group,\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field       = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                var $parent      = $field.parents(group),\r\n                    $message     = $field.data('bv.messages'),\r\n                    $allErrors   = $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]'),\r\n                    $errors      = validatorName ? $allErrors.filter('[data-bv-validator=\"' + validatorName + '\"]') : $allErrors,\r\n                    $icon        = $parent.find('.form-control-feedback[data-bv-icon-for=\"' + field + '\"]'),\r\n                    container    = this.options.fields[field].container || this.options.container,\r\n                    isValidField = null;\r\n\r\n                // Update status\r\n                if (validatorName) {\r\n                    $field.data('bv.result.' + validatorName, status);\r\n                } else {\r\n                    for (var v in this.options.fields[field].validators) {\r\n                        $field.data('bv.result.' + v, status);\r\n                    }\r\n                }\r\n\r\n                // Show/hide error elements and feedback icons\r\n                $errors.attr('data-bv-result', status);\r\n\r\n                // Determine the tab containing the element\r\n                var $tabPane = $field.parents('.tab-pane'),\r\n                    tabId, $tab;\r\n                if ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n                    $tab = $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').parent();\r\n                }\r\n\r\n                switch (status) {\r\n                    case this.STATUS_VALIDATING:\r\n                        isValidField = null;\r\n                        this.disableSubmitButtons(true);\r\n                        $parent.removeClass('has-success').removeClass('has-error');\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();\r\n                        }\r\n                        if ($tab) {\r\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_INVALID:\r\n                        isValidField = false;\r\n                        this.disableSubmitButtons(true);\r\n                        $parent.removeClass('has-success').addClass('has-error');\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();\r\n                        }\r\n                        if ($tab) {\r\n                            $tab.removeClass('bv-tab-success').addClass('bv-tab-error');\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_VALID:\r\n                        // If the field is valid (passes all validators)\r\n                        isValidField = ($allErrors.filter('[data-bv-result=\"' + this.STATUS_NOT_VALIDATED +'\"]').length === 0)\r\n                                     ? ($allErrors.filter('[data-bv-result=\"' + this.STATUS_VALID +'\"]').length === $allErrors.length)  // All validators are completed\r\n                                     : null;                                                                                            // There are some validators that have not done\r\n                        if (isValidField !== null) {\r\n                            this.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\r\n                            if ($icon) {\r\n                                $icon\r\n                                    .removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid)\r\n                                    .addClass(isValidField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid)\r\n                                    .show();\r\n                            }\r\n                        }\r\n\r\n                        $parent.removeClass('has-error has-success').addClass(this.isValidContainer($parent) ? 'has-success' : 'has-error');\r\n                        if ($tab) {\r\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(this.isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');\r\n                        }\r\n                        break;\r\n\r\n                    case this.STATUS_NOT_VALIDATED:\r\n                    /* falls through */\r\n                    default:\r\n                        isValidField = null;\r\n                        this.disableSubmitButtons(false);\r\n                        $parent.removeClass('has-success').removeClass('has-error');\r\n                        if ($icon) {\r\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();\r\n                        }\r\n                        if ($tab) {\r\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                switch (true) {\r\n                    // Only show the first error message if it is placed inside a tooltip ...\r\n                    case ($icon && 'tooltip' === container):\r\n                        (isValidField === false)\r\n                                ? $icon.css('cursor', 'pointer').tooltip('destroy').tooltip({\r\n                                    html: true,\r\n                                    placement: 'top',\r\n                                    title: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html()\r\n                                })\r\n                                : $icon.css('cursor', '').tooltip('destroy');\r\n                        break;\r\n                    // ... or popover\r\n                    case ($icon && 'popover' === container):\r\n                        (isValidField === false)\r\n                                ? $icon.css('cursor', 'pointer').popover('destroy').popover({\r\n                                    content: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(),\r\n                                    html: true,\r\n                                    placement: 'top',\r\n                                    trigger: 'hover click'\r\n                                })\r\n                                : $icon.css('cursor', '').popover('destroy');\r\n                        break;\r\n                    default:\r\n                        (status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();\r\n                        break;\r\n                }\r\n\r\n                // Trigger an event\r\n                $field.trigger($.Event('status.field.bv'), {\r\n                    bv: this,\r\n                    field: field,\r\n                    element: $field,\r\n                    status: status\r\n                });\r\n                this._onFieldValidated($field, validatorName);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check the form validity\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function() {\r\n            for (var field in this.options.fields) {\r\n                if (!this.isValidField(field)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Check if the field is valid or not\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {Boolean}\r\n         */\r\n        isValidField: function(field) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (fields.length === 0 || this.options.fields[field] === null || this.options.fields[field].enabled === false) {\r\n                return true;\r\n            }\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n                $field, validatorName, status;\r\n            for (var i = 0; i < total; i++) {\r\n                $field = fields.eq(i);\r\n                if (this._isExcluded($field)) {\r\n                    continue;\r\n                }\r\n\r\n                for (validatorName in this.options.fields[field].validators) {\r\n                    if (this.options.fields[field].validators[validatorName].enabled === false) {\r\n                        continue;\r\n                    }\r\n\r\n                    status = $field.data('bv.result.' + validatorName);\r\n                    if (status !== this.STATUS_VALID) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Check if all fields inside a given container are valid.\r\n         * It's useful when working with a wizard-like such as tab, collapse\r\n         *\r\n         * @param {String|jQuery} container The container selector or element\r\n         * @returns {Boolean}\r\n         */\r\n        isValidContainer: function(container) {\r\n            var that       = this,\r\n                map        = {},\r\n                $container = ('string' === typeof container) ? $(container) : container;\r\n            if ($container.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            $container.find('[data-bv-field]').each(function() {\r\n                var $field = $(this),\r\n                    field  = $field.attr('data-bv-field');\r\n                if (!that._isExcluded($field) && !map[field]) {\r\n                    map[field] = $field;\r\n                }\r\n            });\r\n\r\n            for (var field in map) {\r\n                var $f = map[field];\r\n                if ($f.data('bv.messages')\r\n                      .find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]')\r\n                      .filter(function() {\r\n                          var v = $(this).attr('data-bv-validator'),\r\n                              f = $(this).attr('data-bv-for');\r\n                          return (that.options.fields[f].validators[v].enabled !== false\r\n                                && $f.data('bv.result.' + v) && $f.data('bv.result.' + v) !== that.STATUS_VALID);\r\n                      })\r\n                      .length !== 0)\r\n                {\r\n                    // The field is not valid\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Submit the form using default submission.\r\n         * It also does not perform any validations when submitting the form\r\n         */\r\n        defaultSubmit: function() {\r\n            if (this.$submitButton) {\r\n                // Create hidden input to send the submit buttons\r\n                $('<input/>')\r\n                    .attr('type', 'hidden')\r\n                    .attr('data-bv-submit-hidden', '')\r\n                    .attr('name', this.$submitButton.attr('name'))\r\n                    .val(this.$submitButton.val())\r\n                    .appendTo(this.$form);\r\n            }\r\n\r\n            // Submit form\r\n            this.$form.off('submit.bv').submit();\r\n        },\r\n\r\n        // ---\r\n        // Useful APIs which aren't used internally\r\n        // ---\r\n\r\n        /**\r\n         * Get the list of invalid fields\r\n         *\r\n         * @returns {jQuery[]}\r\n         */\r\n        getInvalidFields: function() {\r\n            return this.$invalidFields;\r\n        },\r\n\r\n        /**\r\n         * Returns the clicked submit button\r\n         *\r\n         * @returns {jQuery}\r\n         */\r\n        getSubmitButton: function() {\r\n            return this.$submitButton;\r\n        },\r\n\r\n        /**\r\n         * Get the error messages\r\n         *\r\n         * @param {String|jQuery} [field] The field name or field element\r\n         * If the field is not defined, the method returns all error messages of all fields\r\n         * @param {String} [validator] The name of validator\r\n         * If the validator is not defined, the method returns error messages of all validators\r\n         * @returns {String[]}\r\n         */\r\n        getMessages: function(field, validator) {\r\n            var that     = this,\r\n                messages = [],\r\n                $fields  = $([]);\r\n\r\n            switch (true) {\r\n                case (field && 'object' === typeof field):\r\n                    $fields = field;\r\n                    break;\r\n                case (field && 'string' === typeof field):\r\n                    var f = this.getFieldElements(field);\r\n                    if (f.length > 0) {\r\n                        var type = f.attr('type');\r\n                        $fields = ('radio' === type || 'checkbox' === type) ? f.eq(0) : f;\r\n                    }\r\n                    break;\r\n                default:\r\n                    $fields = this.$invalidFields;\r\n                    break;\r\n            }\r\n\r\n            var filter = validator ? '[data-bv-validator=\"' + validator + '\"]' : '';\r\n            $fields.each(function() {\r\n                messages = messages.concat(\r\n                    $(this)\r\n                        .data('bv.messages')\r\n                        .find('.help-block[data-bv-for=\"' + $(this).attr('data-bv-field') + '\"][data-bv-result=\"' + that.STATUS_INVALID + '\"]' + filter)\r\n                        .map(function() {\r\n                            var v = $(this).attr('data-bv-validator'),\r\n                                f = $(this).attr('data-bv-for');\r\n                            return (that.options.fields[f].validators[v].enabled === false) ? '' : $(this).html();\r\n                        })\r\n                        .get()\r\n                );\r\n            });\r\n\r\n            return messages;\r\n        },\r\n\r\n        /**\r\n         * Get the field options\r\n         *\r\n         * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options\r\n         * @param {String} [validator] The name of validator. It null, the method returns form options\r\n         * @param {String} [option] The option name\r\n         * @return {String|Object}\r\n         */\r\n        getOptions: function(field, validator, option) {\r\n            if (!field) {\r\n                return this.options;\r\n            }\r\n            if ('object' === typeof field) {\r\n                field = field.attr('data-bv-field');\r\n            }\r\n            if (!this.options.fields[field]) {\r\n                return null;\r\n            }\r\n\r\n            var options = this.options.fields[field];\r\n            if (!validator) {\r\n                return options;\r\n            }\r\n            if (!options.validators || !options.validators[validator]) {\r\n                return null;\r\n            }\r\n\r\n            return option ? options.validators[validator][option] : options.validators[validator];\r\n        },\r\n\r\n        /**\r\n         * Update the option of a specific validator\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {String} validator The validator name\r\n         * @param {String} option The option name\r\n         * @param {String} value The value to set\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        updateOption: function(field, validator, option, value) {\r\n            if ('object' === typeof field) {\r\n                field = field.attr('data-bv-field');\r\n            }\r\n            if (this.options.fields[field] && this.options.fields[field].validators[validator]) {\r\n                this.options.fields[field].validators[validator][option] = value;\r\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add a new field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {Object} [options] The validator rules\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        addField: function(field, options) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field') || field.attr('name');\r\n                    break;\r\n                case 'string':\r\n                    delete this._cacheFields[field];\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            fields.attr('data-bv-field', field);\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n\r\n                // Try to parse the options from HTML attributes\r\n                var opts = this._parseOptions($field);\r\n                opts = (opts === null) ? options : $.extend(true, options, opts);\r\n\r\n                this.options.fields[field] = $.extend(true, this.options.fields[field], opts);\r\n\r\n                // Update the cache\r\n                this._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field;\r\n\r\n                // Init the element\r\n                this._initField(('checkbox' === type || 'radio' === type) ? field : $field);\r\n            }\r\n\r\n            this.disableSubmitButtons(false);\r\n            // Trigger an event\r\n            this.$form.trigger($.Event('added.field.bv'), {\r\n                field: field,\r\n                element: fields,\r\n                options: this.options.fields[field]\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Remove a given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        removeField: function(field) {\r\n            var fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    fields = field;\r\n                    field  = field.attr('data-bv-field') || field.attr('name');\r\n                    fields.attr('data-bv-field', field);\r\n                    break;\r\n                case 'string':\r\n                    fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (fields.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            var type  = fields.attr('type'),\r\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n            for (var i = 0; i < total; i++) {\r\n                var $field = fields.eq(i);\r\n\r\n                // Remove from the list of invalid fields\r\n                this.$invalidFields = this.$invalidFields.not($field);\r\n\r\n                // Update the cache\r\n                this._cacheFields[field] = this._cacheFields[field].not($field);\r\n            }\r\n\r\n            if (!this._cacheFields[field] || this._cacheFields[field].length === 0) {\r\n                delete this.options.fields[field];\r\n            }\r\n            if ('checkbox' === type || 'radio' === type) {\r\n                this._initField(field);\r\n            }\r\n\r\n            this.disableSubmitButtons(false);\r\n            // Trigger an event\r\n            this.$form.trigger($.Event('removed.field.bv'), {\r\n                field: field,\r\n                element: fields\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset given field\r\n         *\r\n         * @param {String|jQuery} field The field name or field element\r\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        resetField: function(field, resetValue) {\r\n            var $fields = $([]);\r\n            switch (typeof field) {\r\n                case 'object':\r\n                    $fields = field;\r\n                    field   = field.attr('data-bv-field');\r\n                    break;\r\n                case 'string':\r\n                    $fields = this.getFieldElements(field);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            var total = $fields.length;\r\n            if (this.options.fields[field]) {\r\n                for (var i = 0; i < total; i++) {\r\n                    for (var validator in this.options.fields[field].validators) {\r\n                        $fields.eq(i).removeData('bv.dfs.' + validator);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Mark field as not validated yet\r\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED);\r\n\r\n            if (resetValue) {\r\n                var type = $fields.attr('type');\r\n                ('radio' === type || 'checkbox' === type) ? $fields.removeAttr('checked').removeAttr('selected') : $fields.val('');\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset the form\r\n         *\r\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        resetForm: function(resetValue) {\r\n            for (var field in this.options.fields) {\r\n                this.resetField(field, resetValue);\r\n            }\r\n\r\n            this.$invalidFields = $([]);\r\n            this.$submitButton  = null;\r\n\r\n            // Enable submit buttons\r\n            this.disableSubmitButtons(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Revalidate given field\r\n         * It's used when you need to revalidate the field which its value is updated by other plugin\r\n         *\r\n         * @param {String|jQuery} field The field name of field element\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        revalidateField: function(field) {\r\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED)\r\n                .validateField(field);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable/Disable all validators to given field\r\n         *\r\n         * @param {String} field The field name\r\n         * @param {Boolean} enabled Enable/Disable field validators\r\n         * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled\r\n         * @returns {BootstrapValidator}\r\n         */\r\n        enableFieldValidators: function(field, enabled, validatorName) {\r\n            var validators = this.options.fields[field].validators;\r\n\r\n            // Enable/disable particular validator\r\n            if (validatorName\r\n                && validators\r\n                && validators[validatorName] && validators[validatorName].enabled !== enabled)\r\n            {\r\n                this.options.fields[field].validators[validatorName].enabled = enabled;\r\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);\r\n            }\r\n            // Enable/disable all validators\r\n            else if (!validatorName && this.options.fields[field].enabled !== enabled) {\r\n                this.options.fields[field].enabled = enabled;\r\n                for (var v in validators) {\r\n                    this.enableFieldValidators(field, enabled, v);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Some validators have option which its value is dynamic.\r\n         * For example, the zipCode validator has the country option which might be changed dynamically by a select element.\r\n         *\r\n         * @param {jQuery|String} field The field name or element\r\n         * @param {String|Function} option The option which can be determined by:\r\n         * - a string\r\n         * - name of field which defines the value\r\n         * - name of function which returns the value\r\n         * - a function returns the value\r\n         *\r\n         * The callback function has the format of\r\n         *      callback: function(value, validator, $field) {\r\n         *          // value is the value of field\r\n         *          // validator is the BootstrapValidator instance\r\n         *          // $field is the field element\r\n         *      }\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getDynamicOption: function(field, option) {\r\n            var $field = ('string' === typeof field) ? this.getFieldElements(field) : field,\r\n                value  = $field.val();\r\n\r\n            // Option can be determined by\r\n            // ... a function\r\n            if ('function' === typeof option) {\r\n                return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\r\n            }\r\n            // ... value of other field\r\n            else if ('string' === typeof option) {\r\n                var $f = this.getFieldElements(option);\r\n                if ($f.length) {\r\n                    return $f.val();\r\n                }\r\n                // ... return value of callback\r\n                else {\r\n                    return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Destroy the plugin\r\n         * It will remove all error messages, feedback icons and turn off the events\r\n         */\r\n        destroy: function() {\r\n            var field, fields, $field, validator, $icon, container, group;\r\n            for (field in this.options.fields) {\r\n                fields    = this.getFieldElements(field);\r\n                container = this.options.fields[field].container || this.options.container,\r\n                group     = this.options.fields[field].group || this.options.group;\r\n                for (var i = 0; i < fields.length; i++) {\r\n                    $field = fields.eq(i);\r\n                    $field\r\n                        // Remove all error messages\r\n                        .data('bv.messages')\r\n                            .find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove().end()\r\n                            .end()\r\n                        .removeData('bv.messages')\r\n                        // Remove feedback classes\r\n                        .parents(group)\r\n                            .removeClass('has-feedback has-error has-success')\r\n                            .end()\r\n                        // Turn off events\r\n                        .off('.bv')\r\n                        .removeAttr('data-bv-field');\r\n\r\n                    // Remove feedback icons, tooltip/popover container\r\n                    $icon = $field.parents(group).find('i[data-bv-icon-for=\"' + field + '\"]');\r\n                    if ($icon) {\r\n                        switch (container) {\r\n                            case 'tooltip':\r\n                                $icon.tooltip('destroy').remove();\r\n                                break;\r\n                            case 'popover':\r\n                                $icon.popover('destroy').remove();\r\n                                break;\r\n                            default:\r\n                                $icon.remove();\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    for (validator in this.options.fields[field].validators) {\r\n                        if ($field.data('bv.dfs.' + validator)) {\r\n                            $field.data('bv.dfs.' + validator).reject();\r\n                        }\r\n                        $field.removeData('bv.result.' + validator).removeData('bv.dfs.' + validator);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Enable submit buttons\r\n            this.disableSubmitButtons(false);\r\n\r\n            this.$form\r\n                .removeClass(this.options.elementClass)\r\n                .off('.bv')\r\n                .removeData('bootstrapValidator')\r\n                // Remove generated hidden elements\r\n                .find('[data-bv-submit-hidden]').remove();\r\n        }\r\n    };\r\n\r\n    // Plugin definition\r\n    $.fn.bootstrapValidator = function(option) {\r\n        var params = arguments;\r\n        return this.each(function() {\r\n            var $this   = $(this),\r\n                data    = $this.data('bootstrapValidator'),\r\n                options = 'object' === typeof option && option;\r\n            if (!data) {\r\n                data = new BootstrapValidator(this, options);\r\n                $this.data('bootstrapValidator', data);\r\n            }\r\n\r\n            // Allow to call plugin method\r\n            if ('string' === typeof option) {\r\n                data[option].apply(data, Array.prototype.slice.call(params, 1));\r\n            }\r\n        });\r\n    };\r\n\r\n    // The default options\r\n    $.fn.bootstrapValidator.DEFAULT_OPTIONS = {\r\n        // The form CSS class\r\n        elementClass: 'bv-form',\r\n\r\n        // Default invalid message\r\n        message: 'This value is not valid',\r\n\r\n        // The CSS selector for indicating the element consists the field\r\n        // By default, each field is placed inside the <div class=\"form-group\"></div>\r\n        // You should adjust this option if your form group consists of many fields which not all of them need to be validated\r\n        group: '.form-group',\r\n\r\n        //The error messages container. It can be:\r\n        // - 'tooltip' if you want to use Bootstrap tooltip to show error messages\r\n        // - 'popover' if you want to use Bootstrap popover to show error messages\r\n        // - a CSS selector indicating the container\r\n        // In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message\r\n        // You also can define the message container for particular field\r\n        container: null,\r\n\r\n        // The field will not be live validated if its length is less than this number of characters\r\n        threshold: null,\r\n\r\n        // Indicate fields which won't be validated\r\n        // By default, the plugin will not validate the following kind of fields:\r\n        // - disabled\r\n        // - hidden\r\n        // - invisible\r\n        //\r\n        // The setting consists of jQuery filters. Accept 3 formats:\r\n        // - A string. Use a comma to separate filter\r\n        // - An array. Each element is a filter\r\n        // - An array. Each element can be a callback function\r\n        //      function($field, validator) {\r\n        //          $field is jQuery object representing the field element\r\n        //          validator is the BootstrapValidator instance\r\n        //          return true or false;\r\n        //      }\r\n        //\r\n        // The 3 following settings are equivalent:\r\n        //\r\n        // 1) ':disabled, :hidden, :not(:visible)'\r\n        // 2) [':disabled', ':hidden', ':not(:visible)']\r\n        // 3) [':disabled', ':hidden', function($field) {\r\n        //        return !$field.is(':visible');\r\n        //    }]\r\n        excluded: [':disabled', ':hidden', ':not(:visible)'],\r\n\r\n        // Shows ok/error/loading icons based on the field validity.\r\n        // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).\r\n        // Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.\r\n        // In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.\r\n        //\r\n        // Examples:\r\n        // - Use Glyphicons icons:\r\n        //  feedbackIcons: {\r\n        //      valid: 'glyphicon glyphicon-ok',\r\n        //      invalid: 'glyphicon glyphicon-remove',\r\n        //      validating: 'glyphicon glyphicon-refresh'\r\n        //  }\r\n        // - Use FontAwesome icons:\r\n        //  feedbackIcons: {\r\n        //      valid: 'fa fa-check',\r\n        //      invalid: 'fa fa-times',\r\n        //      validating: 'fa fa-refresh'\r\n        //  }\r\n        feedbackIcons: {\r\n            valid:      null,\r\n            invalid:    null,\r\n            validating: null\r\n        },\r\n\r\n        // The submit buttons selector\r\n        // These buttons will be disabled to prevent the valid form from multiple submissions\r\n        submitButtons: '[type=\"submit\"]',\r\n\r\n        // Live validating option\r\n        // Can be one of 3 values:\r\n        // - enabled: The plugin validates fields as soon as they are changed\r\n        // - disabled: Disable the live validating. The error messages are only shown after the form is submitted\r\n        // - submitted: The live validating is enabled after the form is submitted\r\n        live: 'enabled',\r\n\r\n        // Map the field name with validator rules\r\n        fields: null\r\n    };\r\n\r\n    // Available validators\r\n    $.fn.bootstrapValidator.validators  = {};\r\n\r\n    // i18n\r\n    $.fn.bootstrapValidator.i18n        = {};\r\n\r\n    $.fn.bootstrapValidator.Constructor = BootstrapValidator;\r\n\r\n    // Helper methods, which can be used in validator class\r\n    $.fn.bootstrapValidator.helpers = {\r\n        /**\r\n         * Execute a callback function\r\n         *\r\n         * @param {String|Function} functionName Can be\r\n         * - name of global function\r\n         * - name of namespace function (such as A.B.C)\r\n         * - a function\r\n         * @param {Array} args The callback arguments\r\n         */\r\n        call: function(functionName, args) {\r\n            if ('function' === typeof functionName) {\r\n                return functionName.apply(this, args);\r\n            } else if ('string' === typeof functionName) {\r\n                if ('()' === functionName.substring(functionName.length - 2)) {\r\n                    functionName = functionName.substring(0, functionName.length - 2);\r\n                }\r\n                var ns      = functionName.split('.'),\r\n                    func    = ns.pop(),\r\n                    context = window;\r\n                for (var i = 0; i < ns.length; i++) {\r\n                    context = context[ns[i]];\r\n                }\r\n                return context[func].apply(this, args);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Format a string\r\n         * It's used to format the error message\r\n         * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\r\n         *\r\n         * @param {String} message\r\n         * @param {Array} parameters\r\n         * @returns {String}\r\n         */\r\n        format: function(message, parameters) {\r\n            if (!$.isArray(parameters)) {\r\n                parameters = [parameters];\r\n            }\r\n\r\n            for (var i in parameters) {\r\n                message = message.replace('%s', parameters[i]);\r\n            }\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Validate a date\r\n         *\r\n         * @param {Number} year The full year in 4 digits\r\n         * @param {Number} month The month number\r\n         * @param {Number} day The day number\r\n         * @param {Boolean} [notInFuture] If true, the date must not be in the future\r\n         * @returns {Boolean}\r\n         */\r\n        date: function(year, month, day, notInFuture) {\r\n            if (isNaN(year) || isNaN(month) || isNaN(day)) {\r\n                return false;\r\n            }\r\n\r\n            day   = parseInt(day, 10);\r\n            month = parseInt(month, 10);\r\n            year  = parseInt(year, 10);\r\n\r\n            if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\r\n                return false;\r\n            }\r\n            var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n            // Update the number of days in Feb of leap year\r\n            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n                numDays[1] = 29;\r\n            }\r\n\r\n            // Check the day\r\n            if (day <= 0 || day > numDays[month - 1]) {\r\n                return false;\r\n            }\r\n\r\n            if (notInFuture === true) {\r\n                var currentDate  = new Date(),\r\n                    currentYear  = currentDate.getFullYear(),\r\n                    currentMonth = currentDate.getMonth(),\r\n                    currentDay   = currentDate.getDate();\r\n                return (year < currentYear\r\n                        || (year === currentYear && month - 1 < currentMonth)\r\n                        || (year === currentYear && month - 1 === currentMonth && day < currentDay));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Implement Luhn validation algorithm\r\n         * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Luhn\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        luhn: function(value) {\r\n            var length  = value.length,\r\n                mul     = 0,\r\n                prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\r\n                sum     = 0;\r\n\r\n            while (length--) {\r\n                sum += prodArr[mul][parseInt(value.charAt(length), 10)];\r\n                mul ^= 1;\r\n            }\r\n\r\n            return (sum % 10 === 0 && sum > 0);\r\n        },\r\n\r\n        /**\r\n         * Implement modulus 11, 10 (ISO 7064) algorithm\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        mod11And10: function(value) {\r\n            var check  = 5,\r\n                length = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\r\n            }\r\n            return (check === 1);\r\n        },\r\n\r\n        /**\r\n         * Implements Mod 37, 36 (ISO 7064) algorithm\r\n         * Usages:\r\n         * mod37And36('A12425GABC1234002M')\r\n         * mod37And36('002006673085', '0123456789')\r\n         *\r\n         * @param {String} value\r\n         * @param {String} [alphabet]\r\n         * @returns {Boolean}\r\n         */\r\n        mod37And36: function(value, alphabet) {\r\n            alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n            var modulus = alphabet.length,\r\n                length  = value.length,\r\n                check   = Math.floor(modulus / 2);\r\n            for (var i = 0; i < length; i++) {\r\n                check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\r\n            }\r\n            return (check === 1);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.base64 = $.extend($.fn.bootstrapValidator.i18n.base64 || {}, {\r\n        'default': 'Please enter a valid base 64 encoded'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.base64 = {\r\n        /**\r\n         * Return true if the input value is a base 64 encoded string.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.between = $.extend($.fn.bootstrapValidator.i18n.between || {}, {\r\n        'default': 'Please enter a value between %s and %s',\r\n        notInclusive: 'Please enter a value between %s and %s strictly'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.between = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            if ('range' === $field.attr('type')) {\r\n                return {\r\n                    min: $field.attr('min'),\r\n                    max: $field.attr('max')\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is between (strictly or not) two given numbers\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max);\r\n\r\n            value = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= min && value <= max,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between['default'], [min, max])\r\n                    }\r\n                    : {\r\n                        valid: value > min  && value <  max,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between.notInclusive, [min, max])\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.callback = $.extend($.fn.bootstrapValidator.i18n.callback || {}, {\r\n        'default': 'Please enter a valid value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.callback = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            callback: 'callback'\r\n        },\r\n\r\n        /**\r\n         * Return result from the callback method\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - callback: The callback method that passes 2 parameters:\r\n         *      callback: function(fieldValue, validator, $field) {\r\n         *          // fieldValue is the value of field\r\n         *          // validator is instance of BootstrapValidator\r\n         *          // $field is the field element\r\n         *      }\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n\r\n            if (options.callback) {\r\n                var dfd      = new $.Deferred(),\r\n                    response = $.fn.bootstrapValidator.helpers.call(options.callback, [value, validator, $field]);\r\n                dfd.resolve($field, 'callback', 'boolean' === typeof response ? response : response.valid, 'object' === typeof response && response.message ? response.message : null);\r\n                return dfd;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.choice = $.extend($.fn.bootstrapValidator.i18n.choice || {}, {\r\n        'default': 'Please enter a valid value',\r\n        less: 'Please choose %s options at minimum',\r\n        more: 'Please choose %s options at maximum',\r\n        between: 'Please choose %s - %s options'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.choice = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max'\r\n        },\r\n\r\n        /**\r\n         * Check if the number of checked boxes are less or more than a given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         *\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var numChoices = $field.is('select')\r\n                            ? validator.getFieldElements($field.attr('data-bv-field')).find('option').filter(':selected').length\r\n                            : validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length,\r\n                min        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,\r\n                max        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,\r\n                isValid    = true,\r\n                message    = options.message || $.fn.bootstrapValidator.i18n.choice['default'];\r\n\r\n            if ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.less, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.more, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { valid: isValid, message: message };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.creditCard = $.extend($.fn.bootstrapValidator.i18n.creditCard || {}, {\r\n        'default': 'Please enter a valid credit card number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.creditCard = {\r\n        /**\r\n         * Return true if the input value is valid credit card number\r\n         * Based on https://gist.github.com/DiegoSalazar/4075533\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Accept only digits, dashes or spaces\r\n            if (/[^0-9-\\s]+/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.luhn(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the card number based on prefix (IIN ranges) and length\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n\r\n            var type, i;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix\r\n                        && $.inArray(value.length, cards[type].length) !== -1)                      // and length\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.cusip = $.extend($.fn.bootstrapValidator.i18n.cusip || {}, {\r\n        'default': 'Please enter a valid CUSIP number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.cusip = {\r\n        /**\r\n         * Validate a CUSIP\r\n         * Examples:\r\n         * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\r\n         * - Invalid: 31430F200, 022615AC2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/CUSIP\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = $.map(value.split(''), function(item) {\r\n                                var code = item.charCodeAt(0);\r\n                                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                                            // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                                            ? (code - 'A'.charCodeAt(0) + 10)\r\n                                            : item;\r\n                            }),\r\n                length    = converted.length,\r\n                sum       = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var num = parseInt(converted[i], 10);\r\n                if (i % 2 !== 0) {\r\n                    num *= 2;\r\n                }\r\n                if (num > 9) {\r\n                    num -= 9;\r\n                }\r\n                sum += num;\r\n            }\r\n\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum === converted[length - 1];\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.cvv = $.extend($.fn.bootstrapValidator.i18n.cvv || {}, {\r\n        'default': 'Please enter a valid CVV number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.cvv = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ccfield: 'creditCardField'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid CVV number.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - creditCardField: The credit card number field. It can be null\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^[0-9]{3,4}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            if (!options.creditCardField) {\r\n                return true;\r\n            }\r\n\r\n            // Get the credit card number\r\n            var creditCard = validator.getFieldElements(options.creditCardField).val();\r\n            if (creditCard === '') {\r\n                return true;\r\n            }\r\n            \r\n            creditCard = creditCard.replace(/\\D/g, '');\r\n\r\n            // Supported credit card types\r\n            var cards = {\r\n                AMERICAN_EXPRESS: {\r\n                    length: [15],\r\n                    prefix: ['34', '37']\r\n                },\r\n                DINERS_CLUB: {\r\n                    length: [14],\r\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\r\n                },\r\n                DINERS_CLUB_US: {\r\n                    length: [16],\r\n                    prefix: ['54', '55']\r\n                },\r\n                DISCOVER: {\r\n                    length: [16],\r\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\r\n                             '62214', '62215', '62216', '62217', '62218', '62219',\r\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\r\n                             '62290', '62291', '622920', '622921', '622922', '622923',\r\n                             '622924', '622925', '644', '645', '646', '647', '648',\r\n                             '649', '65']\r\n                },\r\n                JCB: {\r\n                    length: [16],\r\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\r\n                },\r\n                LASER: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['6304', '6706', '6771', '6709']\r\n                },\r\n                MAESTRO: {\r\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\r\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\r\n                },\r\n                MASTERCARD: {\r\n                    length: [16],\r\n                    prefix: ['51', '52', '53', '54', '55']\r\n                },\r\n                SOLO: {\r\n                    length: [16, 18, 19],\r\n                    prefix: ['6334', '6767']\r\n                },\r\n                UNIONPAY: {\r\n                    length: [16, 17, 18, 19],\r\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\r\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\r\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\r\n                             '622920', '622921', '622922', '622923', '622924', '622925']\r\n                },\r\n                VISA: {\r\n                    length: [16],\r\n                    prefix: ['4']\r\n                }\r\n            };\r\n            var type, i, creditCardType = null;\r\n            for (type in cards) {\r\n                for (i in cards[type].prefix) {\r\n                    if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix\r\n                        && $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length\r\n                    {\r\n                        creditCardType = type;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (creditCardType === null)\r\n                        ? false\r\n                        : (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.date = $.extend($.fn.bootstrapValidator.i18n.date || {}, {\r\n        'default': 'Please enter a valid date'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.date = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            format: 'format',\r\n            separator: 'separator'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid date\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - separator: Use to separate the date, month, and year.\r\n         * By default, it is /\r\n         * - format: The date format. Default is MM/DD/YYYY\r\n         * The format can be:\r\n         *\r\n         * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\r\n         * ii) date and time:\r\n         * The time can consist of h, m, s parts which are separated by :\r\n         * ii) date, time and A (indicating AM or PM)\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options.format = options.format || 'MM/DD/YYYY';\r\n\r\n            var formats    = options.format.split(' '),\r\n                dateFormat = formats[0],\r\n                timeFormat = (formats.length > 1) ? formats[1] : null,\r\n                amOrPm     = (formats.length > 2) ? formats[2] : null,\r\n                sections   = value.split(' '),\r\n                date       = sections[0],\r\n                time       = (sections.length > 1) ? sections[1] : null;\r\n\r\n            if (formats.length !== sections.length) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the separator\r\n            var separator = options.separator;\r\n            if (!separator) {\r\n                separator = (date.indexOf('/') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);\r\n            }\r\n            if (separator === null || date.indexOf(separator) === -1) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the date\r\n            date       = date.split(separator);\r\n            dateFormat = dateFormat.split(separator);\r\n            if (date.length !== dateFormat.length) {\r\n                return false;\r\n            }\r\n\r\n            var year  = date[$.inArray('YYYY', dateFormat)],\r\n                month = date[$.inArray('MM', dateFormat)],\r\n                day   = date[$.inArray('DD', dateFormat)];\r\n\r\n            if (!year || !month || !day) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the time\r\n            var minutes = null, hours = null, seconds = null;\r\n            if (timeFormat) {\r\n                timeFormat = timeFormat.split(':');\r\n                time       = time.split(':');\r\n\r\n                if (timeFormat.length !== time.length) {\r\n                    return false;\r\n                }\r\n\r\n                hours   = time.length > 0 ? time[0] : null;\r\n                minutes = time.length > 1 ? time[1] : null;\r\n                seconds = time.length > 2 ? time[2] : null;\r\n\r\n                // Validate seconds\r\n                if (seconds) {\r\n                    seconds = parseInt(seconds, 10);\r\n                    if (isNaN(seconds) || seconds < 0 || seconds > 60) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Validate hours\r\n                if (hours) {\r\n                    hours = parseInt(hours, 10);\r\n                    if (isNaN(hours) || hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Validate minutes\r\n                if (minutes) {\r\n                    minutes = parseInt(minutes, 10);\r\n                    if (isNaN(minutes) || minutes < 0 || minutes > 59) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Validate day, month, and year\r\n            return $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.different = $.extend($.fn.bootstrapValidator.i18n.different || {}, {\r\n        'default': 'Please enter a different value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.different = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is different with given field's value\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            if (compareWith === null) {\r\n                return true;\r\n            }\r\n\r\n            if (value !== compareWith.val()) {\r\n                validator.updateStatus(options.field, validator.STATUS_VALID, 'different');\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.digits = $.extend($.fn.bootstrapValidator.i18n.digits || {}, {\r\n        'default': 'Please enter only digits'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.digits = {\r\n        /**\r\n         * Return true if the input value contains digits only\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^\\d+$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.ean = $.extend($.fn.bootstrapValidator.i18n.ean || {}, {\r\n        'default': 'Please enter a valid EAN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ean = {\r\n        /**\r\n         * Validate EAN (International Article Number)\r\n         * Examples:\r\n         * - Valid: 73513537, 9780471117094, 4006381333931\r\n         * - Invalid: 73513536\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/European_Article_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = (10 - sum % 10) % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.emailAddress = $.extend($.fn.bootstrapValidator.i18n.emailAddress || {}, {\r\n        'default': 'Please enter a valid email address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.emailAddress = {\r\n        enableByHtml5: function($field) {\r\n            return ('email' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid email address\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options]\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Email address regular expression\r\n            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\r\n            var emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            return emailRegExp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.file = $.extend($.fn.bootstrapValidator.i18n.file || {}, {\r\n        'default': 'Please choose a valid file'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.file = {\r\n        html5Attributes: {\r\n            extension: 'extension',\r\n            maxsize: 'maxSize',\r\n            message: 'message',\r\n            type: 'type'\r\n        },\r\n\r\n        /**\r\n         * Validate upload file. Use HTML 5 API if the browser supports\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - extension: The allowed extensions, separated by a comma\r\n         * - maxSize: The maximum size in bytes\r\n         * - message: The invalid message\r\n         * - type: The allowed MIME type, separated by a comma\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var ext,\r\n                extensions = options.extension ? options.extension.toLowerCase().split(',') : null,\r\n                types      = options.type      ? options.type.toLowerCase().split(',')      : null,\r\n                html5      = (window.File && window.FileList && window.FileReader);\r\n\r\n            if (html5) {\r\n                // Get FileList instance\r\n                var files = $field.get(0).files,\r\n                    total = files.length;\r\n                for (var i = 0; i < total; i++) {\r\n                    // Check file size\r\n                    if (options.maxSize && files[i].size > parseInt(options.maxSize, 10)) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check file extension\r\n                    ext = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\r\n                    if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Check file type\r\n                    if (types && $.inArray(files[i].type.toLowerCase(), types) === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            } else {\r\n                // Check file extension\r\n                ext = value.substr(value.lastIndexOf('.') + 1);\r\n                if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.greaterThan = $.extend($.fn.bootstrapValidator.i18n.greaterThan || {}, {\r\n        'default': 'Please enter a value greater than or equal to %s',\r\n        notInclusive: 'Please enter a value greater than %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.greaterThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var min = $field.attr('min');\r\n            if (min) {\r\n                return {\r\n                    value: min\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is greater than or equals to given number\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: Define the number to compare with. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n            value = parseFloat(value);\r\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value >= compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value > compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan.notInclusive, compareTo)\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.grid = $.extend($.fn.bootstrapValidator.i18n.grid || {}, {\r\n        'default': 'Please enter a valid GRId number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.grid = {\r\n        /**\r\n         * Validate GRId (Global Release Identifier)\r\n         * Examples:\r\n         * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\r\n         * - Invalid: A1-2425G-ABC1234002-Q\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '').replace(/-/g, '');\r\n            if ('GRID:' === value.substr(0, 5)) {\r\n                value = value.substr(5);\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.mod37And36(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.hex = $.extend($.fn.bootstrapValidator.i18n.hex || {}, {\r\n        'default': 'Please enter a valid hexadecimal number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.hex = {\r\n        /**\r\n         * Return true if and only if the input value is a valid hexadecimal number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^[0-9a-fA-F]+$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.hexColor = $.extend($.fn.bootstrapValidator.i18n.hexColor || {}, {\r\n        'default': 'Please enter a valid hex color'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.hexColor = {\r\n        enableByHtml5: function($field) {\r\n            return ('color' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid hex color\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.iban = $.extend($.fn.bootstrapValidator.i18n.iban || {}, {\r\n        'default': 'Please enter a valid IBAN number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid IBAN number in %s',\r\n        countries: {\r\n            AD: 'Andorra',\r\n            AE: 'United Arab Emirates',\r\n            AL: 'Albania',\r\n            AO: 'Angola',\r\n            AT: 'Austria',\r\n            AZ: 'Azerbaijan',\r\n            BA: 'Bosnia and Herzegovina',\r\n            BE: 'Belgium',\r\n            BF: 'Burkina Faso',\r\n            BG: 'Bulgaria',\r\n            BH: 'Bahrain',\r\n            BI: 'Burundi',\r\n            BJ: 'Benin',\r\n            BR: 'Brazil',\r\n            CH: 'Switzerland',\r\n            CI: 'Ivory Coast',\r\n            CM: 'Cameroon',\r\n            CR: 'Costa Rica',\r\n            CV: 'Cape Verde',\r\n            CY: 'Cyprus',\r\n            CZ: 'Czech Republic',\r\n            DE: 'Germany',\r\n            DK: 'Denmark',\r\n            DO: 'Dominican Republic',\r\n            DZ: 'Algeria',\r\n            EE: 'Estonia',\r\n            ES: 'Spain',\r\n            FI: 'Finland',\r\n            FO: 'Faroe Islands',\r\n            FR: 'France',\r\n            GB: 'United Kingdom',\r\n            GE: 'Georgia',\r\n            GI: 'Gibraltar',\r\n            GL: 'Greenland',\r\n            GR: 'Greece',\r\n            GT: 'Guatemala',\r\n            HR: 'Croatia',\r\n            HU: 'Hungary',\r\n            IE: 'Ireland',\r\n            IL: 'Israel',\r\n            IR: 'Iran',\r\n            IS: 'Iceland',\r\n            IT: 'Italy',\r\n            JO: 'Jordan',\r\n            KW: 'Kuwait',\r\n            KZ: 'Kazakhstan',\r\n            LB: 'Lebanon',\r\n            LI: 'Liechtenstein',\r\n            LT: 'Lithuania',\r\n            LU: 'Luxembourg',\r\n            LV: 'Latvia',\r\n            MC: 'Monaco',\r\n            MD: 'Moldova',\r\n            ME: 'Montenegro',\r\n            MG: 'Madagascar',\r\n            MK: 'Macedonia',\r\n            ML: 'Mali',\r\n            MR: 'Mauritania',\r\n            MT: 'Malta',\r\n            MU: 'Mauritius',\r\n            MZ: 'Mozambique',\r\n            NL: 'Netherlands',\r\n            NO: 'Norway',\r\n            PK: 'Pakistan',\r\n            PL: 'Poland',\r\n            PS: 'Palestinian',\r\n            PT: 'Portugal',\r\n            QA: 'Qatar',\r\n            RO: 'Romania',\r\n            RS: 'Serbia',\r\n            SA: 'Saudi Arabia',\r\n            SE: 'Sweden',\r\n            SI: 'Slovenia',\r\n            SK: 'Slovakia',\r\n            SM: 'San Marino',\r\n            SN: 'Senegal',\r\n            TN: 'Tunisia',\r\n            TR: 'Turkey',\r\n            VG: 'Virgin Islands, British'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.iban = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\r\n        // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\r\n        REGEX: {\r\n            AD: 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                       // Andorra\r\n            AE: 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                  // United Arab Emirates\r\n            AL: 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                               // Albania\r\n            AO: 'AO[0-9]{2}[0-9]{21}',                                          // Angola\r\n            AT: 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Austria\r\n            AZ: 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                               // Azerbaijan\r\n            BA: 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                   // Bosnia and Herzegovina\r\n            BE: 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                           // Belgium\r\n            BF: 'BF[0-9]{2}[0-9]{23}',                                          // Burkina Faso\r\n            BG: 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',                // Bulgaria\r\n            BH: 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                               // Bahrain\r\n            BI: 'BI[0-9]{2}[0-9]{12}',                                          // Burundi\r\n            BJ: 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Benin\r\n            BR: 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',             // Brazil\r\n            CH: 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Switzerland\r\n            CI: 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Ivory Coast\r\n            CM: 'CM[0-9]{2}[0-9]{23}',                                          // Cameroon\r\n            CR: 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                  // Costa Rica\r\n            CV: 'CV[0-9]{2}[0-9]{21}',                                          // Cape Verde\r\n            CY: 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                       // Cyprus\r\n            CZ: 'CZ[0-9]{2}[0-9]{20}',                                          // Czech Republic\r\n            DE: 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                  // Germany\r\n            DK: 'DK[0-9]{2}[0-9]{14}',                                          // Denmark\r\n            DO: 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                               // Dominican Republic\r\n            DZ: 'DZ[0-9]{2}[0-9]{20}',                                          // Algeria\r\n            EE: 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                  // Estonia\r\n            ES: 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',          // Spain\r\n            FI: 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                           // Finland\r\n            FO: 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Faroe Islands\r\n            FR: 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // France\r\n            GB: 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // United Kingdom\r\n            GE: 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                  // Georgia\r\n            GI: 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                               // Gibraltar\r\n            GL: 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Greenland\r\n            GR: 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                       // Greece\r\n            GT: 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                            // Guatemala\r\n            HR: 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                  // Croatia\r\n            HU: 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',          // Hungary\r\n            IE: 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // Ireland\r\n            IL: 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                          // Israel\r\n            IR: 'IR[0-9]{2}[0-9]{22}',                                          // Iran\r\n            IS: 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                  // Iceland\r\n            IT: 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // Italy\r\n            JO: 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',                 // Jordan\r\n            KW: 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                  // Kuwait\r\n            KZ: 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Kazakhstan\r\n            LB: 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                               // Lebanon\r\n            LI: 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Liechtenstein\r\n            LT: 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Lithuania\r\n            LU: 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Luxembourg\r\n            LV: 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                               // Latvia\r\n            MC: 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // Monaco\r\n            MD: 'MD[0-9]{2}[A-Z0-9]{20}',                                       // Moldova\r\n            ME: 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Montenegro\r\n            MG: 'MG[0-9]{2}[0-9]{23}',                                          // Madagascar\r\n            MK: 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                       // Macedonia\r\n            ML: 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Mali\r\n            MR: 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                        // Mauritania\r\n            MT: 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                       // Malta\r\n            MU: 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',  // Mauritius\r\n            MZ: 'MZ[0-9]{2}[0-9]{21}',                                          // Mozambique\r\n            NL: 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                  // Netherlands\r\n            NO: 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                           // Norway\r\n            PK: 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Pakistan\r\n            PL: 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                  // Poland\r\n            PS: 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Palestinian\r\n            PT: 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                  // Portugal\r\n            QA: 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Qatar\r\n            RO: 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Romania\r\n            RS: 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Serbia\r\n            SA: 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                               // Saudi Arabia\r\n            SE: 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                          // Sweden\r\n            SI: 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                           // Slovenia\r\n            SK: 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                          // Slovakia\r\n            SM: 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // San Marino\r\n            SN: 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Senegal\r\n            TN: 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Tunisia\r\n            TR: 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                    // Turkey\r\n            VG: 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                   // Virgin Islands, British\r\n        },\r\n\r\n        /**\r\n         * Validate an International Bank Account Number (IBAN)\r\n         * To test it, take the sample IBAN from\r\n         * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || !this.REGEX[country]) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!this.REGEX[country]) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.iban.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            if (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n                };\r\n            }\r\n\r\n            value = value.substr(4) + value.substr(0, 4);\r\n            value = $.map(value.split(''), function(n) {\r\n                var code = n.charCodeAt(0);\r\n                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\r\n                        // Replace A, B, C, ..., Z with 10, 11, ..., 35\r\n                        ? (code - 'A'.charCodeAt(0) + 10)\r\n                        : n;\r\n            });\r\n            value = value.join('');\r\n\r\n            var temp   = parseInt(value.substr(0, 1), 10),\r\n                length = value.length;\r\n            for (var i = 1; i < length; ++i) {\r\n                temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\r\n            }\r\n\r\n            return {\r\n                valid: (temp === 1),\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.id = $.extend($.fn.bootstrapValidator.i18n.id || {}, {\r\n        'default': 'Please enter a valid identification number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s identification number',\r\n        countries: {\r\n            BA: 'Bosnia and Herzegovina',\r\n            BG: 'Bulgarian',\r\n            BR: 'Brazilian',\r\n            CH: 'Swiss',\r\n            CL: 'Chilean',\r\n            CZ: 'Czech',\r\n            DK: 'Danish',\r\n            EE: 'Estonian',\r\n            ES: 'Spanish',\r\n            FI: 'Finnish',\r\n            HR: 'Croatian',\r\n            IE: 'Irish',\r\n            IS: 'Iceland',\r\n            LT: 'Lithuanian',\r\n            LV: 'Latvian',\r\n            ME: 'Montenegro',\r\n            MK: 'Macedonian',\r\n            NL: 'Dutch',\r\n            RO: 'Romanian',\r\n            RS: 'Serbian',\r\n            SE: 'Swedish',\r\n            SI: 'Slovenian',\r\n            SK: 'Slovak',\r\n            SM: 'San Marino',\r\n            ZA: 'South African'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.id = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'BA', 'BG', 'BR', 'CH', 'CL', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',\r\n            'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'ZA'\r\n        ],\r\n\r\n        /**\r\n         * Validate identification number in different countries\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.id.countryNotSupported, country) };\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                    ? true\r\n                    : {\r\n                        valid: false,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.id.country, $.fn.bootstrapValidator.i18n.id.countries[country.toUpperCase()])\r\n                    };\r\n        },\r\n\r\n        /**\r\n         * Validate Unique Master Citizen Number which uses in\r\n         * - Bosnia and Herzegovina (country code: BA)\r\n         * - Macedonia (MK)\r\n         * - Montenegro (ME)\r\n         * - Serbia (RS)\r\n         * - Slovenia (SI)\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\r\n         * @param {String} value The ID\r\n         * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\r\n         * @returns {Boolean}\r\n         */\r\n        _validateJMBG: function(value, countryCode) {\r\n            if (!/^\\d{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 3), 10),\r\n                rr    = parseInt(value.substr(7, 2), 10),\r\n                k     = parseInt(value.substr(12, 1), 10);\r\n\r\n            // Validate date of birth\r\n            // FIXME: Validate the year of birth\r\n            if (day > 31 || month > 12) {\r\n                return false;\r\n            }\r\n\r\n            // Validate checksum\r\n            var sum = 0;\r\n            for (var i = 0; i < 6; i++) {\r\n                sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10 || sum === 11) {\r\n                sum = 0;\r\n            }\r\n            if (sum !== k) {\r\n                return false;\r\n            }\r\n\r\n            // Validate political region\r\n            // rr is the political region of birth, which can be in ranges:\r\n            // 10-19: Bosnia and Herzegovina\r\n            // 20-29: Montenegro\r\n            // 30-39: Croatia (not used anymore)\r\n            // 41-49: Macedonia\r\n            // 50-59: Slovenia (only 50 is used)\r\n            // 70-79: Central Serbia\r\n            // 80-89: Serbian province of Vojvodina\r\n            // 90-99: Kosovo\r\n            switch (countryCode.toUpperCase()) {\r\n                case 'BA':\r\n                    return (10 <= rr && rr <= 19);\r\n                case 'MK':\r\n                    return (41 <= rr && rr <= 49);\r\n                case 'ME':\r\n                    return (20 <= rr && rr <= 29);\r\n                case 'RS':\r\n                    return (70 <= rr && rr <= 99);\r\n                case 'SI':\r\n                    return (50 <= rr && rr <= 59);\r\n                default:\r\n                    return true;\r\n            }\r\n        },\r\n\r\n        _ba: function(value) {\r\n            return this._validateJMBG(value, 'BA');\r\n        },\r\n        _mk: function(value) {\r\n            return this._validateJMBG(value, 'MK');\r\n        },\r\n        _me: function(value) {\r\n            return this._validateJMBG(value, 'ME');\r\n        },\r\n        _rs: function(value) {\r\n            return this._validateJMBG(value, 'RS');\r\n        },\r\n\r\n        /**\r\n         * Examples: 0101006500006\r\n         */\r\n        _si: function(value) {\r\n            return this._validateJMBG(value, 'SI');\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian national identification number (EGN)\r\n         * Examples:\r\n         * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\r\n         * - Invalid: 8019010008\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Uniform_civil_number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\s/g, '');\r\n            // Check the birth date\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (month > 40) {\r\n                year += 100;\r\n                month -= 40;\r\n            } else if (month > 20) {\r\n                year -= 100;\r\n                month -= 20;\r\n            }\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n            return (sum + '' === value.substr(9, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Brazilian national identification number (CPF)\r\n         * Examples:\r\n         * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\r\n         * - Invalid: 231.002.999-00\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _br: function(value) {\r\n            if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            if (!/^\\d{11}$/.test(value) && !/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\./g, '').replace(/-/g, '');\r\n\r\n            var d1 = 0;\r\n            for (var i = 0; i < 9; i++) {\r\n                d1 += (10 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d1 = 11 - d1 % 11;\r\n            if (d1 === 10 || d1 === 11) {\r\n                d1 = 0;\r\n            }\r\n            if (d1 + '' !== value.charAt(9)) {\r\n                return false;\r\n            }\r\n\r\n            var d2 = 0;\r\n            for (i = 0; i < 10; i++) {\r\n                d2 += (11 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            d2 = 11 - d2 % 11;\r\n            if (d2 === 10 || d2 === 11) {\r\n                d2 = 0;\r\n            }\r\n\r\n            return (d2 + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss Social Security Number (AHV-Nr/No AVS)\r\n         * Examples:\r\n         * - Valid: 756.1234.5678.95, 7561234567895\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\r\n         * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '').substr(3);\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = (length === 8) ? [3, 1] : [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Chilean national identification number (RUN/RUT)\r\n         * Examples:\r\n         * - Valid: 76086428-5, 22060449-7, 12531909-2\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\r\n         * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cl: function(value) {\r\n            if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\-/g, '');\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            } else if (sum === 10) {\r\n                sum = 'K';\r\n            }\r\n            return sum + '' === value.charAt(8).toUpperCase();\r\n        },\r\n\r\n        /**\r\n         * Validate Czech national identification number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 1103492745, 590312123\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (!/^\\d{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (value.length === 9) {\r\n                if (year >= 1980) {\r\n                    year -= 100;\r\n                }\r\n                if (year > 1953) {\r\n                    return false;\r\n                }\r\n            } else if (year < 1954) {\r\n                year += 100;\r\n            }\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Check that the birth date is not in the future\r\n            if (value.length === 10) {\r\n                var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                if (year < 1985) {\r\n                    check = check % 10;\r\n                }\r\n                return (check + '' === value.substr(9, 1));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Danish Personal Identification number (CPR)\r\n         * Examples:\r\n         * - Valid: 2110625629, 211062-5629\r\n         * - Invalid: 511062-5629\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n\r\n            switch (true) {\r\n                case ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):\r\n                    year += 1800;\r\n                    break;\r\n                case ('0123'.indexOf(value.charAt(6)) !== -1):\r\n                case ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):\r\n                    year += 1900;\r\n                    break;\r\n                default:\r\n                    year += 2000;\r\n                    break;\r\n            }\r\n\r\n            return $.fn.bootstrapValidator.helpers.date(year, month, day);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian Personal Identification Code (isikukood)\r\n         * Examples:\r\n         * - Valid: 37605030299\r\n         *\r\n         * @see http://et.wikipedia.org/wiki/Isikukood\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            // Use the same format as Lithuanian Personal Code\r\n            return this._lt(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish personal identity code (DNI)\r\n         * Support i) DNI (for Spanish citizens) and ii) NIE (for foreign people)\r\n         *\r\n         * Examples:\r\n         * - Valid: i) 54362315K, 54362315-K; ii) X2482300W, X-2482300W, X-2482300-W\r\n         * - Invalid: i) 54362315Z; ii) X-2482300A\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            if (!/^[0-9A-Z]{8}[-]{0,1}[0-9A-Z]$/.test(value)                    // DNI\r\n                && !/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-Z]$/.test(value)) {    // NIE\r\n                return false;\r\n            }\r\n\r\n            value = value.replace(/-/g, '');\r\n            var index = 'XYZ'.indexOf(value.charAt(0));\r\n            if (index !== -1) {\r\n                // It is NIE number\r\n                value = index + value.substr(1) + '';\r\n            }\r\n\r\n            var check = parseInt(value.substr(0, 8), 10);\r\n            check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n            return (check === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish Personal Identity Code (HETU)\r\n         * Examples:\r\n         * - Valid: 311280-888Y, 131052-308T\r\n         * - Invalid: 131052-308U, 310252-308Y\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var day       = parseInt(value.substr(0, 2), 10),\r\n                month     = parseInt(value.substr(2, 2), 10),\r\n                year      = parseInt(value.substr(4, 2), 10),\r\n                centuries = {\r\n                    '+': 1800,\r\n                    '-': 1900,\r\n                    'A': 2000\r\n                };\r\n            year = centuries[value.charAt(6)] + year;\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            var individual = parseInt(value.substr(7, 3), 10);\r\n            if (individual < 2) {\r\n                return false;\r\n            }\r\n            var n = value.substr(0, 6) + value.substr(7, 3) + '';\r\n            n = parseInt(n, 10);\r\n            return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian personal identification number (OIB)\r\n         * Examples:\r\n         * - Valid: 33392005961\r\n         * - Invalid: 33392005962\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish Personal Public Service Number (PPS)\r\n         * Examples:\r\n         * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\r\n         * - Invalid: 6433435E, 6433435VH\r\n         *\r\n         * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // 2013 format\r\n            if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            }\r\n            // The old format\r\n            else {\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Iceland national identification number (Kennitala)\r\n         * Examples:\r\n         * - Valid: 120174-3399, 1201743399, 0902862349\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Kennitala\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _is: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/-/g, '');\r\n            var day     = parseInt(value.substr(0, 2), 10),\r\n                month   = parseInt(value.substr(2, 2), 10),\r\n                year    = parseInt(value.substr(4, 2), 10),\r\n                century = parseInt(value.charAt(9), 10);\r\n\r\n            year = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            return (sum + '' === value.charAt(8));\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian Personal Code (Asmens kodas)\r\n         * Examples:\r\n         * - Valid: 38703181745\r\n         * - Invalid: 38703181746, 78703181745, 38703421745\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\r\n         * @see http://www.adomas.org/midi2007/pcode.html\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (!/^[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender  = parseInt(value.charAt(0), 10),\r\n                year    = parseInt(value.substr(1, 2), 10),\r\n                month   = parseInt(value.substr(3, 2), 10),\r\n                day     = parseInt(value.substr(5, 2), 10),\r\n                century = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);\r\n            year = century * 100 + year;\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum !== 10) {\r\n                return sum + '' === value.charAt(10);\r\n            }\r\n\r\n            // Re-calculate the check digit\r\n            sum    = 0;\r\n            weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\r\n            for (i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian Personal Code (Personas kods)\r\n         * Examples:\r\n         * - Valid: 161175-19997, 16117519997\r\n         * - Invalid: 161375-19997\r\n         *\r\n         * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\D/g, '');\r\n            // Check birth date\r\n            var day   = parseInt(value.substr(0, 2), 10),\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                year  = parseInt(value.substr(4, 2), 10);\r\n            year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\r\n                return false;\r\n            }\r\n\r\n            // Check personal code\r\n            var sum    = 0,\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum + 1) % 11 % 10;\r\n            return (sum + '' === value.charAt(10));\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch national identification number (BSN)\r\n         * Examples:\r\n         * - Valid: 111222333, 941331490, 9413.31.490\r\n         * - Invalid: 111252333\r\n         *\r\n         * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            while (value.length < 9) {\r\n                value = '0' + value;\r\n            }\r\n            if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/\\./g, '');\r\n            if (parseInt(value, 10) === 0) {\r\n                return false;\r\n            }\r\n            var sum    = 0,\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += (9 - i) * parseInt(value.charAt(i), 10);\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian numerical personal code (CNP)\r\n         * Examples:\r\n         * - Valid: 1630615123457, 1800101221144\r\n         * - Invalid: 8800101221144, 1632215123457, 1630615123458\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (!/^[0-9]{13}$/.test(value)) {\r\n                return false;\r\n            }\r\n            var gender = parseInt(value.charAt(0), 10);\r\n            if (gender === 0 || gender === 7 || gender === 8) {\r\n                return false;\r\n            }\r\n\r\n            // Determine the date of birth\r\n            var year      = parseInt(value.substr(1, 2), 10),\r\n                month     = parseInt(value.substr(3, 2), 10),\r\n                day       = parseInt(value.substr(5, 2), 10),\r\n                // The year of date is determined base on the gender\r\n                centuries = {\r\n                    '1': 1900,  // Male born between 1900 and 1999\r\n                    '2': 1900,  // Female born between 1900 and 1999\r\n                    '3': 1800,  // Male born between 1800 and 1899\r\n                    '4': 1800,  // Female born between 1800 and 1899\r\n                    '5': 2000,  // Male born after 2000\r\n                    '6': 2000   // Female born after 2000\r\n                };\r\n            if (day > 31 && month > 12) {\r\n                return false;\r\n            }\r\n            if (gender !== 9) {\r\n                year = centuries[gender + ''] + year;\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Validate the check digit\r\n            var sum    = 0,\r\n                weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = sum % 11;\r\n            if (sum === 10) {\r\n                sum = 1;\r\n            }\r\n            return (sum + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish personal identity number (personnummer)\r\n         * Examples:\r\n         * - Valid: 8112289874, 811228-9874, 811228+9874\r\n         * - Invalid: 811228-9873\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.replace(/[^0-9]/g, '');\r\n\r\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                month = parseInt(value.substr(2, 2), 10),\r\n                day   = parseInt(value.substr(4, 2), 10);\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak national identifier number (RC)\r\n         * Examples:\r\n         * - Valid: 7103192745, 991231123\r\n         * - Invalid: 7103192746, 1103492745\r\n         *\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            // Slovakia uses the same format as Czech Republic\r\n            return this._cz(value);\r\n        },\r\n\r\n        /**\r\n         * Validate San Marino citizen number\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _sm: function(value) {\r\n            return /^\\d{5}$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Validate South African ID\r\n         * Example:\r\n         * - Valid: 8001015009087\r\n         * - Invalid: 8001015009287, 8001015009086\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\r\n         * @param {String} value The ID\r\n         * @returns {Boolean}\r\n         */\r\n        _za: function(value) {\r\n            if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\r\n                return false;\r\n            }\r\n            var year        = parseInt(value.substr(0, 2), 10),\r\n                currentYear = new Date().getFullYear() % 100,\r\n                month       = parseInt(value.substr(2, 2), 10),\r\n                day         = parseInt(value.substr(4, 2), 10);\r\n            year = (year >= currentYear) ? (year + 1900) : (year + 2000);\r\n\r\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                return false;\r\n            }\r\n\r\n            // Validate the last check digit\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.identical = $.extend($.fn.bootstrapValidator.i18n.identical || {}, {\r\n        'default': 'Please enter the same value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.identical = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            field: 'field'\r\n        },\r\n\r\n        /**\r\n         * Check if input value equals to value of particular one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - field: The name of field that will be used to compare with current one\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareWith = validator.getFieldElements(options.field);\r\n            if (compareWith === null) {\r\n                return true;\r\n            }\r\n\r\n            if (value === compareWith.val()) {\r\n                validator.updateStatus(options.field, validator.STATUS_VALID, 'identical');\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.imei = $.extend($.fn.bootstrapValidator.i18n.imei || {}, {\r\n        'default': 'Please enter a valid IMEI number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.imei = {\r\n        /**\r\n         * Validate IMEI (International Mobile Station Equipment Identity)\r\n         * Examples:\r\n         * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\r\n         * - Invalid: 490154203237517\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            switch (true) {\r\n                case /^\\d{15}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\r\n                    value = value.replace(/[^0-9]/g, '');\r\n                    return $.fn.bootstrapValidator.helpers.luhn(value);\r\n\r\n                case /^\\d{14}$/.test(value):\r\n                case /^\\d{16}$/.test(value):\r\n                case /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\r\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\r\n                    return true;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.imo = $.extend($.fn.bootstrapValidator.i18n.imo || {}, {\r\n        'default': 'Please enter a valid IMO number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.imo = {\r\n        /**\r\n         * Validate IMO (International Maritime Organization)\r\n         * Examples:\r\n         * - Valid: IMO 8814275, IMO 9176187\r\n         * - Invalid: IMO 8814274\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/IMO_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^IMO \\d{7}$/i.test(value)) {\r\n                return false;\r\n            }\r\n            \r\n            // Grab just the digits\r\n            var sum    = 0,\r\n                digits = value.replace(/^.*(\\d{7})$/, '$1');\r\n            \r\n            // Go over each char, multiplying by the inverse of it's position\r\n            // IMO 9176187\r\n            // (9 * 7) + (1 * 6) + (7 * 5) + (6 * 4) + (1 * 3) + (8 * 2) = 147\r\n            // Take the last digit of that, that's the check digit (7)\r\n            for (var i = 6; i >= 1; i--) {\r\n                sum += (digits.slice((6 - i), -i) * (i + 1));\r\n            }\r\n\r\n            return sum % 10 === parseInt(digits.charAt(6), 10);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.integer = $.extend($.fn.bootstrapValidator.i18n.integer || {}, {\r\n        'default': 'Please enter a valid number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.integer = {\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is an integer\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.ip = $.extend($.fn.bootstrapValidator.i18n.ip || {}, {\r\n        'default': 'Please enter a valid IP address',\r\n        ipv4: 'Please enter a valid IPv4 address',\r\n        ipv6: 'Please enter a valid IPv6 address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ip = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            ipv4: 'ipv4',\r\n            ipv6: 'ipv6'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a IP address.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - ipv4: Enable IPv4 validator, default to true\r\n         * - ipv6: Enable IPv6 validator, default to true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            options = $.extend({}, { ipv4: true, ipv6: true }, options);\r\n\r\n            var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\r\n                ipv6Regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\r\n                valid     = false,\r\n                message;\r\n\r\n            switch (true) {\r\n                case (options.ipv4 && !options.ipv6):\r\n                    valid   = ipv4Regex.test(value);\r\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv4;\r\n                    break;\r\n\r\n                case (!options.ipv4 && options.ipv6):\r\n                    valid   = ipv6Regex.test(value);\r\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv6;\r\n                    break;\r\n\r\n                case (options.ipv4 && options.ipv6):\r\n                /* falls through */\r\n                default:\r\n                    valid   = ipv4Regex.test(value) && ipv6Regex.test(value);\r\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip.default;\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: valid,\r\n                message: message\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));;(function($) {\r\n    $.fn.bootstrapValidator.i18n.isbn = $.extend($.fn.bootstrapValidator.i18n.isbn || {}, {\r\n        'default': 'Please enter a valid ISBN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.isbn = {\r\n        /**\r\n         * Return true if the input value is a valid ISBN 10 or ISBN 13 number\r\n         * Examples:\r\n         * - Valid:\r\n         * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\r\n         * ISBN 13: 978-0-306-40615-7\r\n         * - Invalid:\r\n         * ISBN 10: 99921-58-10-6\r\n         * ISBN 13: 978-0-306-40615-6\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} [options] Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN10';\r\n                    break;\r\n                case /^(978|979)\\d{9}[\\dX]$/.test(value):\r\n                case (value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\r\n                case (value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\r\n                    type = 'ISBN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0,\r\n                i,\r\n                checksum;\r\n\r\n            switch (type) {\r\n                case 'ISBN10':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += parseInt(chars[i], 10) * (10 - i);\r\n                    }\r\n                    checksum = 11 - (sum % 11);\r\n                    if (checksum === 11) {\r\n                        checksum = 0;\r\n                    } else if (checksum === 10) {\r\n                        checksum = 'X';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                case 'ISBN13':\r\n                    sum = 0;\r\n                    for (i = 0; i < length - 1; i++) {\r\n                        sum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));\r\n                    }\r\n                    checksum = 10 - (sum % 10);\r\n                    if (checksum === 10) {\r\n                        checksum = '0';\r\n                    }\r\n                    return (checksum + '' === chars[length - 1]);\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.isin = $.extend($.fn.bootstrapValidator.i18n.isin || {}, {\r\n        'default': 'Please enter a valid ISIN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.isin = {\r\n        // Available country codes\r\n        // See http://isin.net/country-codes/\r\n        COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\r\n\r\n        /**\r\n         * Validate an ISIN (International Securities Identification Number)\r\n         * Examples:\r\n         * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\r\n         * - Invalid: US0378331004, AA0000XVGZA3\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\r\n            if (!regex.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var converted = '',\r\n                length    = value.length;\r\n            // Convert letters to number\r\n            for (var i = 0; i < length - 1; i++) {\r\n                var c = value.charCodeAt(i);\r\n                converted += ((c > 57) ? (c - 55).toString() : value.charAt(i));\r\n            }\r\n\r\n            var digits = '',\r\n                n      = converted.length,\r\n                group  = (n % 2 !== 0) ? 0 : 1;\r\n            for (i = 0; i < n; i++) {\r\n                digits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');\r\n            }\r\n\r\n            var sum = 0;\r\n            for (i = 0; i < digits.length; i++) {\r\n                sum += parseInt(digits.charAt(i), 10);\r\n            }\r\n            sum = (10 - (sum % 10)) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.ismn = $.extend($.fn.bootstrapValidator.i18n.ismn || {}, {\r\n        'default': 'Please enter a valid ISMN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.ismn = {\r\n        /**\r\n         * Validate ISMN (International Standard Music Number)\r\n         * Examples:\r\n         * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\r\n         * - Invalid: 9790060115614\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            var type;\r\n            switch (true) {\r\n                case /^M\\d{9}$/.test(value):\r\n                case /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN10';\r\n                    break;\r\n                case /^9790\\d{9}$/.test(value):\r\n                case /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\r\n                case /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\r\n                    type = 'ISMN13';\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            if ('ISMN10' === type) {\r\n                value = '9790' + value.substr(1);\r\n            }\r\n\r\n            // Replace all special characters except digits\r\n            value = value.replace(/[^0-9]/gi, '');\r\n            var length = value.length,\r\n                sum    = 0,\r\n                weight = [1, 3];\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\r\n            }\r\n            sum = 10 - sum % 10;\r\n            return (sum + '' === value.charAt(length - 1));\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.issn = $.extend($.fn.bootstrapValidator.i18n.issn || {}, {\r\n        'default': 'Please enter a valid ISSN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.issn = {\r\n        /**\r\n         * Validate ISSN (International Standard Serial Number)\r\n         * Examples:\r\n         * - Valid: 0378-5955, 0024-9319, 0032-1478\r\n         * - Invalid: 0032-147X\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Groups are separated by a hyphen or a space\r\n            if (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            // Replace all special characters except digits and X\r\n            value = value.replace(/[^0-9X]/gi, '');\r\n            var chars  = value.split(''),\r\n                length = chars.length,\r\n                sum    = 0;\r\n\r\n            if (chars[7] === 'X') {\r\n                chars[7] = 10;\r\n            }\r\n            for (var i = 0; i < length; i++) {\r\n                sum += parseInt(chars[i], 10) * (8 - i);\r\n            }\r\n            return (sum % 11 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.lessThan = $.extend($.fn.bootstrapValidator.i18n.lessThan || {}, {\r\n        'default': 'Please enter a value less than or equal to %s',\r\n        notInclusive: 'Please enter a value less than %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.lessThan = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            value: 'value',\r\n            inclusive: 'inclusive'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var max = $field.attr('max');\r\n            if (max) {\r\n                return {\r\n                    value: max\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is less than or equal to given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - value: The number used to compare to. It can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - inclusive [optional]: Can be true or false. Default is true\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var compareTo = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value);\r\n\r\n            value = parseFloat(value);\r\n            return (options.inclusive === true || options.inclusive === undefined)\r\n                    ? {\r\n                        valid: value <= compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan['default'], compareTo)\r\n                    }\r\n                    : {\r\n                        valid: value < compareTo,\r\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan.notInclusive, compareTo)\r\n                    };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.mac = $.extend($.fn.bootstrapValidator.i18n.mac || {}, {\r\n        'default': 'Please enter a valid MAC address'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.mac = {\r\n        /**\r\n         * Return true if the input value is a MAC address.\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.meid = $.extend($.fn.bootstrapValidator.i18n.meid || {}, {\r\n        'default': 'Please enter a valid MEID number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.meid = {\r\n        /**\r\n         * Validate MEID (Mobile Equipment Identifier)\r\n         * Examples:\r\n         * - Valid: 293608736500703710, 29360-87365-0070-3710, AF0123450ABCDE, AF-012345-0ABCDE\r\n         * - Invalid: 2936087365007037101\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Mobile_equipment_identifier\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            switch (true) {\r\n                // 14 digit hex representation (no check digit)\r\n                case /^[0-9A-F]{15}$/i.test(value):\r\n                // 14 digit hex representation + dashes or spaces (no check digit)\r\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(value):\r\n                // 18 digit decimal representation (no check digit)\r\n                case /^\\d{19}$/.test(value):\r\n                // 18 digit decimal representation + dashes or spaces (no check digit)\r\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}[- ]\\d$/.test(value):\r\n                    // Grab the check digit\r\n                    var cd = value.charAt(value.length - 1);\r\n\r\n                    // Strip any non-hex chars\r\n                    value = value.replace(/[- ]/g, '');\r\n\r\n                    // If it's all digits, luhn base 10 is used\r\n                    if (value.match(/^\\d*$/i)) {\r\n                        return $.fn.bootstrapValidator.helpers.luhn(value);\r\n                    }\r\n\r\n                    // Strip the check digit\r\n                    value = value.slice(0, -1);\r\n\r\n                    // Get every other char, and double it\r\n                    var cdCalc = '';\r\n                    for (var i = 1; i <= 13; i += 2) {\r\n                        cdCalc += (parseInt(value.charAt(i), 16) * 2).toString(16);\r\n                    }\r\n\r\n                    // Get the sum of each char in the string\r\n                    var sum = 0;\r\n                    for (i = 0; i < cdCalc.length; i++) {\r\n                        sum += parseInt(cdCalc.charAt(i), 16);\r\n                    }\r\n\r\n                    // If the last digit of the calc is 0, the check digit is 0\r\n                    return (sum % 10 === 0)\r\n                            ? (cd === '0')\r\n                            // Subtract it from the next highest 10s number (64 goes to 70) and subtract the sum\r\n                            // Double it and turn it into a hex char\r\n                            : (cd === ((Math.floor((sum + 10) / 10) * 10 - sum) * 2).toString(16));\r\n\r\n                // 14 digit hex representation (no check digit)\r\n                case /^[0-9A-F]{14}$/i.test(value):\r\n                // 14 digit hex representation + dashes or spaces (no check digit)\r\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(value):\r\n                // 18 digit decimal representation (no check digit)\r\n                case /^\\d{18}$/.test(value):\r\n                // 18 digit decimal representation + dashes or spaces (no check digit)\r\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}$/.test(value):\r\n                    return true;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.notEmpty = $.extend($.fn.bootstrapValidator.i18n.notEmpty || {}, {\r\n        'default': 'Please enter a value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.notEmpty = {\r\n        enableByHtml5: function($field) {\r\n            var required = $field.attr('required') + '';\r\n            return ('required' === required || 'true' === required);\r\n        },\r\n\r\n        /**\r\n         * Check if input value is empty or not\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var type = $field.attr('type');\r\n            if ('radio' === type || 'checkbox' === type) {\r\n                return validator\r\n                            .getFieldElements($field.attr('data-bv-field'))\r\n                            .filter(':checked')\r\n                            .length > 0;\r\n            }\r\n\r\n            return $.trim($field.val()) !== '';\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.numeric = $.extend($.fn.bootstrapValidator.i18n.numeric || {}, {\r\n        'default': 'Please enter a valid float number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.numeric = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            separator: 'separator'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);\r\n        },\r\n\r\n        /**\r\n         * Validate decimal number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - separator: The decimal separator. Can be \".\" (default), \",\"\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n            var separator = options.separator || '.';\r\n            if (separator !== '.') {\r\n                value = value.replace(separator, '.');\r\n            }\r\n\r\n            return !isNaN(parseFloat(value)) && isFinite(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.phone = $.extend($.fn.bootstrapValidator.i18n.phone || {}, {\r\n        'default': 'Please enter a valid phone number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid phone number in %s',\r\n        countries: {\r\n            ES: 'Spain',\r\n            FR: 'France',\r\n            GB: 'United Kingdom',\r\n            US: 'USA'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.phone = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // The supported countries\r\n        COUNTRY_CODES: ['ES', 'FR', 'GB', 'US'],\r\n\r\n        /**\r\n         * Return true if the input value contains a valid phone number for the country\r\n         * selected in the options\r\n         *\r\n         * @param {BootstrapValidator} validator Validate plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO-3166 country code. It can be\r\n         *      - A country code\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         *\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.phone.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            var isValid = true;\r\n            switch (country.toUpperCase()) {\r\n                case 'ES':\r\n                    // http://regex101.com/r/rB9mA9/1\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(?:(?:(?:\\+|00)34\\D?))?(?:9|6)(?:\\d\\D?){8}$/).test(value);\r\n                    break;\r\n\r\n                case 'FR':\r\n                    // http://regexr.com/395dq\r\n                    value   = $.trim(value);\r\n                    isValid = (/^(?:(?:(?:\\+|00)33\\D?(?:\\D?\\(0\\)\\D?)?)|0){1}[1-9]{1}(?:\\D?\\d{2}){4}$/).test(value);\r\n                    break;\r\n\r\n            \tcase 'GB':\r\n            \t\t// http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\r\n            \t\t// Test: http://regexr.com/38uhv\r\n            \t\tvalue   = $.trim(value);\r\n            \t\tisValid = (/^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/).test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    // Make sure US phone numbers have 10 digits\r\n                    // May start with 1, +1, or 1-; should discard\r\n                    // Area code may be delimited with (), & sections may be delimited with . or -\r\n                    // Test: http://regexr.com/38mqi\r\n                    value   = value.replace(/\\D/g, '');\r\n                    isValid = (/^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/).test(value) && (value.length === 10);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.phone.country, $.fn.bootstrapValidator.i18n.phone.countries[country])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.regexp = $.extend($.fn.bootstrapValidator.i18n.regexp || {}, {\r\n        'default': 'Please enter a value matching the pattern'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.regexp = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            regexp: 'regexp'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var pattern = $field.attr('pattern');\r\n            if (pattern) {\r\n                return {\r\n                    regexp: pattern\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the element value matches given regular expression\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of the following key:\r\n         * - regexp: The regular expression you need to check\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;\r\n            return regexp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.remote = $.extend($.fn.bootstrapValidator.i18n.remote || {}, {\r\n        'default': 'Please enter a valid value'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.remote = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            url: 'url',\r\n            name: 'name'\r\n        },\r\n\r\n        /**\r\n         * Request a remote server to check the input value\r\n         *\r\n         * @param {BootstrapValidator} validator Plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - url {String|Function}\r\n         * - type {String} [optional] Can be GET or POST (default)\r\n         * - data {Object|Function} [optional]: By default, it will take the value\r\n         *  {\r\n         *      <fieldName>: <fieldValue>\r\n         *  }\r\n         * - name {String} [optional]: Override the field name for the request.\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Deferred}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var name = $field.attr('data-bv-field'),\r\n                data = options.data || {},\r\n                url  = options.url,\r\n                type = options.type || 'POST';\r\n\r\n            // Support dynamic data\r\n            if ('function' === typeof data) {\r\n                data = data.call(this, validator);\r\n            }\r\n\r\n            // Support dynamic url\r\n            if ('function' === typeof url) {\r\n                url = url.call(this, validator);\r\n            }\r\n\r\n            data[options.name || name] = value;\r\n\r\n            var dfd = new $.Deferred();\r\n            var xhr = $.ajax({\r\n                type: type,\r\n                url: url,\r\n                dataType: 'json',\r\n                data: data\r\n            });\r\n            xhr.then(function(response) {\r\n                dfd.resolve($field, 'remote', response.valid === true || response.valid === 'true', response.message ? response.message : null);\r\n            });\r\n\r\n            dfd.fail(function() {\r\n                xhr.abort();\r\n            });\r\n\r\n            return dfd;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.rtn = $.extend($.fn.bootstrapValidator.i18n.rtn || {}, {\r\n        'default': 'Please enter a valid RTN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.rtn = {\r\n        /**\r\n         * Validate a RTN (Routing transit number)\r\n         * Examples:\r\n         * - Valid: 021200025, 789456124\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Routing_transit_number\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum = 0;\r\n            for (var i = 0; i < value.length; i += 3) {\r\n                sum += parseInt(value.charAt(i),     10) * 3\r\n                    +  parseInt(value.charAt(i + 1), 10) * 7\r\n                    +  parseInt(value.charAt(i + 2), 10);\r\n            }\r\n            return (sum !== 0 && sum % 10 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.sedol = $.extend($.fn.bootstrapValidator.i18n.sedol || {}, {\r\n        'default': 'Please enter a valid SEDOL number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.sedol = {\r\n        /**\r\n         * Validate a SEDOL (Stock Exchange Daily Official List)\r\n         * Examples:\r\n         * - Valid: 0263494, B0WNLY7\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/SEDOL\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            if (!/^[0-9A-Z]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [1, 3, 1, 7, 3, 9, 1],\r\n                length = value.length;\r\n            for (var i = 0; i < length - 1; i++) {\r\n\t            sum += weight[i] * parseInt(value.charAt(i), 36);\r\n\t        }\r\n\t        sum = (10 - sum % 10) % 10;\r\n            return sum + '' === value.charAt(length - 1);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.siren = $.extend($.fn.bootstrapValidator.i18n.siren || {}, {\r\n        'default': 'Please enter a valid SIREN number'\r\n    });\r\n\r\n\t$.fn.bootstrapValidator.validators.siren = {\r\n\t\t/**\r\n\t\t * Check if a string is a siren number\r\n\t\t *\r\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\r\n\t\t * @param {jQuery} $field Field element\r\n\t\t * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n            if (!/^\\d{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.siret = $.extend($.fn.bootstrapValidator.i18n.siret || {}, {\r\n        'default': 'Please enter a valid SIRET number'\r\n    });\r\n\r\n\t$.fn.bootstrapValidator.validators.siret = {\r\n        /**\r\n         * Check if a string is a siret number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n\t\tvalidate: function(validator, $field, options) {\r\n\t\t\tvar value = $field.val();\r\n\t\t\tif (value === '') {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar sum    = 0,\r\n                length = value.length,\r\n                tmp;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n                tmp = parseInt(value.charAt(i), 10);\r\n\t\t\t\tif ((i % 2) === 0) {\r\n\t\t\t\t\ttmp = tmp * 2;\r\n\t\t\t\t\tif (tmp > 9) {\r\n\t\t\t\t\t\ttmp -= 9;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsum += tmp;\r\n\t\t\t}\r\n\t\t\treturn (sum % 10 === 0);\r\n\t\t}\r\n\t};\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.step = $.extend($.fn.bootstrapValidator.i18n.step || {}, {\r\n        'default': 'Please enter a valid step of %s'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.step = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            base: 'baseValue',\r\n            step: 'step'\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is valid step one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Can consist of the following keys:\r\n         * - baseValue: The base value\r\n         * - step: The step\r\n         * - message: The invalid message\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            options = $.extend({}, { baseValue: 0, step: 1 }, options);\r\n            value   = parseFloat(value);\r\n            if (!$.isNumeric(value)) {\r\n                return false;\r\n            }\r\n\r\n            var round = function(x, precision) {\r\n                    var m = Math.pow(10, precision);\r\n                    x = x * m;\r\n                    var sign   = (x > 0) | -(x < 0),\r\n                        isHalf = (x % 1 === 0.5 * sign);\r\n                    if (isHalf) {\r\n                        return (Math.floor(x) + (sign > 0)) / m;\r\n                    } else {\r\n                        return Math.round(x) / m;\r\n                    }\r\n                },\r\n                floatMod = function(x, y) {\r\n                    if (y === 0.0) {\r\n                        return 1.0;\r\n                    }\r\n                    var dotX      = (x + '').split('.'),\r\n                        dotY      = (y + '').split('.'),\r\n                        precision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);\r\n                    return round(x - y * Math.floor(x / y), precision);\r\n                };\r\n\r\n            var mod = floatMod(value - options.baseValue, options.step);\r\n            return {\r\n                valid: mod === 0.0 || mod === options.step,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.step['default'], [options.step])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.stringCase = $.extend($.fn.bootstrapValidator.i18n.stringCase || {}, {\r\n        'default': 'Please enter only lowercase characters',\r\n        upper: 'Please enter only uppercase characters'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.stringCase = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            'case': 'case'\r\n        },\r\n\r\n        /**\r\n         * Check if a string is a lower or upper case one\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - case: Can be 'lower' (default) or 'upper'\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var stringCase = (options['case'] || 'lower').toLowerCase();\r\n            return {\r\n                valid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),\r\n                message: options.message || (('upper' === stringCase) ? $.fn.bootstrapValidator.i18n.stringCase.upper : $.fn.bootstrapValidator.i18n.stringCase['default'])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.stringLength = $.extend($.fn.bootstrapValidator.i18n.stringLength || {}, {\r\n        'default': 'Please enter a value with valid length',\r\n        less: 'Please enter less than %s characters',\r\n        more: 'Please enter more than %s characters',\r\n        between: 'Please enter value between %s and %s characters long'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.stringLength = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            min: 'min',\r\n            max: 'max'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            var maxLength = $field.attr('maxlength');\r\n            if (maxLength) {\r\n                return {\r\n                    max: parseInt(maxLength, 10)\r\n                };\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the length of element value is less or more than given number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consists of following keys:\r\n         * - min\r\n         * - max\r\n         * At least one of two keys is required\r\n         * The min, max keys define the number which the field value compares to. min, max can be\r\n         *      - A number\r\n         *      - Name of field which its value defines the number\r\n         *      - Name of callback function that returns the number\r\n         *      - A callback function that returns the number\r\n         *\r\n         * - message: The invalid message\r\n         * @returns {Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var min     = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n                max     = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n                length  = value.length,\r\n                isValid = true,\r\n                message = options.message || $.fn.bootstrapValidator.i18n.stringLength['default'];\r\n\r\n            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\r\n                isValid = false;\r\n            }\r\n\r\n            switch (true) {\r\n                case (!!min && !!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                    break;\r\n\r\n                case (!!min):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.more, parseInt(min, 10));\r\n                    break;\r\n\r\n                case (!!max):\r\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.less, parseInt(max, 10));\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { valid: isValid, message: message };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.uri = $.extend($.fn.bootstrapValidator.i18n.uri || {}, {\r\n        'default': 'Please enter a valid URI'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.uri = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            allowlocal: 'allowLocal'\r\n        },\r\n\r\n        enableByHtml5: function($field) {\r\n            return ('url' === $field.attr('type'));\r\n        },\r\n\r\n        /**\r\n         * Return true if the input value is a valid URL\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options\r\n         * - message: The error message\r\n         * - allowLocal: Allow the private and local network IP. Default to false\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Credit to https://gist.github.com/dperini/729294\r\n            //\r\n            // Regular Expression for URL validation\r\n            //\r\n            // Author: Diego Perini\r\n            // Updated: 2010/12/05\r\n            //\r\n            // the regular expression composed & commented\r\n            // could be easily tweaked for RFC compliance,\r\n            // it was expressly modified to fit & satisfy\r\n            // these test for an URL shortener:\r\n            //\r\n            //   http://mathiasbynens.be/demo/url-regex\r\n            //\r\n            // Notes on possible differences from a standard/generic validation:\r\n            //\r\n            // - utf-8 char class take in consideration the full Unicode range\r\n            // - TLDs are mandatory unless `allowLocal` is true\r\n            // - protocols have been restricted to ftp, http and https only as requested\r\n            //\r\n            // Changes:\r\n            //\r\n            // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\r\n            //   first and last IP address of each class is considered invalid\r\n            //   (since they are broadcast/network addresses)\r\n            //\r\n            // - Added exclusion of private, reserved and/or local networks ranges\r\n            //   unless `allowLocal` is true\r\n            //\r\n            var allowLocal = options.allowLocal === true || options.allowLocal === 'true',\r\n                urlExp     = new RegExp(\r\n                    \"^\" +\r\n                    // protocol identifier\r\n                    \"(?:(?:https?|ftp)://)\" +\r\n                    // user:pass authentication\r\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n                    \"(?:\" +\r\n                    // IP address exclusion\r\n                    // private & local networks\r\n                    (allowLocal\r\n                        ? ''\r\n                        : (\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n                           \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n                           \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\")) +\r\n                    // IP address dotted notation octets\r\n                    // excludes loopback network 0.0.0.0\r\n                    // excludes reserved space >= 224.0.0.0\r\n                    // excludes network & broadcast addresses\r\n                    // (first & last IP address of each class)\r\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n                    \"|\" +\r\n                    // host name\r\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n                    // domain name\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n                    // TLD identifier\r\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n                    // Allow intranet sites (no TLD) if `allowLocal` is true\r\n                    (allowLocal ? '?' : '') +\r\n                    \")\" +\r\n                    // port number\r\n                    \"(?::\\\\d{2,5})?\" +\r\n                    // resource path\r\n                    \"(?:/[^\\\\s]*)?\" +\r\n                    \"$\", \"i\"\r\n                );\r\n\r\n            return urlExp.test(value);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.uuid = $.extend($.fn.bootstrapValidator.i18n.uuid || {}, {\r\n        'default': 'Please enter a valid UUID number',\r\n        version: 'Please enter a valid UUID version %s number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.uuid = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            version: 'version'\r\n        },\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid UUID string\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - version: Can be 3, 4, 5, null\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\r\n            var patterns = {\r\n                    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n                    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n                    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n                },\r\n                version = options.version ? (options.version + '') : 'all';\r\n            return {\r\n                valid: (null === patterns[version]) ? true : patterns[version].test(value),\r\n                message: options.version\r\n                            ? $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.uuid.version, options.version)\r\n                            : (options.message || $.fn.bootstrapValidator.i18n.uuid['default'])\r\n            };\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.vat = $.extend($.fn.bootstrapValidator.i18n.vat || {}, {\r\n        'default': 'Please enter a valid VAT number',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s VAT number',\r\n        countries: {\r\n            AT: 'Austrian',\r\n            BE: 'Belgian',\r\n            BG: 'Bulgarian',\r\n            CH: 'Swiss',\r\n            CY: 'Cypriot',\r\n            CZ: 'Czech',\r\n            DE: 'German',\r\n            DK: 'Danish',\r\n            EE: 'Estonian',\r\n            ES: 'Spanish',\r\n            FI: 'Finnish',\r\n            FR: 'French',\r\n            GB: 'United Kingdom',\r\n            GR: 'Greek',\r\n            EL: 'Greek',\r\n            HU: 'Hungarian',\r\n            HR: 'Croatian',\r\n            IE: 'Irish',\r\n            IT: 'Italian',\r\n            LT: 'Lithuanian',\r\n            LU: 'Luxembourg',\r\n            LV: 'Latvian',\r\n            MT: 'Maltese',\r\n            NL: 'Dutch',\r\n            NO: 'Norwegian',\r\n            PL: 'Polish',\r\n            PT: 'Portuguese',\r\n            RO: 'Romanian',\r\n            RU: 'Russian',\r\n            RS: 'Serbian',\r\n            SE: 'Swedish',\r\n            SI: 'Slovenian',\r\n            SK: 'Slovak'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.vat = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        // Supported country codes\r\n        COUNTRY_CODES: [\r\n            'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'EL', 'HU', 'IE', 'IT',\r\n            'LV', 'LT', 'LU', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SK', 'SI', 'ES', 'SE', 'CH', 'GB'\r\n        ],\r\n\r\n        /**\r\n         * Validate an European VAT number\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The ISO 3166-1 country code. It can be\r\n         *      - One of country code defined in COUNTRY_CODES\r\n         *      - Name of field which its value defines the country code\r\n         *      - Name of callback function that returns the country code\r\n         *      - A callback function that returns the country code\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (!country) {\r\n                country = value.substr(0, 2);\r\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                // Determine the country code\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                return {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.vat.countryNotSupported, country)\r\n                };\r\n            }\r\n\r\n            var method  = ['_', country.toLowerCase()].join('');\r\n            return this[method](value)\r\n                ? true\r\n                : {\r\n                    valid: false,\r\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.vat.country, $.fn.bootstrapValidator.i18n.vat.countries[country.toUpperCase()])\r\n                };\r\n        },\r\n\r\n        // VAT validators\r\n\r\n        /**\r\n         * Validate Austrian VAT number\r\n         * Example:\r\n         * - Valid: ATU13585627\r\n         * - Invalid: ATU13585626\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _at: function(value) {\r\n            if (!/^ATU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(3);\r\n            var sum    = 0,\r\n                weight = [1, 2, 1, 2, 1, 2, 1],\r\n                temp   = 0;\r\n\r\n            for (var i = 0; i < 7; i++) {\r\n                temp = parseInt(value.charAt(i), 10) * weight[i];\r\n                if (temp > 9) {\r\n                    temp = Math.floor(temp / 10) + temp % 10;\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 10 - (sum + 4) % 10;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Belgian VAT number\r\n         * Example:\r\n         * - Valid: BE0428759497\r\n         * - Invalid: BE431150351\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _be: function(value) {\r\n            if (!/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (value.length === 9) {\r\n                value = '0' + value;\r\n            }\r\n\r\n            if (value.substr(1, 1) === '0') {\r\n                return false;\r\n            }\r\n\r\n            var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\r\n            return (sum % 97 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Bulgarian VAT number\r\n         * Example:\r\n         * - Valid: BG175074752,\r\n         * BG7523169263, BG8032056031,\r\n         * BG7542011030,\r\n         * BG7111042925\r\n         * - Invalid: BG175074753, BG7552A10004, BG7111042922\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _bg: function(value) {\r\n            if (!/^BG[0-9]{9,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum = 0, i = 0;\r\n\r\n            // Legal entities\r\n            if (value.length === 9) {\r\n                for (i = 0; i < 8; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (i + 1);\r\n                }\r\n                sum = sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                    for (i = 0; i < 8; i++) {\r\n                        sum += parseInt(value.charAt(i), 10) * (i + 3);\r\n                    }\r\n                }\r\n                sum = sum % 10;\r\n                return (sum + '' === value.substr(8));\r\n            }\r\n            // Physical persons, foreigners and others\r\n            else if (value.length === 10) {\r\n                // Validate Bulgarian national identification numbers\r\n                var egn = function(value) {\r\n                        // Check the birth date\r\n                        var year  = parseInt(value.substr(0, 2), 10) + 1900,\r\n                            month = parseInt(value.substr(2, 2), 10),\r\n                            day   = parseInt(value.substr(4, 2), 10);\r\n                        if (month > 40) {\r\n                            year += 100;\r\n                            month -= 40;\r\n                        } else if (month > 20) {\r\n                            year -= 100;\r\n                            month -= 20;\r\n                        }\r\n\r\n                        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                            return false;\r\n                        }\r\n\r\n                        var sum    = 0,\r\n                            weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = (sum % 11) % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Validate Bulgarian personal number of a foreigner\r\n                    pnf = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = sum % 10;\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    },\r\n                    // Finally, consider it as a VAT number\r\n                    vat = function(value) {\r\n                        var sum    = 0,\r\n                            weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n                        for (var i = 0; i < 9; i++) {\r\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                        }\r\n                        sum = 11 - sum % 11;\r\n                        if (sum === 10) {\r\n                            return false;\r\n                        }\r\n                        if (sum === 11) {\r\n                            sum = 0;\r\n                        }\r\n                        return (sum + '' === value.substr(9, 1));\r\n                    };\r\n                return (egn(value) || pnf(value) || vat(value));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate Swiss VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ch: function(value) {\r\n            if (!/^CHE[0-9]{9}(MWST)?$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(3);\r\n            var sum    = 0,\r\n                weight = [5, 4, 3, 2, 7, 6, 5, 4];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                return false;\r\n            }\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Cypriot VAT number\r\n         * Examples:\r\n         * - Valid: CY10259033P\r\n         * - Invalid: CY10259033Z\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cy: function(value) {\r\n            if (!/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n            // Do not allow to start with \"12\"\r\n            if (value.substr(0, 2) === '12') {\r\n                return false;\r\n            }\r\n\r\n            // Extract the next digit and multiply by the counter.\r\n            var sum         = 0,\r\n                translation = {\r\n                    '0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,\r\n                    '5': 13, '6': 15, '7': 17, '8': 19, '9': 21\r\n                };\r\n            for (var i = 0; i < 8; i++) {\r\n                var temp = parseInt(value.charAt(i), 10);\r\n                if (i % 2 === 0) {\r\n                    temp = translation[temp + ''];\r\n                }\r\n                sum += temp;\r\n            }\r\n\r\n            sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Czech Republic VAT number\r\n         * Can be:\r\n         * i) Legal entities (8 digit numbers)\r\n         * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\r\n         * iii) Individuals without a RC (9 digit numbers beginning with 6)\r\n         *\r\n         * Examples:\r\n         * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\r\n         * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _cz: function(value) {\r\n            if (!/^CZ[0-9]{8,10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n            var sum = 0,\r\n                i   = 0;\r\n            if (value.length === 8) {\r\n                // Do not allow to start with '9'\r\n                if (value.charAt(0) + '' === '9') {\r\n                    return false;\r\n                }\r\n\r\n                sum = 0;\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n\r\n                return (sum + '' === value.substr(7, 1));\r\n            } else if (value.length === 9 && (value.charAt(0) + '' === '6')) {\r\n                sum = 0;\r\n                // Skip the first (which is 6)\r\n                for (i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i + 1), 10) * (8 - i);\r\n                }\r\n                sum = 11 - sum % 11;\r\n                if (sum === 10) {\r\n                    sum = 0;\r\n                }\r\n                if (sum === 11) {\r\n                    sum = 1;\r\n                }\r\n                sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\r\n                return (sum + '' === value.substr(8, 1));\r\n            } else if (value.length === 9 || value.length === 10) {\r\n                // Validate Czech birth number (Rodné číslo), which is also national identifier\r\n                var year  = 1900 + parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10) % 50 % 20,\r\n                    day   = parseInt(value.substr(4, 2), 10);\r\n                if (value.length === 9) {\r\n                    if (year >= 1980) {\r\n                        year -= 100;\r\n                    }\r\n                    if (year > 1953) {\r\n                        return false;\r\n                    }\r\n                } else if (year < 1954) {\r\n                    year += 100;\r\n                }\r\n\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check that the birth date is not in the future\r\n                if (value.length === 10) {\r\n                    var check = parseInt(value.substr(0, 9), 10) % 11;\r\n                    if (year < 1985) {\r\n                        check = check % 10;\r\n                    }\r\n                    return (check + '' === value.substr(9, 1));\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate German VAT number\r\n         * Examples:\r\n         * - Valid: DE136695976\r\n         * - Invalid: DE136695978\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _de: function(value) {\r\n            if (!/^DE[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Danish VAT number\r\n         * Example:\r\n         * - Valid: DK13585628\r\n         * - Invalid: DK13585627\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _dk: function(value) {\r\n            if (!/^DK[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [2, 7, 6, 5, 4, 3, 2, 1];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Estonian VAT number\r\n         * Examples:\r\n         * - Valid: EE100931558, EE100594102\r\n         * - Invalid: EE100594103\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ee: function(value) {\r\n            if (!/^EE[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\r\n\r\n            for (var i = 0; i < 9; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\r\n         * Can be:\r\n         * i) DNI (Documento nacional de identidad), for Spaniards\r\n         * ii) NIE (Número de Identificación de Extranjeros), for foreigners\r\n         * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\r\n         *\r\n         * Examples:\r\n         * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\r\n         * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _es: function(value) {\r\n            if (!/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var dni = function(value) {\r\n                    var check = parseInt(value.substr(0, 8), 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                nie = function(value) {\r\n                    var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\r\n                    check = parseInt(check, 10);\r\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                    return (check + '' === value.substr(8, 1));\r\n                },\r\n                cif = function(value) {\r\n                    var first = value.charAt(0), check;\r\n                    if ('KLM'.indexOf(first) !== -1) {\r\n                        // K: Spanish younger than 14 year old\r\n                        // L: Spanish living outside Spain without DNI\r\n                        // M: Granted the tax to foreigners who have no NIE\r\n                        check = parseInt(value.substr(1, 8), 10);\r\n                        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\r\n                        return (check + '' === value.substr(8, 1));\r\n                    } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\r\n                        var sum    = 0,\r\n                            weight = [2, 1, 2, 1, 2, 1, 2],\r\n                            temp   = 0;\r\n\r\n                        for (var i = 0; i < 7; i++) {\r\n                            temp = parseInt(value.charAt(i + 1), 10) * weight[i];\r\n                            if (temp > 9) {\r\n                                temp = Math.floor(temp / 10) + temp % 10;\r\n                            }\r\n                            sum += temp;\r\n                        }\r\n                        sum = 10 - sum % 10;\r\n                        return (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));\r\n                    }\r\n\r\n                    return false;\r\n                };\r\n\r\n            var first = value.charAt(0);\r\n            if (/^[0-9]$/.test(first)) {\r\n                return dni(value);\r\n            } else if (/^[XYZ]$/.test(first)) {\r\n                return nie(value);\r\n            } else {\r\n                return cif(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Finnish VAT number\r\n         * Examples:\r\n         * - Valid: FI20774740\r\n         * - Invalid: FI20774741\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fi: function(value) {\r\n            if (!/^FI[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [7, 9, 10, 5, 8, 4, 2, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\r\n         * It's constructed by a SIREN number, prefixed by two characters.\r\n         *\r\n         * Examples:\r\n         * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\r\n         * - Invalid: FR84323140391\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _fr: function(value) {\r\n            if (!/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n\r\n\t\t\tif (!$.fn.bootstrapValidator.helpers.luhn(value.substr(2))) {\r\n                return false;\r\n            }\r\n\r\n            if (/^[0-9]{2}$/.test(value.substr(0, 2))) {\r\n                // First two characters are digits\r\n                return value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');\r\n            } else {\r\n                // The first characters cann't be O and I\r\n                var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\r\n                    check;\r\n                // First one is digit\r\n                if (/^[0-9]{1}$/.test(value.charAt(0))) {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\r\n                } else {\r\n                    check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\r\n                }\r\n                return ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom VAT number\r\n         * Example:\r\n         * - Valid: GB980780684\r\n         * - Invalid: GB802311781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            if (!/^GB[0-9]{9}$/.test(value)             /* Standard */\r\n                && !/^GB[0-9]{12}$/.test(value)         /* Branches */\r\n                && !/^GBGD[0-9]{3}$/.test(value)        /* Government department */\r\n                && !/^GBHA[0-9]{3}$/.test(value)        /* Health authority */\r\n                && !/^GB(GD|HA)8888[0-9]{5}$/.test(value))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var length = value.length;\r\n            if (length === 5) {\r\n                var firstTwo  = value.substr(0, 2),\r\n                    lastThree = parseInt(value.substr(2), 10);\r\n                return ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);\r\n            } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\r\n                if (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)\r\n                    || ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))\r\n                {\r\n                    return false;\r\n                }\r\n                return (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));\r\n            } else if (length === 9 || length === 12) {\r\n                var sum    = 0,\r\n                    weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\r\n                for (var i = 0; i < 9; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 97;\r\n\r\n                if (parseInt(value.substr(0, 3), 10) >= 100) {\r\n                    return (sum === 0 || sum === 42 || sum === 55);\r\n                } else {\r\n                    return (sum === 0);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Greek VAT number\r\n         * Examples:\r\n         * - Valid: GR023456780, EL094259216\r\n         * - Invalid: EL123456781\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _gr: function(value) {\r\n            if (!/^GR[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (value.length === 8) {\r\n                value = '0' + value;\r\n            }\r\n\r\n            var sum    = 0,\r\n                weight = [256, 128, 64, 32, 16, 8, 4, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = (sum % 11) % 10;\r\n\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        // EL is traditionally prefix of Greek VAT numbers\r\n        _el: function(value) {\r\n            if (!/^EL[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = 'GR' + value.substr(2);\r\n            return this._gr(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Hungarian VAT number\r\n         * Examples:\r\n         * - Valid: HU12892312\r\n         * - Invalid: HU12892313\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hu: function(value) {\r\n            if (!/^HU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 7, 3, 1, 9, 7, 3, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 10 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Croatian VAT number\r\n         * Examples:\r\n         * - Valid: HR33392005961\r\n         * - Invalid: HR33392005962\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _hr: function(value) {\r\n            if (!/^HR[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Irish VAT number\r\n         * Examples:\r\n         * - Valid: IE6433435F, IE6433435OA, IE8D79739I\r\n         * - Invalid: IE8D79738J\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ie: function(value) {\r\n            if (!/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var getCheckDigit = function(value) {\r\n                while (value.length < 7) {\r\n                    value = '0' + value;\r\n                }\r\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\r\n                    sum      = 0;\r\n                for (var i = 0; i < 7; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\r\n                }\r\n                sum += 9 * alphabet.indexOf(value.substr(7));\r\n                return alphabet[sum % 23];\r\n            };\r\n\r\n            // The first 7 characters are digits\r\n            if (/^[0-9]+$/.test(value.substr(0, 7))) {\r\n                // New system\r\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\r\n            } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\r\n                // Old system\r\n                return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Validate Italian VAT number, which consists of 11 digits.\r\n         * - First 7 digits are a company identifier\r\n         * - Next 3 are the province of residence\r\n         * - The last one is a check digit\r\n         *\r\n         * Examples:\r\n         * - Valid: IT00743110157\r\n         * - Invalid: IT00743110158\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _it: function(value) {\r\n            if (!/^IT[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            if (parseInt(value.substr(0, 7), 10) === 0) {\r\n                return false;\r\n            }\r\n\r\n            var lastThree = parseInt(value.substr(7, 3), 10);\r\n            if ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {\r\n                return false;\r\n            }\r\n\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Lithuanian VAT number\r\n         * It can be:\r\n         * - 9 digits, for legal entities\r\n         * - 12 digits, for temporarily registered taxpayers\r\n         *\r\n         * Examples:\r\n         * - Valid: LT119511515, LT100001919017, LT100004801610\r\n         * - Invalid: LT100001919018\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lt: function(value) {\r\n            if (!/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var length = value.length,\r\n                sum    = 0,\r\n                i;\r\n            for (i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * (1 + i % 9);\r\n            }\r\n            var check = sum % 11;\r\n            if (check === 10) {\r\n                sum = 0;\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\r\n                }\r\n            }\r\n            check = check % 11 % 10;\r\n            return (check + '' === value.charAt(length - 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Luxembourg VAT number\r\n         * Examples:\r\n         * - Valid: LU15027442\r\n         * - Invalid: LU15027443\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lu: function(value) {\r\n            if (!/^LU[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            return ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));\r\n        },\r\n\r\n        /**\r\n         * Validate Latvian VAT number\r\n         * Examples:\r\n         * - Valid: LV40003521600, LV16117519997\r\n         * - Invalid: LV40003521601, LV16137519997\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _lv: function(value) {\r\n            if (!/^LV[0-9]{11}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var first  = parseInt(value.charAt(0), 10),\r\n                sum    = 0,\r\n                weight = [],\r\n                i,\r\n                length = value.length;\r\n            if (first > 3) {\r\n                // Legal entity\r\n                sum    = 0;\r\n                weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\r\n                for (i = 0; i < length; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                return (sum === 3);\r\n            } else {\r\n                // Check birth date\r\n                var day   = parseInt(value.substr(0, 2), 10),\r\n                    month = parseInt(value.substr(2, 2), 10),\r\n                    year  = parseInt(value.substr(4, 2), 10);\r\n                year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\r\n\r\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\r\n                    return false;\r\n                }\r\n\r\n                // Check personal code\r\n                sum    = 0;\r\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\r\n                for (i = 0; i < length - 1; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = (sum + 1) % 11 % 10;\r\n                return (sum + '' === value.charAt(length - 1));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Maltese VAT number\r\n         * Examples:\r\n         * - Valid: MT11679112\r\n         * - Invalid: MT11679113\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _mt: function(value) {\r\n            if (!/^MT[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 4, 6, 7, 8, 9, 10, 1];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 37 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Dutch VAT number\r\n         * Examples:\r\n         * - Valid: NL004495445B01\r\n         * - Invalid: NL123456789B90\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _nl: function(value) {\r\n            if (!/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\r\n               return false;\r\n            }\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Norwegian VAT number\r\n         *\r\n         * @see http://www.brreg.no/english/coordination/number.html\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _no: function(value) {\r\n            if (!/^NO[0-9]{9}$/.test(value)) {\r\n               return false;\r\n            }\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = 11 - sum % 11;\r\n            if (sum === 11) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Polish VAT number\r\n         * Examples:\r\n         * - Valid: PL8567346215\r\n         * - Invalid: PL8567346216\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pl: function(value) {\r\n            if (!/^PL[0-9]{10}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\r\n\r\n            for (var i = 0; i < 10; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            return (sum % 11 === 0);\r\n        },\r\n\r\n        /**\r\n         * Validate Portuguese VAT number\r\n         * Examples:\r\n         * - Valid: PT501964843\r\n         * - Invalid: PT501964842\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _pt: function(value) {\r\n            if (!/^PT[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 8; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum > 9) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(8, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Romanian VAT number\r\n         * Examples:\r\n         * - Valid: RO18547290\r\n         * - Invalid: RO18547291\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ro: function(value) {\r\n            if (!/^RO[1-9][0-9]{1,9}$/.test(value)) {\r\n                return false;\r\n            }\r\n            value = value.substr(2);\r\n\r\n            var length = value.length,\r\n                weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\r\n                sum    = 0;\r\n            for (var i = 0; i < length - 1; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n\r\n            sum = (10 * sum) % 11 % 10;\r\n            return (sum + '' === value.substr(length - 1, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Russian VAT number (Taxpayer Identification Number - INN)\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _ru: function(value) {\r\n            if (!/^RU([0-9]{9}|[0-9]{12})$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var i = 0;\r\n            if (value.length === 10) {\r\n                var sum    = 0,\r\n                    weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n                for (i = 0; i < 10; i++) {\r\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\r\n                }\r\n                sum = sum % 11;\r\n                if (sum > 9) {\r\n                    sum = sum % 10;\r\n                }\r\n\r\n                return (sum + '' === value.substr(9, 1));\r\n            } else if (value.length === 12) {\r\n                var sum1    = 0,\r\n                    weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\r\n                    sum2    = 0,\r\n                    weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\r\n\r\n                for (i = 0; i < 11; i++) {\r\n                    sum1 += parseInt(value.charAt(i), 10) * weight1[i];\r\n                    sum2 += parseInt(value.charAt(i), 10) * weight2[i];\r\n                }\r\n                sum1 = sum1 % 11;\r\n                if (sum1 > 9) {\r\n                    sum1 = sum1 % 10;\r\n                }\r\n                sum2 = sum2 % 11;\r\n                if (sum2 > 9) {\r\n                    sum2 = sum2 % 10;\r\n                }\r\n\r\n                return (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate Serbian VAT number\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _rs: function(value) {\r\n            if (!/^RS[0-9]{9}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum  = 10,\r\n                temp = 0;\r\n            for (var i = 0; i < 8; i++) {\r\n                temp = (parseInt(value.charAt(i), 10) + sum) % 10;\r\n                if (temp === 0) {\r\n                    temp = 10;\r\n                }\r\n                sum = (2 * temp) % 11;\r\n            }\r\n\r\n            return ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);\r\n        },\r\n\r\n        /**\r\n         * Validate Swedish VAT number\r\n         * Examples:\r\n         * - Valid: SE123456789701\r\n         * - Invalid: SE123456789101\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _se: function(value) {\r\n            if (!/^SE[0-9]{10}01$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2, 10);\r\n            return $.fn.bootstrapValidator.helpers.luhn(value);\r\n        },\r\n\r\n        /**\r\n         * Validate Slovenian VAT number\r\n         * Examples:\r\n         * - Valid: SI50223054\r\n         * - Invalid: SI50223055\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _si: function(value) {\r\n            if (!/^SI[0-9]{8}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.substr(2);\r\n            var sum    = 0,\r\n                weight = [8, 7, 6, 5, 4, 3, 2];\r\n\r\n            for (var i = 0; i < 7; i++) {\r\n                sum += parseInt(value.charAt(i), 10) * weight[i];\r\n            }\r\n            sum = 11 - sum % 11;\r\n            if (sum === 10) {\r\n                sum = 0;\r\n            }\r\n            return (sum + '' === value.substr(7, 1));\r\n        },\r\n\r\n        /**\r\n         * Validate Slovak VAT number\r\n         * Examples:\r\n         * - Valid: SK2022749619\r\n         * - Invalid: SK2022749618\r\n         *\r\n         * @param {String} value VAT number\r\n         * @returns {Boolean}\r\n         */\r\n        _sk: function(value) {\r\n            if (!/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            return (parseInt(value.substr(2), 10) % 11 === 0);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.vin = $.extend($.fn.bootstrapValidator.i18n.vin || {}, {\r\n        'default': 'Please enter a valid VIN number'\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.vin = {\r\n        /**\r\n         * Validate an US VIN (Vehicle Identification Number)\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '') {\r\n                return true;\r\n            }\r\n\r\n            // Don't accept I, O, Q characters\r\n            if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\r\n                return false;\r\n            }\r\n\r\n            value = value.toUpperCase();\r\n            var chars   = {\r\n                    A: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,\r\n                    J: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,\r\n                            S: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,\r\n                    '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0\r\n                },\r\n                weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n                sum     = 0,\r\n                length  = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                sum += chars[value.charAt(i) + ''] * weights[i];\r\n            }\r\n\r\n            var reminder = sum % 11;\r\n            if (reminder === 10) {\r\n                reminder = 'X';\r\n            }\r\n\r\n            return (reminder + '') === value.charAt(8);\r\n        }\r\n    };\r\n}(window.jQuery));\r\n;(function($) {\r\n    $.fn.bootstrapValidator.i18n.zipCode = $.extend($.fn.bootstrapValidator.i18n.zipCode || {}, {\r\n        'default': 'Please enter a valid zip code',\r\n        countryNotSupported: 'The country code %s is not supported',\r\n        country: 'Please enter a valid %s',\r\n        countries: {\r\n            CA: 'Canadian postal code',\r\n            DK: 'Danish postal code',\r\n            GB: 'United Kingdom postal code',\r\n            IT: 'Italian postal code',\r\n            NL: 'Dutch postal code',\r\n            SE: 'Swiss postal code',\r\n            SG: 'Singapore postal code',\r\n            US: 'US zip code'\r\n        }\r\n    });\r\n\r\n    $.fn.bootstrapValidator.validators.zipCode = {\r\n        html5Attributes: {\r\n            message: 'message',\r\n            country: 'country'\r\n        },\r\n\r\n        COUNTRY_CODES: ['CA', 'DK', 'GB', 'IT', 'NL', 'SE', 'SG', 'US'],\r\n\r\n        /**\r\n         * Return true if and only if the input value is a valid country zip code\r\n         *\r\n         * @param {BootstrapValidator} validator The validator plugin instance\r\n         * @param {jQuery} $field Field element\r\n         * @param {Object} options Consist of key:\r\n         * - message: The invalid message\r\n         * - country: The country\r\n         *\r\n         * The country can be defined by:\r\n         * - An ISO 3166 country code\r\n         * Currently it supports the following countries:\r\n         *      - US (United States)\r\n         *      - CA (Canada)\r\n         *      - DK (Denmark)\r\n         *      - GB (United Kingdom)\r\n         *      - IT (Italy)\r\n         *      - NL (Netherlands)\r\n         *      - SE (Sweden)\r\n         *      - SG (Singapore)\r\n         *\r\n         * - Name of field which its value defines the country code\r\n         * - Name of callback function that returns the country code\r\n         * - A callback function that returns the country code\r\n         *\r\n         * callback: function(value, validator, $field) {\r\n         *      // value is the value of field\r\n         *      // validator is the BootstrapValidator instance\r\n         *      // $field is jQuery element representing the field\r\n         * }\r\n         *\r\n         * @returns {Boolean|Object}\r\n         */\r\n        validate: function(validator, $field, options) {\r\n            var value = $field.val();\r\n            if (value === '' || !options.country) {\r\n                return true;\r\n            }\r\n\r\n            var country = options.country;\r\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\r\n                // Try to determine the country\r\n                country = validator.getDynamicOption($field, country);\r\n            }\r\n\r\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\r\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.zipCode.countryNotSupported, country) };\r\n            }\r\n\r\n            var isValid = false;\r\n            country = country.toUpperCase();\r\n            switch (country) {\r\n                case 'CA':\r\n                    isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\r\n                    break;\r\n\r\n                case 'DK':\r\n                    isValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\r\n                    break;\r\n\r\n                case 'GB':\r\n                    isValid = this._gb(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\r\n                case 'IT':\r\n                    isValid = /^(I-|IT-)?\\d{5}$/i.test(value);\r\n                    break;\r\n\r\n                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\r\n                case 'NL':\r\n                    isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SE':\r\n                    isValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\r\n                    break;\r\n\r\n                case 'SG':\r\n                    isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\r\n                    break;\r\n\r\n                case 'US':\r\n                /* falls through */\r\n                default:\r\n                    isValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.zipCode.country, $.fn.bootstrapValidator.i18n.zipCode.countries[country])\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Validate United Kingdom postcode\r\n         * Examples:\r\n         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\r\n         * - Special cases:\r\n         * AI-2640, ASCN 1ZZ, GIR 0AA\r\n         *\r\n         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\r\n         * @param {String} value The postcode\r\n         * @returns {Boolean}\r\n         */\r\n        _gb: function(value) {\r\n            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX\r\n                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ\r\n                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',\r\n                fourthChar = '[ABEHMNPRVWXY]',\r\n                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',\r\n                regexps    = [\r\n                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // ANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n                    // AANA NAA\r\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\r\n\r\n                    new RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes\r\n                    /^(GIR)(\\s*)(0AA)$/i,                       // Special postcode GIR 0AA\r\n                    /^(BFPO)(\\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers\r\n                    /^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i,        // c/o BFPO numbers\r\n                    /^([A-Z]{4})(\\s*)(1ZZ)$/i,                  // Overseas Territories\r\n                    /^(AI-2640)$/i                              // Anguilla\r\n                ];\r\n            for (var i = 0; i < regexps.length; i++) {\r\n                if (regexps[i].test(value)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n}(window.jQuery));\r\n"]}]}